// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: svc/compute/baremetal/baremetal_svc.proto

package baremetal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BareMetalService_CreateMachine_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/CreateMachine"
	BareMetalService_DeleteMachine_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/DeleteMachine"
	BareMetalService_GetMachine_FullMethodName                  = "/org.cudo.compute.v1.BareMetalService/GetMachine"
	BareMetalService_ListMachines_FullMethodName                = "/org.cudo.compute.v1.BareMetalService/ListMachines"
	BareMetalService_UpdateMachine_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/UpdateMachine"
	BareMetalService_PowerOffMachine_FullMethodName             = "/org.cudo.compute.v1.BareMetalService/PowerOffMachine"
	BareMetalService_PowerOnMachine_FullMethodName              = "/org.cudo.compute.v1.BareMetalService/PowerOnMachine"
	BareMetalService_DeployMachineOS_FullMethodName             = "/org.cudo.compute.v1.BareMetalService/DeployMachineOS"
	BareMetalService_UndeployMachineOS_FullMethodName           = "/org.cudo.compute.v1.BareMetalService/UndeployMachineOS"
	BareMetalService_ListMachineOperatingSystems_FullMethodName = "/org.cudo.compute.v1.BareMetalService/ListMachineOperatingSystems"
	BareMetalService_ListMachineTypes_FullMethodName            = "/org.cudo.compute.v1.BareMetalService/ListMachineTypes"
	BareMetalService_ListClusterMachineTypes_FullMethodName     = "/org.cudo.compute.v1.BareMetalService/ListClusterMachineTypes"
	BareMetalService_GetClusterMachineType_FullMethodName       = "/org.cudo.compute.v1.BareMetalService/GetClusterMachineType"
	BareMetalService_CreateCluster_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/CreateCluster"
	BareMetalService_DeleteCluster_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/DeleteCluster"
	BareMetalService_GetCluster_FullMethodName                  = "/org.cudo.compute.v1.BareMetalService/GetCluster"
	BareMetalService_ListClusters_FullMethodName                = "/org.cudo.compute.v1.BareMetalService/ListClusters"
	BareMetalService_UpdateCluster_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/UpdateCluster"
	BareMetalService_DeleteClusterMachine_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/DeleteClusterMachine"
	BareMetalService_RebootClusterMachine_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/RebootClusterMachine"
	BareMetalService_RenameClusterMachine_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/RenameClusterMachine"
	BareMetalService_UpdateClusterMachine_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/UpdateClusterMachine"
)

// BareMetalServiceClient is the client API for BareMetalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BareMetalServiceClient interface {
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*Machine, error)
	PowerOffMachine(ctx context.Context, in *PowerOffMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PowerOnMachine(ctx context.Context, in *PowerOnMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeployMachineOS(ctx context.Context, in *DeployMachineOSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UndeployMachineOS(ctx context.Context, in *UndeployMachineOSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMachineOperatingSystems(ctx context.Context, in *ListMachineOperatingSystemsRequest, opts ...grpc.CallOption) (*ListMachineOperatingSystemsResponse, error)
	ListMachineTypes(ctx context.Context, in *ListMachineTypesRequest, opts ...grpc.CallOption) (*ListMachineTypesResponse, error)
	ListClusterMachineTypes(ctx context.Context, in *ListClusterMachineTypesRequest, opts ...grpc.CallOption) (*ListClusterMachineTypesResponse, error)
	GetClusterMachineType(ctx context.Context, in *GetClusterMachineTypeRequest, opts ...grpc.CallOption) (*GetClusterMachineTypeResponse, error)
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	DeleteClusterMachine(ctx context.Context, in *DeleteClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RebootClusterMachine(ctx context.Context, in *RebootClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RenameClusterMachine(ctx context.Context, in *RenameClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateClusterMachine(ctx context.Context, in *UpdateClusterMachineRequest, opts ...grpc.CallOption) (*ClusterMachine, error)
}

type bareMetalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBareMetalServiceClient(cc grpc.ClientConnInterface) BareMetalServiceClient {
	return &bareMetalServiceClient{cc}
}

func (c *bareMetalServiceClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, BareMetalService_CreateMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_DeleteMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) GetMachine(ctx context.Context, in *GetMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, BareMetalService_GetMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListMachines_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) UpdateMachine(ctx context.Context, in *UpdateMachineRequest, opts ...grpc.CallOption) (*Machine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Machine)
	err := c.cc.Invoke(ctx, BareMetalService_UpdateMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) PowerOffMachine(ctx context.Context, in *PowerOffMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_PowerOffMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) PowerOnMachine(ctx context.Context, in *PowerOnMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_PowerOnMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) DeployMachineOS(ctx context.Context, in *DeployMachineOSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_DeployMachineOS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) UndeployMachineOS(ctx context.Context, in *UndeployMachineOSRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_UndeployMachineOS_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListMachineOperatingSystems(ctx context.Context, in *ListMachineOperatingSystemsRequest, opts ...grpc.CallOption) (*ListMachineOperatingSystemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachineOperatingSystemsResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListMachineOperatingSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListMachineTypes(ctx context.Context, in *ListMachineTypesRequest, opts ...grpc.CallOption) (*ListMachineTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachineTypesResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListMachineTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListClusterMachineTypes(ctx context.Context, in *ListClusterMachineTypesRequest, opts ...grpc.CallOption) (*ListClusterMachineTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterMachineTypesResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListClusterMachineTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) GetClusterMachineType(ctx context.Context, in *GetClusterMachineTypeRequest, opts ...grpc.CallOption) (*GetClusterMachineTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterMachineTypeResponse)
	err := c.cc.Invoke(ctx, BareMetalService_GetClusterMachineType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, BareMetalService_CreateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_DeleteCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, BareMetalService_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, BareMetalService_UpdateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) DeleteClusterMachine(ctx context.Context, in *DeleteClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_DeleteClusterMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) RebootClusterMachine(ctx context.Context, in *RebootClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_RebootClusterMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) RenameClusterMachine(ctx context.Context, in *RenameClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_RenameClusterMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) UpdateClusterMachine(ctx context.Context, in *UpdateClusterMachineRequest, opts ...grpc.CallOption) (*ClusterMachine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterMachine)
	err := c.cc.Invoke(ctx, BareMetalService_UpdateClusterMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BareMetalServiceServer is the server API for BareMetalService service.
// All implementations must embed UnimplementedBareMetalServiceServer
// for forward compatibility.
type BareMetalServiceServer interface {
	CreateMachine(context.Context, *CreateMachineRequest) (*Machine, error)
	DeleteMachine(context.Context, *DeleteMachineRequest) (*emptypb.Empty, error)
	GetMachine(context.Context, *GetMachineRequest) (*Machine, error)
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	UpdateMachine(context.Context, *UpdateMachineRequest) (*Machine, error)
	PowerOffMachine(context.Context, *PowerOffMachineRequest) (*emptypb.Empty, error)
	PowerOnMachine(context.Context, *PowerOnMachineRequest) (*emptypb.Empty, error)
	DeployMachineOS(context.Context, *DeployMachineOSRequest) (*emptypb.Empty, error)
	UndeployMachineOS(context.Context, *UndeployMachineOSRequest) (*emptypb.Empty, error)
	ListMachineOperatingSystems(context.Context, *ListMachineOperatingSystemsRequest) (*ListMachineOperatingSystemsResponse, error)
	ListMachineTypes(context.Context, *ListMachineTypesRequest) (*ListMachineTypesResponse, error)
	ListClusterMachineTypes(context.Context, *ListClusterMachineTypesRequest) (*ListClusterMachineTypesResponse, error)
	GetClusterMachineType(context.Context, *GetClusterMachineTypeRequest) (*GetClusterMachineTypeResponse, error)
	CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error)
	DeleteCluster(context.Context, *DeleteClusterRequest) (*emptypb.Empty, error)
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	UpdateCluster(context.Context, *UpdateClusterRequest) (*Cluster, error)
	DeleteClusterMachine(context.Context, *DeleteClusterMachineRequest) (*emptypb.Empty, error)
	RebootClusterMachine(context.Context, *RebootClusterMachineRequest) (*emptypb.Empty, error)
	RenameClusterMachine(context.Context, *RenameClusterMachineRequest) (*emptypb.Empty, error)
	UpdateClusterMachine(context.Context, *UpdateClusterMachineRequest) (*ClusterMachine, error)
	mustEmbedUnimplementedBareMetalServiceServer()
}

// UnimplementedBareMetalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBareMetalServiceServer struct{}

func (UnimplementedBareMetalServiceServer) CreateMachine(context.Context, *CreateMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) DeleteMachine(context.Context, *DeleteMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) GetMachine(context.Context, *GetMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachines not implemented")
}
func (UnimplementedBareMetalServiceServer) UpdateMachine(context.Context, *UpdateMachineRequest) (*Machine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) PowerOffMachine(context.Context, *PowerOffMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOffMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) PowerOnMachine(context.Context, *PowerOnMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOnMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) DeployMachineOS(context.Context, *DeployMachineOSRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployMachineOS not implemented")
}
func (UnimplementedBareMetalServiceServer) UndeployMachineOS(context.Context, *UndeployMachineOSRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployMachineOS not implemented")
}
func (UnimplementedBareMetalServiceServer) ListMachineOperatingSystems(context.Context, *ListMachineOperatingSystemsRequest) (*ListMachineOperatingSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineOperatingSystems not implemented")
}
func (UnimplementedBareMetalServiceServer) ListMachineTypes(context.Context, *ListMachineTypesRequest) (*ListMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineTypes not implemented")
}
func (UnimplementedBareMetalServiceServer) ListClusterMachineTypes(context.Context, *ListClusterMachineTypesRequest) (*ListClusterMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterMachineTypes not implemented")
}
func (UnimplementedBareMetalServiceServer) GetClusterMachineType(context.Context, *GetClusterMachineTypeRequest) (*GetClusterMachineTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterMachineType not implemented")
}
func (UnimplementedBareMetalServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedBareMetalServiceServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedBareMetalServiceServer) GetCluster(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedBareMetalServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedBareMetalServiceServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedBareMetalServiceServer) DeleteClusterMachine(context.Context, *DeleteClusterMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) RebootClusterMachine(context.Context, *RebootClusterMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootClusterMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) RenameClusterMachine(context.Context, *RenameClusterMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameClusterMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) UpdateClusterMachine(context.Context, *UpdateClusterMachineRequest) (*ClusterMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) mustEmbedUnimplementedBareMetalServiceServer() {}
func (UnimplementedBareMetalServiceServer) testEmbeddedByValue()                          {}

// UnsafeBareMetalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BareMetalServiceServer will
// result in compilation errors.
type UnsafeBareMetalServiceServer interface {
	mustEmbedUnimplementedBareMetalServiceServer()
}

func RegisterBareMetalServiceServer(s grpc.ServiceRegistrar, srv BareMetalServiceServer) {
	// If the following call pancis, it indicates UnimplementedBareMetalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BareMetalService_ServiceDesc, srv)
}

func _BareMetalService_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_CreateMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_DeleteMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_GetMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).GetMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_GetMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).GetMachine(ctx, req.(*GetMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListMachines_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_UpdateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).UpdateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_UpdateMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).UpdateMachine(ctx, req.(*UpdateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_PowerOffMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOffMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).PowerOffMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_PowerOffMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).PowerOffMachine(ctx, req.(*PowerOffMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_PowerOnMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOnMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).PowerOnMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_PowerOnMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).PowerOnMachine(ctx, req.(*PowerOnMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_DeployMachineOS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployMachineOSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).DeployMachineOS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_DeployMachineOS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).DeployMachineOS(ctx, req.(*DeployMachineOSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_UndeployMachineOS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployMachineOSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).UndeployMachineOS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_UndeployMachineOS_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).UndeployMachineOS(ctx, req.(*UndeployMachineOSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListMachineOperatingSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineOperatingSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListMachineOperatingSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListMachineOperatingSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListMachineOperatingSystems(ctx, req.(*ListMachineOperatingSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListMachineTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListMachineTypes(ctx, req.(*ListMachineTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListClusterMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterMachineTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListClusterMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListClusterMachineTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListClusterMachineTypes(ctx, req.(*ListClusterMachineTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_GetClusterMachineType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterMachineTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).GetClusterMachineType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_GetClusterMachineType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).GetClusterMachineType(ctx, req.(*GetClusterMachineTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_DeleteClusterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).DeleteClusterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_DeleteClusterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).DeleteClusterMachine(ctx, req.(*DeleteClusterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_RebootClusterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootClusterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).RebootClusterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_RebootClusterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).RebootClusterMachine(ctx, req.(*RebootClusterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_RenameClusterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameClusterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).RenameClusterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_RenameClusterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).RenameClusterMachine(ctx, req.(*RenameClusterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_UpdateClusterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).UpdateClusterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_UpdateClusterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).UpdateClusterMachine(ctx, req.(*UpdateClusterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BareMetalService_ServiceDesc is the grpc.ServiceDesc for BareMetalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BareMetalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.cudo.compute.v1.BareMetalService",
	HandlerType: (*BareMetalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMachine",
			Handler:    _BareMetalService_CreateMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _BareMetalService_DeleteMachine_Handler,
		},
		{
			MethodName: "GetMachine",
			Handler:    _BareMetalService_GetMachine_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _BareMetalService_ListMachines_Handler,
		},
		{
			MethodName: "UpdateMachine",
			Handler:    _BareMetalService_UpdateMachine_Handler,
		},
		{
			MethodName: "PowerOffMachine",
			Handler:    _BareMetalService_PowerOffMachine_Handler,
		},
		{
			MethodName: "PowerOnMachine",
			Handler:    _BareMetalService_PowerOnMachine_Handler,
		},
		{
			MethodName: "DeployMachineOS",
			Handler:    _BareMetalService_DeployMachineOS_Handler,
		},
		{
			MethodName: "UndeployMachineOS",
			Handler:    _BareMetalService_UndeployMachineOS_Handler,
		},
		{
			MethodName: "ListMachineOperatingSystems",
			Handler:    _BareMetalService_ListMachineOperatingSystems_Handler,
		},
		{
			MethodName: "ListMachineTypes",
			Handler:    _BareMetalService_ListMachineTypes_Handler,
		},
		{
			MethodName: "ListClusterMachineTypes",
			Handler:    _BareMetalService_ListClusterMachineTypes_Handler,
		},
		{
			MethodName: "GetClusterMachineType",
			Handler:    _BareMetalService_GetClusterMachineType_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _BareMetalService_CreateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _BareMetalService_DeleteCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _BareMetalService_GetCluster_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _BareMetalService_ListClusters_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _BareMetalService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteClusterMachine",
			Handler:    _BareMetalService_DeleteClusterMachine_Handler,
		},
		{
			MethodName: "RebootClusterMachine",
			Handler:    _BareMetalService_RebootClusterMachine_Handler,
		},
		{
			MethodName: "RenameClusterMachine",
			Handler:    _BareMetalService_RenameClusterMachine_Handler,
		},
		{
			MethodName: "UpdateClusterMachine",
			Handler:    _BareMetalService_UpdateClusterMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/compute/baremetal/baremetal_svc.proto",
}
