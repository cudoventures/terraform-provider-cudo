// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: svc/compute/baremetal/baremetal_svc.proto

package baremetal

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BareMetalService_CreateMachineInstance_FullMethodName       = "/org.cudo.compute.v1.BareMetalService/CreateMachineInstance"
	BareMetalService_DeleteMachineInstance_FullMethodName       = "/org.cudo.compute.v1.BareMetalService/DeleteMachineInstance"
	BareMetalService_GetMachineInstance_FullMethodName          = "/org.cudo.compute.v1.BareMetalService/GetMachineInstance"
	BareMetalService_ListMachineInstances_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/ListMachineInstances"
	BareMetalService_UpdateMachineInstance_FullMethodName       = "/org.cudo.compute.v1.BareMetalService/UpdateMachineInstance"
	BareMetalService_PowerOffMachineInstance_FullMethodName     = "/org.cudo.compute.v1.BareMetalService/PowerOffMachineInstance"
	BareMetalService_PowerOnMachineInstance_FullMethodName      = "/org.cudo.compute.v1.BareMetalService/PowerOnMachineInstance"
	BareMetalService_DeployMachineInstance_FullMethodName       = "/org.cudo.compute.v1.BareMetalService/DeployMachineInstance"
	BareMetalService_UndeployMachineInstance_FullMethodName     = "/org.cudo.compute.v1.BareMetalService/UndeployMachineInstance"
	BareMetalService_EraseMachineInstance_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/EraseMachineInstance"
	BareMetalService_ListMachineOperatingSystems_FullMethodName = "/org.cudo.compute.v1.BareMetalService/ListMachineOperatingSystems"
	BareMetalService_ListMachineTypes_FullMethodName            = "/org.cudo.compute.v1.BareMetalService/ListMachineTypes"
	BareMetalService_ListClusterMachineTypes_FullMethodName     = "/org.cudo.compute.v1.BareMetalService/ListClusterMachineTypes"
	BareMetalService_GetClusterMachineType_FullMethodName       = "/org.cudo.compute.v1.BareMetalService/GetClusterMachineType"
	BareMetalService_CreateCluster_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/CreateCluster"
	BareMetalService_DeleteCluster_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/DeleteCluster"
	BareMetalService_GetCluster_FullMethodName                  = "/org.cudo.compute.v1.BareMetalService/GetCluster"
	BareMetalService_ListClusters_FullMethodName                = "/org.cudo.compute.v1.BareMetalService/ListClusters"
	BareMetalService_UpdateCluster_FullMethodName               = "/org.cudo.compute.v1.BareMetalService/UpdateCluster"
	BareMetalService_DeleteClusterMachine_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/DeleteClusterMachine"
	BareMetalService_RebootClusterMachine_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/RebootClusterMachine"
	BareMetalService_RenameClusterMachine_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/RenameClusterMachine"
	BareMetalService_UpdateClusterMachine_FullMethodName        = "/org.cudo.compute.v1.BareMetalService/UpdateClusterMachine"
)

// BareMetalServiceClient is the client API for BareMetalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BareMetalServiceClient interface {
	CreateMachineInstance(ctx context.Context, in *CreateMachineInstanceRequest, opts ...grpc.CallOption) (*MachineInstance, error)
	DeleteMachineInstance(ctx context.Context, in *DeleteMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMachineInstance(ctx context.Context, in *GetMachineInstanceRequest, opts ...grpc.CallOption) (*MachineInstance, error)
	ListMachineInstances(ctx context.Context, in *ListMachineInstancesRequest, opts ...grpc.CallOption) (*ListMachineInstancesResponse, error)
	UpdateMachineInstance(ctx context.Context, in *UpdateMachineInstanceRequest, opts ...grpc.CallOption) (*MachineInstance, error)
	PowerOffMachineInstance(ctx context.Context, in *PowerOffMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PowerOnMachineInstance(ctx context.Context, in *PowerOnMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeployMachineInstance(ctx context.Context, in *DeployMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UndeployMachineInstance(ctx context.Context, in *UndeployMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EraseMachineInstance(ctx context.Context, in *EraseMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListMachineOperatingSystems(ctx context.Context, in *ListMachineOperatingSystemsRequest, opts ...grpc.CallOption) (*ListMachineOperatingSystemsResponse, error)
	ListMachineTypes(ctx context.Context, in *ListMachineTypesRequest, opts ...grpc.CallOption) (*ListMachineTypesResponse, error)
	ListClusterMachineTypes(ctx context.Context, in *ListClusterMachineTypesRequest, opts ...grpc.CallOption) (*ListClusterMachineTypesResponse, error)
	GetClusterMachineType(ctx context.Context, in *GetClusterMachineTypeRequest, opts ...grpc.CallOption) (*GetClusterMachineTypeResponse, error)
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*Cluster, error)
	DeleteClusterMachine(ctx context.Context, in *DeleteClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RebootClusterMachine(ctx context.Context, in *RebootClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RenameClusterMachine(ctx context.Context, in *RenameClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateClusterMachine(ctx context.Context, in *UpdateClusterMachineRequest, opts ...grpc.CallOption) (*ClusterMachine, error)
}

type bareMetalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBareMetalServiceClient(cc grpc.ClientConnInterface) BareMetalServiceClient {
	return &bareMetalServiceClient{cc}
}

func (c *bareMetalServiceClient) CreateMachineInstance(ctx context.Context, in *CreateMachineInstanceRequest, opts ...grpc.CallOption) (*MachineInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineInstance)
	err := c.cc.Invoke(ctx, BareMetalService_CreateMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) DeleteMachineInstance(ctx context.Context, in *DeleteMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_DeleteMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) GetMachineInstance(ctx context.Context, in *GetMachineInstanceRequest, opts ...grpc.CallOption) (*MachineInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineInstance)
	err := c.cc.Invoke(ctx, BareMetalService_GetMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListMachineInstances(ctx context.Context, in *ListMachineInstancesRequest, opts ...grpc.CallOption) (*ListMachineInstancesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachineInstancesResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListMachineInstances_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) UpdateMachineInstance(ctx context.Context, in *UpdateMachineInstanceRequest, opts ...grpc.CallOption) (*MachineInstance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MachineInstance)
	err := c.cc.Invoke(ctx, BareMetalService_UpdateMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) PowerOffMachineInstance(ctx context.Context, in *PowerOffMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_PowerOffMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) PowerOnMachineInstance(ctx context.Context, in *PowerOnMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_PowerOnMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) DeployMachineInstance(ctx context.Context, in *DeployMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_DeployMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) UndeployMachineInstance(ctx context.Context, in *UndeployMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_UndeployMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) EraseMachineInstance(ctx context.Context, in *EraseMachineInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_EraseMachineInstance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListMachineOperatingSystems(ctx context.Context, in *ListMachineOperatingSystemsRequest, opts ...grpc.CallOption) (*ListMachineOperatingSystemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachineOperatingSystemsResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListMachineOperatingSystems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListMachineTypes(ctx context.Context, in *ListMachineTypesRequest, opts ...grpc.CallOption) (*ListMachineTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMachineTypesResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListMachineTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListClusterMachineTypes(ctx context.Context, in *ListClusterMachineTypesRequest, opts ...grpc.CallOption) (*ListClusterMachineTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClusterMachineTypesResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListClusterMachineTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) GetClusterMachineType(ctx context.Context, in *GetClusterMachineTypeRequest, opts ...grpc.CallOption) (*GetClusterMachineTypeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterMachineTypeResponse)
	err := c.cc.Invoke(ctx, BareMetalService_GetClusterMachineType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, BareMetalService_CreateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) DeleteCluster(ctx context.Context, in *DeleteClusterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_DeleteCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) GetCluster(ctx context.Context, in *GetClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, BareMetalService_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, BareMetalService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) UpdateCluster(ctx context.Context, in *UpdateClusterRequest, opts ...grpc.CallOption) (*Cluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cluster)
	err := c.cc.Invoke(ctx, BareMetalService_UpdateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) DeleteClusterMachine(ctx context.Context, in *DeleteClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_DeleteClusterMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) RebootClusterMachine(ctx context.Context, in *RebootClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_RebootClusterMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) RenameClusterMachine(ctx context.Context, in *RenameClusterMachineRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, BareMetalService_RenameClusterMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bareMetalServiceClient) UpdateClusterMachine(ctx context.Context, in *UpdateClusterMachineRequest, opts ...grpc.CallOption) (*ClusterMachine, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClusterMachine)
	err := c.cc.Invoke(ctx, BareMetalService_UpdateClusterMachine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BareMetalServiceServer is the server API for BareMetalService service.
// All implementations must embed UnimplementedBareMetalServiceServer
// for forward compatibility.
type BareMetalServiceServer interface {
	CreateMachineInstance(context.Context, *CreateMachineInstanceRequest) (*MachineInstance, error)
	DeleteMachineInstance(context.Context, *DeleteMachineInstanceRequest) (*emptypb.Empty, error)
	GetMachineInstance(context.Context, *GetMachineInstanceRequest) (*MachineInstance, error)
	ListMachineInstances(context.Context, *ListMachineInstancesRequest) (*ListMachineInstancesResponse, error)
	UpdateMachineInstance(context.Context, *UpdateMachineInstanceRequest) (*MachineInstance, error)
	PowerOffMachineInstance(context.Context, *PowerOffMachineInstanceRequest) (*emptypb.Empty, error)
	PowerOnMachineInstance(context.Context, *PowerOnMachineInstanceRequest) (*emptypb.Empty, error)
	DeployMachineInstance(context.Context, *DeployMachineInstanceRequest) (*emptypb.Empty, error)
	UndeployMachineInstance(context.Context, *UndeployMachineInstanceRequest) (*emptypb.Empty, error)
	EraseMachineInstance(context.Context, *EraseMachineInstanceRequest) (*emptypb.Empty, error)
	ListMachineOperatingSystems(context.Context, *ListMachineOperatingSystemsRequest) (*ListMachineOperatingSystemsResponse, error)
	ListMachineTypes(context.Context, *ListMachineTypesRequest) (*ListMachineTypesResponse, error)
	ListClusterMachineTypes(context.Context, *ListClusterMachineTypesRequest) (*ListClusterMachineTypesResponse, error)
	GetClusterMachineType(context.Context, *GetClusterMachineTypeRequest) (*GetClusterMachineTypeResponse, error)
	CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error)
	DeleteCluster(context.Context, *DeleteClusterRequest) (*emptypb.Empty, error)
	GetCluster(context.Context, *GetClusterRequest) (*Cluster, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	UpdateCluster(context.Context, *UpdateClusterRequest) (*Cluster, error)
	DeleteClusterMachine(context.Context, *DeleteClusterMachineRequest) (*emptypb.Empty, error)
	RebootClusterMachine(context.Context, *RebootClusterMachineRequest) (*emptypb.Empty, error)
	RenameClusterMachine(context.Context, *RenameClusterMachineRequest) (*emptypb.Empty, error)
	UpdateClusterMachine(context.Context, *UpdateClusterMachineRequest) (*ClusterMachine, error)
	mustEmbedUnimplementedBareMetalServiceServer()
}

// UnimplementedBareMetalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBareMetalServiceServer struct{}

func (UnimplementedBareMetalServiceServer) CreateMachineInstance(context.Context, *CreateMachineInstanceRequest) (*MachineInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) DeleteMachineInstance(context.Context, *DeleteMachineInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) GetMachineInstance(context.Context, *GetMachineInstanceRequest) (*MachineInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) ListMachineInstances(context.Context, *ListMachineInstancesRequest) (*ListMachineInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineInstances not implemented")
}
func (UnimplementedBareMetalServiceServer) UpdateMachineInstance(context.Context, *UpdateMachineInstanceRequest) (*MachineInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) PowerOffMachineInstance(context.Context, *PowerOffMachineInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOffMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) PowerOnMachineInstance(context.Context, *PowerOnMachineInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerOnMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) DeployMachineInstance(context.Context, *DeployMachineInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) UndeployMachineInstance(context.Context, *UndeployMachineInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeployMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) EraseMachineInstance(context.Context, *EraseMachineInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EraseMachineInstance not implemented")
}
func (UnimplementedBareMetalServiceServer) ListMachineOperatingSystems(context.Context, *ListMachineOperatingSystemsRequest) (*ListMachineOperatingSystemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineOperatingSystems not implemented")
}
func (UnimplementedBareMetalServiceServer) ListMachineTypes(context.Context, *ListMachineTypesRequest) (*ListMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMachineTypes not implemented")
}
func (UnimplementedBareMetalServiceServer) ListClusterMachineTypes(context.Context, *ListClusterMachineTypesRequest) (*ListClusterMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusterMachineTypes not implemented")
}
func (UnimplementedBareMetalServiceServer) GetClusterMachineType(context.Context, *GetClusterMachineTypeRequest) (*GetClusterMachineTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterMachineType not implemented")
}
func (UnimplementedBareMetalServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedBareMetalServiceServer) DeleteCluster(context.Context, *DeleteClusterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedBareMetalServiceServer) GetCluster(context.Context, *GetClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedBareMetalServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedBareMetalServiceServer) UpdateCluster(context.Context, *UpdateClusterRequest) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedBareMetalServiceServer) DeleteClusterMachine(context.Context, *DeleteClusterMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClusterMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) RebootClusterMachine(context.Context, *RebootClusterMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootClusterMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) RenameClusterMachine(context.Context, *RenameClusterMachineRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameClusterMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) UpdateClusterMachine(context.Context, *UpdateClusterMachineRequest) (*ClusterMachine, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClusterMachine not implemented")
}
func (UnimplementedBareMetalServiceServer) mustEmbedUnimplementedBareMetalServiceServer() {}
func (UnimplementedBareMetalServiceServer) testEmbeddedByValue()                          {}

// UnsafeBareMetalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BareMetalServiceServer will
// result in compilation errors.
type UnsafeBareMetalServiceServer interface {
	mustEmbedUnimplementedBareMetalServiceServer()
}

func RegisterBareMetalServiceServer(s grpc.ServiceRegistrar, srv BareMetalServiceServer) {
	// If the following call pancis, it indicates UnimplementedBareMetalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BareMetalService_ServiceDesc, srv)
}

func _BareMetalService_CreateMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).CreateMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_CreateMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).CreateMachineInstance(ctx, req.(*CreateMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_DeleteMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).DeleteMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_DeleteMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).DeleteMachineInstance(ctx, req.(*DeleteMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_GetMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).GetMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_GetMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).GetMachineInstance(ctx, req.(*GetMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListMachineInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListMachineInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListMachineInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListMachineInstances(ctx, req.(*ListMachineInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_UpdateMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).UpdateMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_UpdateMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).UpdateMachineInstance(ctx, req.(*UpdateMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_PowerOffMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOffMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).PowerOffMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_PowerOffMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).PowerOffMachineInstance(ctx, req.(*PowerOffMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_PowerOnMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerOnMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).PowerOnMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_PowerOnMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).PowerOnMachineInstance(ctx, req.(*PowerOnMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_DeployMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).DeployMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_DeployMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).DeployMachineInstance(ctx, req.(*DeployMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_UndeployMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeployMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).UndeployMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_UndeployMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).UndeployMachineInstance(ctx, req.(*UndeployMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_EraseMachineInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EraseMachineInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).EraseMachineInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_EraseMachineInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).EraseMachineInstance(ctx, req.(*EraseMachineInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListMachineOperatingSystems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineOperatingSystemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListMachineOperatingSystems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListMachineOperatingSystems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListMachineOperatingSystems(ctx, req.(*ListMachineOperatingSystemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachineTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListMachineTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListMachineTypes(ctx, req.(*ListMachineTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListClusterMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClusterMachineTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListClusterMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListClusterMachineTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListClusterMachineTypes(ctx, req.(*ListClusterMachineTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_GetClusterMachineType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterMachineTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).GetClusterMachineType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_GetClusterMachineType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).GetClusterMachineType(ctx, req.(*GetClusterMachineTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).DeleteCluster(ctx, req.(*DeleteClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).GetCluster(ctx, req.(*GetClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).UpdateCluster(ctx, req.(*UpdateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_DeleteClusterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteClusterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).DeleteClusterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_DeleteClusterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).DeleteClusterMachine(ctx, req.(*DeleteClusterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_RebootClusterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootClusterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).RebootClusterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_RebootClusterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).RebootClusterMachine(ctx, req.(*RebootClusterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_RenameClusterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameClusterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).RenameClusterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_RenameClusterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).RenameClusterMachine(ctx, req.(*RenameClusterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BareMetalService_UpdateClusterMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClusterMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BareMetalServiceServer).UpdateClusterMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BareMetalService_UpdateClusterMachine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BareMetalServiceServer).UpdateClusterMachine(ctx, req.(*UpdateClusterMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BareMetalService_ServiceDesc is the grpc.ServiceDesc for BareMetalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BareMetalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.cudo.compute.v1.BareMetalService",
	HandlerType: (*BareMetalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMachineInstance",
			Handler:    _BareMetalService_CreateMachineInstance_Handler,
		},
		{
			MethodName: "DeleteMachineInstance",
			Handler:    _BareMetalService_DeleteMachineInstance_Handler,
		},
		{
			MethodName: "GetMachineInstance",
			Handler:    _BareMetalService_GetMachineInstance_Handler,
		},
		{
			MethodName: "ListMachineInstances",
			Handler:    _BareMetalService_ListMachineInstances_Handler,
		},
		{
			MethodName: "UpdateMachineInstance",
			Handler:    _BareMetalService_UpdateMachineInstance_Handler,
		},
		{
			MethodName: "PowerOffMachineInstance",
			Handler:    _BareMetalService_PowerOffMachineInstance_Handler,
		},
		{
			MethodName: "PowerOnMachineInstance",
			Handler:    _BareMetalService_PowerOnMachineInstance_Handler,
		},
		{
			MethodName: "DeployMachineInstance",
			Handler:    _BareMetalService_DeployMachineInstance_Handler,
		},
		{
			MethodName: "UndeployMachineInstance",
			Handler:    _BareMetalService_UndeployMachineInstance_Handler,
		},
		{
			MethodName: "EraseMachineInstance",
			Handler:    _BareMetalService_EraseMachineInstance_Handler,
		},
		{
			MethodName: "ListMachineOperatingSystems",
			Handler:    _BareMetalService_ListMachineOperatingSystems_Handler,
		},
		{
			MethodName: "ListMachineTypes",
			Handler:    _BareMetalService_ListMachineTypes_Handler,
		},
		{
			MethodName: "ListClusterMachineTypes",
			Handler:    _BareMetalService_ListClusterMachineTypes_Handler,
		},
		{
			MethodName: "GetClusterMachineType",
			Handler:    _BareMetalService_GetClusterMachineType_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _BareMetalService_CreateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _BareMetalService_DeleteCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _BareMetalService_GetCluster_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _BareMetalService_ListClusters_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _BareMetalService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteClusterMachine",
			Handler:    _BareMetalService_DeleteClusterMachine_Handler,
		},
		{
			MethodName: "RebootClusterMachine",
			Handler:    _BareMetalService_RebootClusterMachine_Handler,
		},
		{
			MethodName: "RenameClusterMachine",
			Handler:    _BareMetalService_RenameClusterMachine_Handler,
		},
		{
			MethodName: "UpdateClusterMachine",
			Handler:    _BareMetalService_UpdateClusterMachine_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/compute/baremetal/baremetal_svc.proto",
}
