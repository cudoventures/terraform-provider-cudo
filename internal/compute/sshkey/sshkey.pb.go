// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: svc/compute/sshkey/sshkey.proto

package sshkey

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SshKeySource int32

const (
	SshKeySource_SSH_KEY_SOURCE_UNKNOWN SshKeySource = 0
	SshKeySource_SSH_KEY_SOURCE_PROJECT SshKeySource = 1
	SshKeySource_SSH_KEY_SOURCE_USER    SshKeySource = 2
	SshKeySource_SSH_KEY_SOURCE_NONE    SshKeySource = 3
)

// Enum value maps for SshKeySource.
var (
	SshKeySource_name = map[int32]string{
		0: "SSH_KEY_SOURCE_UNKNOWN",
		1: "SSH_KEY_SOURCE_PROJECT",
		2: "SSH_KEY_SOURCE_USER",
		3: "SSH_KEY_SOURCE_NONE",
	}
	SshKeySource_value = map[string]int32{
		"SSH_KEY_SOURCE_UNKNOWN": 0,
		"SSH_KEY_SOURCE_PROJECT": 1,
		"SSH_KEY_SOURCE_USER":    2,
		"SSH_KEY_SOURCE_NONE":    3,
	}
)

func (x SshKeySource) Enum() *SshKeySource {
	p := new(SshKeySource)
	*p = x
	return p
}

func (x SshKeySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SshKeySource) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_sshkey_sshkey_proto_enumTypes[0].Descriptor()
}

func (SshKeySource) Type() protoreflect.EnumType {
	return &file_svc_compute_sshkey_sshkey_proto_enumTypes[0]
}

func (x SshKeySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SshKeySource.Descriptor instead.
func (SshKeySource) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_sshkey_sshkey_proto_rawDescGZIP(), []int{0}
}

type SshKey struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	PublicKey     string                 `protobuf:"bytes,4,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Fingerprint   string                 `protobuf:"bytes,5,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	Type          string                 `protobuf:"bytes,6,opt,name=type,proto3" json:"type,omitempty"`
	Comment       string                 `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SshKey) Reset() {
	*x = SshKey{}
	mi := &file_svc_compute_sshkey_sshkey_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SshKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SshKey) ProtoMessage() {}

func (x *SshKey) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_sshkey_sshkey_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SshKey.ProtoReflect.Descriptor instead.
func (*SshKey) Descriptor() ([]byte, []int) {
	return file_svc_compute_sshkey_sshkey_proto_rawDescGZIP(), []int{0}
}

func (x *SshKey) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SshKey) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *SshKey) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *SshKey) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *SshKey) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SshKey) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_svc_compute_sshkey_sshkey_proto protoreflect.FileDescriptor

const file_svc_compute_sshkey_sshkey_proto_rawDesc = "" +
	"\n" +
	"\x1fsvc/compute/sshkey/sshkey.proto\x12\x13org.cudo.compute.v1\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xe2\x01\n" +
	"\x06SshKey\x12\x13\n" +
	"\x02id\x18\x01 \x01(\tB\x03\xe0A\x03R\x02id\x12@\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB\x03\xe0A\x03R\n" +
	"createTime\x12\"\n" +
	"\n" +
	"public_key\x18\x04 \x01(\tB\x03\xe0A\x02R\tpublicKey\x12%\n" +
	"\vfingerprint\x18\x05 \x01(\tB\x03\xe0A\x03R\vfingerprint\x12\x17\n" +
	"\x04type\x18\x06 \x01(\tB\x03\xe0A\x03R\x04type\x12\x1d\n" +
	"\acomment\x18\a \x01(\tB\x03\xe0A\x03R\acomment*x\n" +
	"\fSshKeySource\x12\x1a\n" +
	"\x16SSH_KEY_SOURCE_UNKNOWN\x10\x00\x12\x1a\n" +
	"\x16SSH_KEY_SOURCE_PROJECT\x10\x01\x12\x17\n" +
	"\x13SSH_KEY_SOURCE_USER\x10\x02\x12\x17\n" +
	"\x13SSH_KEY_SOURCE_NONE\x10\x03BIZGgithub.com/CudoVentures/terraform-provider-cudo/internal/compute/sshkeyb\x06proto3"

var (
	file_svc_compute_sshkey_sshkey_proto_rawDescOnce sync.Once
	file_svc_compute_sshkey_sshkey_proto_rawDescData []byte
)

func file_svc_compute_sshkey_sshkey_proto_rawDescGZIP() []byte {
	file_svc_compute_sshkey_sshkey_proto_rawDescOnce.Do(func() {
		file_svc_compute_sshkey_sshkey_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_svc_compute_sshkey_sshkey_proto_rawDesc), len(file_svc_compute_sshkey_sshkey_proto_rawDesc)))
	})
	return file_svc_compute_sshkey_sshkey_proto_rawDescData
}

var file_svc_compute_sshkey_sshkey_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_svc_compute_sshkey_sshkey_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_svc_compute_sshkey_sshkey_proto_goTypes = []any{
	(SshKeySource)(0),             // 0: org.cudo.compute.v1.SshKeySource
	(*SshKey)(nil),                // 1: org.cudo.compute.v1.SshKey
	(*timestamppb.Timestamp)(nil), // 2: google.protobuf.Timestamp
}
var file_svc_compute_sshkey_sshkey_proto_depIdxs = []int32{
	2, // 0: org.cudo.compute.v1.SshKey.create_time:type_name -> google.protobuf.Timestamp
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_svc_compute_sshkey_sshkey_proto_init() }
func file_svc_compute_sshkey_sshkey_proto_init() {
	if File_svc_compute_sshkey_sshkey_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_svc_compute_sshkey_sshkey_proto_rawDesc), len(file_svc_compute_sshkey_sshkey_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_svc_compute_sshkey_sshkey_proto_goTypes,
		DependencyIndexes: file_svc_compute_sshkey_sshkey_proto_depIdxs,
		EnumInfos:         file_svc_compute_sshkey_sshkey_proto_enumTypes,
		MessageInfos:      file_svc_compute_sshkey_sshkey_proto_msgTypes,
	}.Build()
	File_svc_compute_sshkey_sshkey_proto = out.File
	file_svc_compute_sshkey_sshkey_proto_goTypes = nil
	file_svc_compute_sshkey_sshkey_proto_depIdxs = nil
}
