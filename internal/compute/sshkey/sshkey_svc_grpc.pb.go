// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: svc/compute/sshkey/sshkey_svc.proto

package sshkey

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SshKeyService_CreateSshKey_FullMethodName       = "/org.cudo.compute.v1.SshKeyService/CreateSshKey"
	SshKeyService_DeleteSshKey_FullMethodName       = "/org.cudo.compute.v1.SshKeyService/DeleteSshKey"
	SshKeyService_GetSshKey_FullMethodName          = "/org.cudo.compute.v1.SshKeyService/GetSshKey"
	SshKeyService_ListProjectSshKeys_FullMethodName = "/org.cudo.compute.v1.SshKeyService/ListProjectSshKeys"
	SshKeyService_ListSshKeys_FullMethodName        = "/org.cudo.compute.v1.SshKeyService/ListSshKeys"
)

// SshKeyServiceClient is the client API for SshKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SshKeyServiceClient interface {
	CreateSshKey(ctx context.Context, in *CreateSshKeyRequest, opts ...grpc.CallOption) (*SshKey, error)
	DeleteSshKey(ctx context.Context, in *DeleteSshKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetSshKey(ctx context.Context, in *GetSshKeyRequest, opts ...grpc.CallOption) (*SshKey, error)
	ListProjectSshKeys(ctx context.Context, in *ListProjectSshKeysRequest, opts ...grpc.CallOption) (*ListProjectSshKeysResponse, error)
	ListSshKeys(ctx context.Context, in *ListSshKeysRequest, opts ...grpc.CallOption) (*ListSshKeysResponse, error)
}

type sshKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSshKeyServiceClient(cc grpc.ClientConnInterface) SshKeyServiceClient {
	return &sshKeyServiceClient{cc}
}

func (c *sshKeyServiceClient) CreateSshKey(ctx context.Context, in *CreateSshKeyRequest, opts ...grpc.CallOption) (*SshKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SshKey)
	err := c.cc.Invoke(ctx, SshKeyService_CreateSshKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) DeleteSshKey(ctx context.Context, in *DeleteSshKeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SshKeyService_DeleteSshKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) GetSshKey(ctx context.Context, in *GetSshKeyRequest, opts ...grpc.CallOption) (*SshKey, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SshKey)
	err := c.cc.Invoke(ctx, SshKeyService_GetSshKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) ListProjectSshKeys(ctx context.Context, in *ListProjectSshKeysRequest, opts ...grpc.CallOption) (*ListProjectSshKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProjectSshKeysResponse)
	err := c.cc.Invoke(ctx, SshKeyService_ListProjectSshKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sshKeyServiceClient) ListSshKeys(ctx context.Context, in *ListSshKeysRequest, opts ...grpc.CallOption) (*ListSshKeysResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSshKeysResponse)
	err := c.cc.Invoke(ctx, SshKeyService_ListSshKeys_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SshKeyServiceServer is the server API for SshKeyService service.
// All implementations must embed UnimplementedSshKeyServiceServer
// for forward compatibility.
type SshKeyServiceServer interface {
	CreateSshKey(context.Context, *CreateSshKeyRequest) (*SshKey, error)
	DeleteSshKey(context.Context, *DeleteSshKeyRequest) (*emptypb.Empty, error)
	GetSshKey(context.Context, *GetSshKeyRequest) (*SshKey, error)
	ListProjectSshKeys(context.Context, *ListProjectSshKeysRequest) (*ListProjectSshKeysResponse, error)
	ListSshKeys(context.Context, *ListSshKeysRequest) (*ListSshKeysResponse, error)
	mustEmbedUnimplementedSshKeyServiceServer()
}

// UnimplementedSshKeyServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSshKeyServiceServer struct{}

func (UnimplementedSshKeyServiceServer) CreateSshKey(context.Context, *CreateSshKeyRequest) (*SshKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSshKey not implemented")
}
func (UnimplementedSshKeyServiceServer) DeleteSshKey(context.Context, *DeleteSshKeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSshKey not implemented")
}
func (UnimplementedSshKeyServiceServer) GetSshKey(context.Context, *GetSshKeyRequest) (*SshKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSshKey not implemented")
}
func (UnimplementedSshKeyServiceServer) ListProjectSshKeys(context.Context, *ListProjectSshKeysRequest) (*ListProjectSshKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectSshKeys not implemented")
}
func (UnimplementedSshKeyServiceServer) ListSshKeys(context.Context, *ListSshKeysRequest) (*ListSshKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSshKeys not implemented")
}
func (UnimplementedSshKeyServiceServer) mustEmbedUnimplementedSshKeyServiceServer() {}
func (UnimplementedSshKeyServiceServer) testEmbeddedByValue()                       {}

// UnsafeSshKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SshKeyServiceServer will
// result in compilation errors.
type UnsafeSshKeyServiceServer interface {
	mustEmbedUnimplementedSshKeyServiceServer()
}

func RegisterSshKeyServiceServer(s grpc.ServiceRegistrar, srv SshKeyServiceServer) {
	// If the following call pancis, it indicates UnimplementedSshKeyServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SshKeyService_ServiceDesc, srv)
}

func _SshKeyService_CreateSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).CreateSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshKeyService_CreateSshKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).CreateSshKey(ctx, req.(*CreateSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_DeleteSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).DeleteSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshKeyService_DeleteSshKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).DeleteSshKey(ctx, req.(*DeleteSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_GetSshKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSshKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).GetSshKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshKeyService_GetSshKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).GetSshKey(ctx, req.(*GetSshKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_ListProjectSshKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectSshKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).ListProjectSshKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshKeyService_ListProjectSshKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).ListProjectSshKeys(ctx, req.(*ListProjectSshKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SshKeyService_ListSshKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSshKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SshKeyServiceServer).ListSshKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SshKeyService_ListSshKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SshKeyServiceServer).ListSshKeys(ctx, req.(*ListSshKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SshKeyService_ServiceDesc is the grpc.ServiceDesc for SshKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SshKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.cudo.compute.v1.SshKeyService",
	HandlerType: (*SshKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSshKey",
			Handler:    _SshKeyService_CreateSshKey_Handler,
		},
		{
			MethodName: "DeleteSshKey",
			Handler:    _SshKeyService_DeleteSshKey_Handler,
		},
		{
			MethodName: "GetSshKey",
			Handler:    _SshKeyService_GetSshKey_Handler,
		},
		{
			MethodName: "ListProjectSshKeys",
			Handler:    _SshKeyService_ListProjectSshKeys_Handler,
		},
		{
			MethodName: "ListSshKeys",
			Handler:    _SshKeyService_ListSshKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/compute/sshkey/sshkey_svc.proto",
}
