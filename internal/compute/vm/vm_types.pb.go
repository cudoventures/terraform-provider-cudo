// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: svc/compute/vm/vm_types.proto

package vm

import (
	network "github.com/CudoVentures/terraform-provider-cudo/internal/compute/network"
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	decimal "google.golang.org/genproto/googleapis/type/decimal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vm_PreconditionFailureType int32

const (
	// Do not use this default value
	Vm_PreconditionFailureType_ERROR_REASON_UNSPECIFIED Vm_PreconditionFailureType = 0
	// The request whose associated billing account is blocked
	Vm_PreconditionFailureType_BILLING_ACCOUNT_BLOCKED Vm_PreconditionFailureType = 1
	// The request whose associated billing account is disabled
	Vm_PreconditionFailureType_BILLING_ACCOUNT_DISABLED Vm_PreconditionFailureType = 2
	// The request is denied because the virtual machine associated with the request
	// is not in active or stopped state which is required to perform the operation,
	// for example, resizing a disk
	Vm_PreconditionFailureType_VM_NOT_ACTIVE_OR_STOPPED Vm_PreconditionFailureType = 3
	// The request is denied because the virtual machine associated with the request
	// is not in stopped state which is required to perform the operation,
	// for example, starting a stopped vm
	Vm_PreconditionFailureType_VM_NOT_STOPPED Vm_PreconditionFailureType = 4
	// The request is denied because the virtual machine associated with the request
	// is not in active state which is required to perform the operation,
	// for example, stopping a running vm
	Vm_PreconditionFailureType_VM_NOT_ACTIVE Vm_PreconditionFailureType = 5
	// The request is denied because the virtual machine associated with the request
	// is not ready to perform the requested operation, for example, deleting a vm
	// in hotplug state
	Vm_PreconditionFailureType_VM_NOT_READY Vm_PreconditionFailureType = 6
	// The request is denied because the image associated with the request
	// is being used, for example, deleting a private image being used by a vm
	Vm_PreconditionFailureType_IMAGE_IN_USE Vm_PreconditionFailureType = 7
	// The request is denied because the image associated with the request
	// is not ready to perform the requested operation, for example, creating
	// a vm with from an image in init state
	Vm_PreconditionFailureType_IMAGE_NOT_READY Vm_PreconditionFailureType = 8
	// The request is denied because the network associated with the request
	// is not ready to perform the requested operation, for example, attaching
	// a vm to a network in 'boot' state
	Vm_PreconditionFailureType_NETWORK_NOT_READY Vm_PreconditionFailureType = 9
	// The request is denied because the security group associated with the request
	// is is being used, for example, attempting to attach an already attached security
	// group to a vm
	Vm_PreconditionFailureType_SECURITY_GROUP_IN_USE Vm_PreconditionFailureType = 10
	// The request is denied because the security group associated with the request
	// is not attached to the vm for the requested operation, for example, detaching
	// a security group that is not attached to a vm
	Vm_PreconditionFailureType_SECURITY_GROUP_NOT_IN_USE Vm_PreconditionFailureType = 11
	// The request is denied because the disk associated with the request
	// is being used, for example, deleting a disk currently in use by a vm
	Vm_PreconditionFailureType_DISK_IN_USE Vm_PreconditionFailureType = 12
	// The request is denied because the disk associated with the request
	// is not ready to perform the requested operation, for example, attaching
	// a disk in 'init' state to a vm
	Vm_PreconditionFailureType_DISK_NOT_READY Vm_PreconditionFailureType = 13
	// The request is denied because the disk associated with the request
	// is not attached to the vm for the requested operation, for example, resizing
	// a disk not attached to a vm
	Vm_PreconditionFailureType_DISK_NOT_IN_USE Vm_PreconditionFailureType = 14
	// The request is denied because the disk type associated with the request
	// is incorrect, for example, attempting to attach an 'os' (boot disk) to a vm
	Vm_PreconditionFailureType_DISK_TYPE_INCORRECT Vm_PreconditionFailureType = 15
	// The virtual machine cannot be deleted while it is committed
	Vm_PreconditionFailureType_VM_COMMITTED Vm_PreconditionFailureType = 16
)

// Enum value maps for Vm_PreconditionFailureType.
var (
	Vm_PreconditionFailureType_name = map[int32]string{
		0:  "ERROR_REASON_UNSPECIFIED",
		1:  "BILLING_ACCOUNT_BLOCKED",
		2:  "BILLING_ACCOUNT_DISABLED",
		3:  "VM_NOT_ACTIVE_OR_STOPPED",
		4:  "VM_NOT_STOPPED",
		5:  "VM_NOT_ACTIVE",
		6:  "VM_NOT_READY",
		7:  "IMAGE_IN_USE",
		8:  "IMAGE_NOT_READY",
		9:  "NETWORK_NOT_READY",
		10: "SECURITY_GROUP_IN_USE",
		11: "SECURITY_GROUP_NOT_IN_USE",
		12: "DISK_IN_USE",
		13: "DISK_NOT_READY",
		14: "DISK_NOT_IN_USE",
		15: "DISK_TYPE_INCORRECT",
		16: "VM_COMMITTED",
	}
	Vm_PreconditionFailureType_value = map[string]int32{
		"ERROR_REASON_UNSPECIFIED":  0,
		"BILLING_ACCOUNT_BLOCKED":   1,
		"BILLING_ACCOUNT_DISABLED":  2,
		"VM_NOT_ACTIVE_OR_STOPPED":  3,
		"VM_NOT_STOPPED":            4,
		"VM_NOT_ACTIVE":             5,
		"VM_NOT_READY":              6,
		"IMAGE_IN_USE":              7,
		"IMAGE_NOT_READY":           8,
		"NETWORK_NOT_READY":         9,
		"SECURITY_GROUP_IN_USE":     10,
		"SECURITY_GROUP_NOT_IN_USE": 11,
		"DISK_IN_USE":               12,
		"DISK_NOT_READY":            13,
		"DISK_NOT_IN_USE":           14,
		"DISK_TYPE_INCORRECT":       15,
		"VM_COMMITTED":              16,
	}
)

func (x Vm_PreconditionFailureType) Enum() *Vm_PreconditionFailureType {
	p := new(Vm_PreconditionFailureType)
	*p = x
	return p
}

func (x Vm_PreconditionFailureType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Vm_PreconditionFailureType) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[0].Descriptor()
}

func (Vm_PreconditionFailureType) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[0]
}

func (x Vm_PreconditionFailureType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Vm_PreconditionFailureType.Descriptor instead.
func (Vm_PreconditionFailureType) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{0}
}

type SshKeySource int32

const (
	SshKeySource_SSH_KEY_SOURCE_UNKNOWN SshKeySource = 0
	SshKeySource_SSH_KEY_SOURCE_PROJECT SshKeySource = 1
	SshKeySource_SSH_KEY_SOURCE_USER    SshKeySource = 2
	SshKeySource_SSH_KEY_SOURCE_NONE    SshKeySource = 3
)

// Enum value maps for SshKeySource.
var (
	SshKeySource_name = map[int32]string{
		0: "SSH_KEY_SOURCE_UNKNOWN",
		1: "SSH_KEY_SOURCE_PROJECT",
		2: "SSH_KEY_SOURCE_USER",
		3: "SSH_KEY_SOURCE_NONE",
	}
	SshKeySource_value = map[string]int32{
		"SSH_KEY_SOURCE_UNKNOWN": 0,
		"SSH_KEY_SOURCE_PROJECT": 1,
		"SSH_KEY_SOURCE_USER":    2,
		"SSH_KEY_SOURCE_NONE":    3,
	}
)

func (x SshKeySource) Enum() *SshKeySource {
	p := new(SshKeySource)
	*p = x
	return p
}

func (x SshKeySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SshKeySource) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[1].Descriptor()
}

func (SshKeySource) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[1]
}

func (x SshKeySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SshKeySource.Descriptor instead.
func (SshKeySource) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{1}
}

type CommitmentTerm int32

const (
	CommitmentTerm_COMMITMENT_TERM_NONE      CommitmentTerm = 0
	CommitmentTerm_COMMITMENT_TERM_1_MONTH   CommitmentTerm = 1
	CommitmentTerm_COMMITMENT_TERM_3_MONTHS  CommitmentTerm = 2
	CommitmentTerm_COMMITMENT_TERM_6_MONTHS  CommitmentTerm = 3
	CommitmentTerm_COMMITMENT_TERM_12_MONTHS CommitmentTerm = 4
	CommitmentTerm_COMMITMENT_TERM_24_MONTHS CommitmentTerm = 5
	CommitmentTerm_COMMITMENT_TERM_36_MONTHS CommitmentTerm = 6
	CommitmentTerm_COMMITMENT_TERM_60_MONTHS CommitmentTerm = 7
)

// Enum value maps for CommitmentTerm.
var (
	CommitmentTerm_name = map[int32]string{
		0: "COMMITMENT_TERM_NONE",
		1: "COMMITMENT_TERM_1_MONTH",
		2: "COMMITMENT_TERM_3_MONTHS",
		3: "COMMITMENT_TERM_6_MONTHS",
		4: "COMMITMENT_TERM_12_MONTHS",
		5: "COMMITMENT_TERM_24_MONTHS",
		6: "COMMITMENT_TERM_36_MONTHS",
		7: "COMMITMENT_TERM_60_MONTHS",
	}
	CommitmentTerm_value = map[string]int32{
		"COMMITMENT_TERM_NONE":      0,
		"COMMITMENT_TERM_1_MONTH":   1,
		"COMMITMENT_TERM_3_MONTHS":  2,
		"COMMITMENT_TERM_6_MONTHS":  3,
		"COMMITMENT_TERM_12_MONTHS": 4,
		"COMMITMENT_TERM_24_MONTHS": 5,
		"COMMITMENT_TERM_36_MONTHS": 6,
		"COMMITMENT_TERM_60_MONTHS": 7,
	}
)

func (x CommitmentTerm) Enum() *CommitmentTerm {
	p := new(CommitmentTerm)
	*p = x
	return p
}

func (x CommitmentTerm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommitmentTerm) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[2].Descriptor()
}

func (CommitmentTerm) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[2]
}

func (x CommitmentTerm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommitmentTerm.Descriptor instead.
func (CommitmentTerm) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{2}
}

type VM_VmState int32

const (
	VM_CLONING            VM_VmState = 0
	VM_CREATING_SNAPSHOT  VM_VmState = 1
	VM_DELETED            VM_VmState = 2
	VM_DELETING           VM_VmState = 3
	VM_DELETING_SNAPSHOT  VM_VmState = 4
	VM_FAILED             VM_VmState = 5
	VM_HOTPLUGGING        VM_VmState = 6
	VM_MIGRATING          VM_VmState = 7
	VM_RECREATING         VM_VmState = 8
	VM_REVERTING_SNAPSHOT VM_VmState = 9
	VM_RESIZING           VM_VmState = 10
	VM_RESIZING_DISK      VM_VmState = 11
	VM_ACTIVE             VM_VmState = 12
	VM_STARTING           VM_VmState = 13
	VM_STOPPED            VM_VmState = 14
	VM_STOPPING           VM_VmState = 15
	VM_SUSPENDED          VM_VmState = 16
	VM_SUSPENDING         VM_VmState = 17
	VM_UNKNOWN            VM_VmState = 18
	VM_PENDING            VM_VmState = 19
)

// Enum value maps for VM_VmState.
var (
	VM_VmState_name = map[int32]string{
		0:  "CLONING",
		1:  "CREATING_SNAPSHOT",
		2:  "DELETED",
		3:  "DELETING",
		4:  "DELETING_SNAPSHOT",
		5:  "FAILED",
		6:  "HOTPLUGGING",
		7:  "MIGRATING",
		8:  "RECREATING",
		9:  "REVERTING_SNAPSHOT",
		10: "RESIZING",
		11: "RESIZING_DISK",
		12: "ACTIVE",
		13: "STARTING",
		14: "STOPPED",
		15: "STOPPING",
		16: "SUSPENDED",
		17: "SUSPENDING",
		18: "UNKNOWN",
		19: "PENDING",
	}
	VM_VmState_value = map[string]int32{
		"CLONING":            0,
		"CREATING_SNAPSHOT":  1,
		"DELETED":            2,
		"DELETING":           3,
		"DELETING_SNAPSHOT":  4,
		"FAILED":             5,
		"HOTPLUGGING":        6,
		"MIGRATING":          7,
		"RECREATING":         8,
		"REVERTING_SNAPSHOT": 9,
		"RESIZING":           10,
		"RESIZING_DISK":      11,
		"ACTIVE":             12,
		"STARTING":           13,
		"STOPPED":            14,
		"STOPPING":           15,
		"SUSPENDED":          16,
		"SUSPENDING":         17,
		"UNKNOWN":            18,
		"PENDING":            19,
	}
)

func (x VM_VmState) Enum() *VM_VmState {
	p := new(VM_VmState)
	*p = x
	return p
}

func (x VM_VmState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VM_VmState) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[3].Descriptor()
}

func (VM_VmState) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[3]
}

func (x VM_VmState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VM_VmState.Descriptor instead.
func (VM_VmState) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{0, 0}
}

type VM_SecurityGroupRule_Protocol int32

const (
	VM_SecurityGroupRule_PROTOCOL_UNKNOWN VM_SecurityGroupRule_Protocol = 0
	VM_SecurityGroupRule_PROTOCOL_ALL     VM_SecurityGroupRule_Protocol = 1
	VM_SecurityGroupRule_PROTOCOL_TCP     VM_SecurityGroupRule_Protocol = 2
	VM_SecurityGroupRule_PROTOCOL_UDP     VM_SecurityGroupRule_Protocol = 3
	VM_SecurityGroupRule_PROTOCOL_ICMP    VM_SecurityGroupRule_Protocol = 4
	VM_SecurityGroupRule_PROTOCOL_ICMPv6  VM_SecurityGroupRule_Protocol = 5
	VM_SecurityGroupRule_PROTOCOL_IPSEC   VM_SecurityGroupRule_Protocol = 6
)

// Enum value maps for VM_SecurityGroupRule_Protocol.
var (
	VM_SecurityGroupRule_Protocol_name = map[int32]string{
		0: "PROTOCOL_UNKNOWN",
		1: "PROTOCOL_ALL",
		2: "PROTOCOL_TCP",
		3: "PROTOCOL_UDP",
		4: "PROTOCOL_ICMP",
		5: "PROTOCOL_ICMPv6",
		6: "PROTOCOL_IPSEC",
	}
	VM_SecurityGroupRule_Protocol_value = map[string]int32{
		"PROTOCOL_UNKNOWN": 0,
		"PROTOCOL_ALL":     1,
		"PROTOCOL_TCP":     2,
		"PROTOCOL_UDP":     3,
		"PROTOCOL_ICMP":    4,
		"PROTOCOL_ICMPv6":  5,
		"PROTOCOL_IPSEC":   6,
	}
)

func (x VM_SecurityGroupRule_Protocol) Enum() *VM_SecurityGroupRule_Protocol {
	p := new(VM_SecurityGroupRule_Protocol)
	*p = x
	return p
}

func (x VM_SecurityGroupRule_Protocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VM_SecurityGroupRule_Protocol) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[4].Descriptor()
}

func (VM_SecurityGroupRule_Protocol) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[4]
}

func (x VM_SecurityGroupRule_Protocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VM_SecurityGroupRule_Protocol.Descriptor instead.
func (VM_SecurityGroupRule_Protocol) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{0, 1, 0}
}

type VM_SecurityGroupRule_RuleType int32

const (
	VM_SecurityGroupRule_RULE_TYPE_UNKNOWN  VM_SecurityGroupRule_RuleType = 0
	VM_SecurityGroupRule_RULE_TYPE_INBOUND  VM_SecurityGroupRule_RuleType = 1
	VM_SecurityGroupRule_RULE_TYPE_OUTBOUND VM_SecurityGroupRule_RuleType = 2
)

// Enum value maps for VM_SecurityGroupRule_RuleType.
var (
	VM_SecurityGroupRule_RuleType_name = map[int32]string{
		0: "RULE_TYPE_UNKNOWN",
		1: "RULE_TYPE_INBOUND",
		2: "RULE_TYPE_OUTBOUND",
	}
	VM_SecurityGroupRule_RuleType_value = map[string]int32{
		"RULE_TYPE_UNKNOWN":  0,
		"RULE_TYPE_INBOUND":  1,
		"RULE_TYPE_OUTBOUND": 2,
	}
)

func (x VM_SecurityGroupRule_RuleType) Enum() *VM_SecurityGroupRule_RuleType {
	p := new(VM_SecurityGroupRule_RuleType)
	*p = x
	return p
}

func (x VM_SecurityGroupRule_RuleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VM_SecurityGroupRule_RuleType) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[5].Descriptor()
}

func (VM_SecurityGroupRule_RuleType) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[5]
}

func (x VM_SecurityGroupRule_RuleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VM_SecurityGroupRule_RuleType.Descriptor instead.
func (VM_SecurityGroupRule_RuleType) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{0, 1, 1}
}

type PrivateImage_PrivateImageState int32

const (
	PrivateImage_UNKNOWN  PrivateImage_PrivateImageState = 0
	PrivateImage_ATTACHED PrivateImage_PrivateImageState = 1
	PrivateImage_CLONING  PrivateImage_PrivateImageState = 2
	PrivateImage_CREATING PrivateImage_PrivateImageState = 3
	PrivateImage_DELETING PrivateImage_PrivateImageState = 4
	PrivateImage_DISABLED PrivateImage_PrivateImageState = 5
	PrivateImage_FAILED   PrivateImage_PrivateImageState = 6
	PrivateImage_READY    PrivateImage_PrivateImageState = 7
	PrivateImage_UPDATING PrivateImage_PrivateImageState = 8
)

// Enum value maps for PrivateImage_PrivateImageState.
var (
	PrivateImage_PrivateImageState_name = map[int32]string{
		0: "UNKNOWN",
		1: "ATTACHED",
		2: "CLONING",
		3: "CREATING",
		4: "DELETING",
		5: "DISABLED",
		6: "FAILED",
		7: "READY",
		8: "UPDATING",
	}
	PrivateImage_PrivateImageState_value = map[string]int32{
		"UNKNOWN":  0,
		"ATTACHED": 1,
		"CLONING":  2,
		"CREATING": 3,
		"DELETING": 4,
		"DISABLED": 5,
		"FAILED":   6,
		"READY":    7,
		"UPDATING": 8,
	}
)

func (x PrivateImage_PrivateImageState) Enum() *PrivateImage_PrivateImageState {
	p := new(PrivateImage_PrivateImageState)
	*p = x
	return p
}

func (x PrivateImage_PrivateImageState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateImage_PrivateImageState) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[6].Descriptor()
}

func (PrivateImage_PrivateImageState) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[6]
}

func (x PrivateImage_PrivateImageState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateImage_PrivateImageState.Descriptor instead.
func (PrivateImage_PrivateImageState) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{2, 0}
}

type Disk_StorageClass int32

const (
	Disk_STORAGE_CLASS_UNKNOWN Disk_StorageClass = 0
	Disk_STORAGE_CLASS_LOCAL   Disk_StorageClass = 1
	Disk_STORAGE_CLASS_NETWORK Disk_StorageClass = 2
)

// Enum value maps for Disk_StorageClass.
var (
	Disk_StorageClass_name = map[int32]string{
		0: "STORAGE_CLASS_UNKNOWN",
		1: "STORAGE_CLASS_LOCAL",
		2: "STORAGE_CLASS_NETWORK",
	}
	Disk_StorageClass_value = map[string]int32{
		"STORAGE_CLASS_UNKNOWN": 0,
		"STORAGE_CLASS_LOCAL":   1,
		"STORAGE_CLASS_NETWORK": 2,
	}
)

func (x Disk_StorageClass) Enum() *Disk_StorageClass {
	p := new(Disk_StorageClass)
	*p = x
	return p
}

func (x Disk_StorageClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Disk_StorageClass) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[7].Descriptor()
}

func (Disk_StorageClass) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[7]
}

func (x Disk_StorageClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Disk_StorageClass.Descriptor instead.
func (Disk_StorageClass) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{3, 0}
}

type Disk_DiskType int32

const (
	Disk_DISK_TYPE_UNKNOWN Disk_DiskType = 0
	Disk_DISK_TYPE_BOOT    Disk_DiskType = 1
	Disk_DISK_TYPE_STORAGE Disk_DiskType = 2
)

// Enum value maps for Disk_DiskType.
var (
	Disk_DiskType_name = map[int32]string{
		0: "DISK_TYPE_UNKNOWN",
		1: "DISK_TYPE_BOOT",
		2: "DISK_TYPE_STORAGE",
	}
	Disk_DiskType_value = map[string]int32{
		"DISK_TYPE_UNKNOWN": 0,
		"DISK_TYPE_BOOT":    1,
		"DISK_TYPE_STORAGE": 2,
	}
)

func (x Disk_DiskType) Enum() *Disk_DiskType {
	p := new(Disk_DiskType)
	*p = x
	return p
}

func (x Disk_DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Disk_DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[8].Descriptor()
}

func (Disk_DiskType) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[8]
}

func (x Disk_DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Disk_DiskType.Descriptor instead.
func (Disk_DiskType) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{3, 1}
}

type Disk_DiskState int32

const (
	Disk_UNKNOWN  Disk_DiskState = 0
	Disk_ATTACHED Disk_DiskState = 1
	Disk_CLONING  Disk_DiskState = 2
	Disk_CREATING Disk_DiskState = 3
	Disk_DELETING Disk_DiskState = 4
	Disk_DISABLED Disk_DiskState = 5
	Disk_FAILED   Disk_DiskState = 6
	Disk_READY    Disk_DiskState = 7
	Disk_UPDATING Disk_DiskState = 8
)

// Enum value maps for Disk_DiskState.
var (
	Disk_DiskState_name = map[int32]string{
		0: "UNKNOWN",
		1: "ATTACHED",
		2: "CLONING",
		3: "CREATING",
		4: "DELETING",
		5: "DISABLED",
		6: "FAILED",
		7: "READY",
		8: "UPDATING",
	}
	Disk_DiskState_value = map[string]int32{
		"UNKNOWN":  0,
		"ATTACHED": 1,
		"CLONING":  2,
		"CREATING": 3,
		"DELETING": 4,
		"DISABLED": 5,
		"FAILED":   6,
		"READY":    7,
		"UPDATING": 8,
	}
)

func (x Disk_DiskState) Enum() *Disk_DiskState {
	p := new(Disk_DiskState)
	*p = x
	return p
}

func (x Disk_DiskState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Disk_DiskState) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_types_proto_enumTypes[9].Descriptor()
}

func (Disk_DiskState) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_types_proto_enumTypes[9]
}

func (x Disk_DiskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Disk_DiskState.Descriptor instead.
func (Disk_DiskState) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{3, 2}
}

type VM struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	DatacenterId      string                   `protobuf:"bytes,1,opt,name=datacenter_id,json=datacenterId,proto3" json:"datacenter_id,omitempty"`
	MachineType       string                   `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	Id                string                   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	ExternalIpAddress string                   `protobuf:"bytes,5,opt,name=external_ip_address,json=externalIpAddress,proto3" json:"external_ip_address,omitempty"`
	InternalIpAddress string                   `protobuf:"bytes,6,opt,name=internal_ip_address,json=internalIpAddress,proto3" json:"internal_ip_address,omitempty"`
	PublicIpAddress   string                   `protobuf:"bytes,7,opt,name=public_ip_address,json=publicIpAddress,proto3" json:"public_ip_address,omitempty"`
	Memory            uint32                   `protobuf:"varint,8,opt,name=memory,proto3" json:"memory,omitempty"`
	CpuModel          string                   `protobuf:"bytes,9,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	Vcpus             uint32                   `protobuf:"varint,10,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	GpuModel          string                   `protobuf:"bytes,11,opt,name=gpu_model,json=gpuModel,proto3" json:"gpu_model,omitempty"`
	GpuModelId        string                   `protobuf:"bytes,110,opt,name=gpu_model_id,json=gpuModelId,proto3" json:"gpu_model_id,omitempty"`
	GpuQuantity       uint32                   `protobuf:"varint,12,opt,name=gpu_quantity,json=gpuQuantity,proto3" json:"gpu_quantity,omitempty"`
	BootDiskSizeGib   uint32                   `protobuf:"varint,15,opt,name=boot_disk_size_gib,json=bootDiskSizeGib,proto3" json:"boot_disk_size_gib,omitempty"`
	RenewableEnergy   bool                     `protobuf:"varint,18,opt,name=renewable_energy,json=renewableEnergy,proto3" json:"renewable_energy,omitempty"`
	ImageId           string                   `protobuf:"bytes,190,opt,name=image_id,json=imageId,proto3" json:"image_id,omitempty"`
	PublicImageId     string                   `protobuf:"bytes,19,opt,name=public_image_id,json=publicImageId,proto3" json:"public_image_id,omitempty"`
	PublicImageName   string                   `protobuf:"bytes,20,opt,name=public_image_name,json=publicImageName,proto3" json:"public_image_name,omitempty"`
	PrivateImageId    string                   `protobuf:"bytes,21,opt,name=private_image_id,json=privateImageId,proto3" json:"private_image_id,omitempty"`
	ImageName         string                   `protobuf:"bytes,210,opt,name=image_name,json=imageName,proto3" json:"image_name,omitempty"`
	CreateBy          string                   `protobuf:"bytes,22,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	Nics              []*VM_NIC                `protobuf:"bytes,23,rep,name=nics,proto3" json:"nics,omitempty"`
	Rules             []*VM_SecurityGroupRule  `protobuf:"bytes,24,rep,name=rules,proto3" json:"rules,omitempty"`
	SecurityGroupIds  []string                 `protobuf:"bytes,25,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	ShortState        string                   `protobuf:"bytes,26,opt,name=short_state,json=shortState,proto3" json:"short_state,omitempty"`
	BootDisk          *Disk                    `protobuf:"bytes,27,opt,name=boot_disk,json=bootDisk,proto3" json:"boot_disk,omitempty"`
	StorageDisks      []*Disk                  `protobuf:"bytes,28,rep,name=storage_disks,json=storageDisks,proto3" json:"storage_disks,omitempty"`
	Metadata          map[string]string        `protobuf:"bytes,29,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	State             VM_VmState               `protobuf:"varint,30,opt,name=state,proto3,enum=org.cudo.compute.v1.VM_VmState" json:"state,omitempty"`
	CreateTime        *timestamppb.Timestamp   `protobuf:"bytes,31,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	ExpireTime        *timestamppb.Timestamp   `protobuf:"bytes,32,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	Price             *VM_VMPrice              `protobuf:"bytes,33,opt,name=price,proto3" json:"price,omitempty"`
	CommitmentTerm    CommitmentTerm           `protobuf:"varint,34,opt,name=commitment_term,json=commitmentTerm,proto3,enum=org.cudo.compute.v1.CommitmentTerm" json:"commitment_term,omitempty"`
	CommitmentEndTime *timestamppb.Timestamp   `protobuf:"bytes,35,opt,name=commitment_end_time,json=commitmentEndTime,proto3" json:"commitment_end_time,omitempty"`
	SshKeySource      SshKeySource             `protobuf:"varint,36,opt,name=ssh_key_source,json=sshKeySource,proto3,enum=org.cudo.compute.v1.SshKeySource" json:"ssh_key_source,omitempty"`
	AuthorizedSshKeys string                   `protobuf:"bytes,37,opt,name=authorized_ssh_keys,json=authorizedSshKeys,proto3" json:"authorized_ssh_keys,omitempty"`
	SecurityGroups    []*network.SecurityGroup `protobuf:"bytes,38,rep,name=security_groups,json=securityGroups,proto3" json:"security_groups,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VM) Reset() {
	*x = VM{}
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VM) ProtoMessage() {}

func (x *VM) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VM.ProtoReflect.Descriptor instead.
func (*VM) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{0}
}

func (x *VM) GetDatacenterId() string {
	if x != nil {
		return x.DatacenterId
	}
	return ""
}

func (x *VM) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *VM) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VM) GetExternalIpAddress() string {
	if x != nil {
		return x.ExternalIpAddress
	}
	return ""
}

func (x *VM) GetInternalIpAddress() string {
	if x != nil {
		return x.InternalIpAddress
	}
	return ""
}

func (x *VM) GetPublicIpAddress() string {
	if x != nil {
		return x.PublicIpAddress
	}
	return ""
}

func (x *VM) GetMemory() uint32 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *VM) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *VM) GetVcpus() uint32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *VM) GetGpuModel() string {
	if x != nil {
		return x.GpuModel
	}
	return ""
}

func (x *VM) GetGpuModelId() string {
	if x != nil {
		return x.GpuModelId
	}
	return ""
}

func (x *VM) GetGpuQuantity() uint32 {
	if x != nil {
		return x.GpuQuantity
	}
	return 0
}

func (x *VM) GetBootDiskSizeGib() uint32 {
	if x != nil {
		return x.BootDiskSizeGib
	}
	return 0
}

func (x *VM) GetRenewableEnergy() bool {
	if x != nil {
		return x.RenewableEnergy
	}
	return false
}

func (x *VM) GetImageId() string {
	if x != nil {
		return x.ImageId
	}
	return ""
}

func (x *VM) GetPublicImageId() string {
	if x != nil {
		return x.PublicImageId
	}
	return ""
}

func (x *VM) GetPublicImageName() string {
	if x != nil {
		return x.PublicImageName
	}
	return ""
}

func (x *VM) GetPrivateImageId() string {
	if x != nil {
		return x.PrivateImageId
	}
	return ""
}

func (x *VM) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *VM) GetCreateBy() string {
	if x != nil {
		return x.CreateBy
	}
	return ""
}

func (x *VM) GetNics() []*VM_NIC {
	if x != nil {
		return x.Nics
	}
	return nil
}

func (x *VM) GetRules() []*VM_SecurityGroupRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *VM) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *VM) GetShortState() string {
	if x != nil {
		return x.ShortState
	}
	return ""
}

func (x *VM) GetBootDisk() *Disk {
	if x != nil {
		return x.BootDisk
	}
	return nil
}

func (x *VM) GetStorageDisks() []*Disk {
	if x != nil {
		return x.StorageDisks
	}
	return nil
}

func (x *VM) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *VM) GetState() VM_VmState {
	if x != nil {
		return x.State
	}
	return VM_CLONING
}

func (x *VM) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *VM) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *VM) GetPrice() *VM_VMPrice {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *VM) GetCommitmentTerm() CommitmentTerm {
	if x != nil {
		return x.CommitmentTerm
	}
	return CommitmentTerm_COMMITMENT_TERM_NONE
}

func (x *VM) GetCommitmentEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CommitmentEndTime
	}
	return nil
}

func (x *VM) GetSshKeySource() SshKeySource {
	if x != nil {
		return x.SshKeySource
	}
	return SshKeySource_SSH_KEY_SOURCE_UNKNOWN
}

func (x *VM) GetAuthorizedSshKeys() string {
	if x != nil {
		return x.AuthorizedSshKeys
	}
	return ""
}

func (x *VM) GetSecurityGroups() []*network.SecurityGroup {
	if x != nil {
		return x.SecurityGroups
	}
	return nil
}

type VMMonitoringItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cpu           float32                `protobuf:"fixed32,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	DiskRdBytes   int64                  `protobuf:"varint,2,opt,name=disk_rd_bytes,json=diskRdBytes,proto3" json:"disk_rd_bytes,omitempty"`
	DiskRdIops    int64                  `protobuf:"varint,3,opt,name=disk_rd_iops,json=diskRdIops,proto3" json:"disk_rd_iops,omitempty"`
	DiskWrBytes   int64                  `protobuf:"varint,4,opt,name=disk_wr_bytes,json=diskWrBytes,proto3" json:"disk_wr_bytes,omitempty"`
	DiskWrIops    int64                  `protobuf:"varint,5,opt,name=disk_wr_iops,json=diskWrIops,proto3" json:"disk_wr_iops,omitempty"`
	Memory        int64                  `protobuf:"varint,6,opt,name=memory,proto3" json:"memory,omitempty"`
	NetRx         int64                  `protobuf:"varint,7,opt,name=net_rx,json=netRx,proto3" json:"net_rx,omitempty"`
	NetTx         int64                  `protobuf:"varint,8,opt,name=net_tx,json=netTx,proto3" json:"net_tx,omitempty"`
	Timestamp     int64                  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	GuestPing     int64                  `protobuf:"varint,10,opt,name=guest_ping,json=guestPing,proto3" json:"guest_ping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VMMonitoringItem) Reset() {
	*x = VMMonitoringItem{}
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VMMonitoringItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VMMonitoringItem) ProtoMessage() {}

func (x *VMMonitoringItem) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VMMonitoringItem.ProtoReflect.Descriptor instead.
func (*VMMonitoringItem) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{1}
}

func (x *VMMonitoringItem) GetCpu() float32 {
	if x != nil {
		return x.Cpu
	}
	return 0
}

func (x *VMMonitoringItem) GetDiskRdBytes() int64 {
	if x != nil {
		return x.DiskRdBytes
	}
	return 0
}

func (x *VMMonitoringItem) GetDiskRdIops() int64 {
	if x != nil {
		return x.DiskRdIops
	}
	return 0
}

func (x *VMMonitoringItem) GetDiskWrBytes() int64 {
	if x != nil {
		return x.DiskWrBytes
	}
	return 0
}

func (x *VMMonitoringItem) GetDiskWrIops() int64 {
	if x != nil {
		return x.DiskWrIops
	}
	return 0
}

func (x *VMMonitoringItem) GetMemory() int64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *VMMonitoringItem) GetNetRx() int64 {
	if x != nil {
		return x.NetRx
	}
	return 0
}

func (x *VMMonitoringItem) GetNetTx() int64 {
	if x != nil {
		return x.NetTx
	}
	return 0
}

func (x *VMMonitoringItem) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VMMonitoringItem) GetGuestPing() int64 {
	if x != nil {
		return x.GuestPing
	}
	return 0
}

type PrivateImage struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	ProjectId     string                         `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id            string                         `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	DataCenterId  string                         `protobuf:"bytes,3,opt,name=data_center_id,json=dataCenterId,proto3" json:"data_center_id,omitempty"`
	Description   string                         `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	SizeGib       int32                          `protobuf:"varint,5,opt,name=size_gib,json=sizeGib,proto3" json:"size_gib,omitempty"`
	Platform      string                         `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	State         PrivateImage_PrivateImageState `protobuf:"varint,7,opt,name=state,proto3,enum=org.cudo.compute.v1.PrivateImage_PrivateImageState" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PrivateImage) Reset() {
	*x = PrivateImage{}
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateImage) ProtoMessage() {}

func (x *PrivateImage) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateImage.ProtoReflect.Descriptor instead.
func (*PrivateImage) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{2}
}

func (x *PrivateImage) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *PrivateImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PrivateImage) GetDataCenterId() string {
	if x != nil {
		return x.DataCenterId
	}
	return ""
}

func (x *PrivateImage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PrivateImage) GetSizeGib() int32 {
	if x != nil {
		return x.SizeGib
	}
	return 0
}

func (x *PrivateImage) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *PrivateImage) GetState() PrivateImage_PrivateImageState {
	if x != nil {
		return x.State
	}
	return PrivateImage_UNKNOWN
}

type Disk struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Id             string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ProjectId      string                 `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DataCenterId   string                 `protobuf:"bytes,3,opt,name=data_center_id,json=dataCenterId,proto3" json:"data_center_id,omitempty"`
	VmId           string                 `protobuf:"bytes,4,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	SizeGib        int32                  `protobuf:"varint,5,opt,name=size_gib,json=sizeGib,proto3" json:"size_gib,omitempty"`
	StorageClass   Disk_StorageClass      `protobuf:"varint,6,opt,name=storage_class,json=storageClass,proto3,enum=org.cudo.compute.v1.Disk_StorageClass" json:"storage_class,omitempty"`
	DiskType       Disk_DiskType          `protobuf:"varint,7,opt,name=disk_type,json=diskType,proto3,enum=org.cudo.compute.v1.Disk_DiskType" json:"disk_type,omitempty"`
	PublicImageId  string                 `protobuf:"bytes,8,opt,name=public_image_id,json=publicImageId,proto3" json:"public_image_id,omitempty"`
	PrivateImageId string                 `protobuf:"bytes,9,opt,name=private_image_id,json=privateImageId,proto3" json:"private_image_id,omitempty"`
	CreateTime     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	DiskState      Disk_DiskState         `protobuf:"varint,11,opt,name=disk_state,json=diskState,proto3,enum=org.cudo.compute.v1.Disk_DiskState" json:"disk_state,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Disk) Reset() {
	*x = Disk{}
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{3}
}

func (x *Disk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Disk) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *Disk) GetDataCenterId() string {
	if x != nil {
		return x.DataCenterId
	}
	return ""
}

func (x *Disk) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *Disk) GetSizeGib() int32 {
	if x != nil {
		return x.SizeGib
	}
	return 0
}

func (x *Disk) GetStorageClass() Disk_StorageClass {
	if x != nil {
		return x.StorageClass
	}
	return Disk_STORAGE_CLASS_UNKNOWN
}

func (x *Disk) GetDiskType() Disk_DiskType {
	if x != nil {
		return x.DiskType
	}
	return Disk_DISK_TYPE_UNKNOWN
}

func (x *Disk) GetPublicImageId() string {
	if x != nil {
		return x.PublicImageId
	}
	return ""
}

func (x *Disk) GetPrivateImageId() string {
	if x != nil {
		return x.PrivateImageId
	}
	return ""
}

func (x *Disk) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Disk) GetDiskState() Disk_DiskState {
	if x != nil {
		return x.DiskState
	}
	return Disk_UNKNOWN
}

type Snapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Active        bool                   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	SizeGib       int32                  `protobuf:"varint,3,opt,name=size_gib,json=sizeGib,proto3" json:"size_gib,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Snapshot) Reset() {
	*x = Snapshot{}
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Snapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Snapshot) ProtoMessage() {}

func (x *Snapshot) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Snapshot.ProtoReflect.Descriptor instead.
func (*Snapshot) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{4}
}

func (x *Snapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Snapshot) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Snapshot) GetSizeGib() int32 {
	if x != nil {
		return x.SizeGib
	}
	return 0
}

func (x *Snapshot) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type VM_NIC struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	NetworkId         string                 `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	ExternalIpAddress string                 `protobuf:"bytes,2,opt,name=external_ip_address,json=externalIpAddress,proto3" json:"external_ip_address,omitempty"`
	InternalIpAddress string                 `protobuf:"bytes,3,opt,name=internal_ip_address,json=internalIpAddress,proto3" json:"internal_ip_address,omitempty"`
	NetworkAddress    string                 `protobuf:"bytes,5,opt,name=network_address,json=networkAddress,proto3" json:"network_address,omitempty"`
	SecurityGroupIds  []string               `protobuf:"bytes,6,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VM_NIC) Reset() {
	*x = VM_NIC{}
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VM_NIC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VM_NIC) ProtoMessage() {}

func (x *VM_NIC) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VM_NIC.ProtoReflect.Descriptor instead.
func (*VM_NIC) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{0, 0}
}

func (x *VM_NIC) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *VM_NIC) GetExternalIpAddress() string {
	if x != nil {
		return x.ExternalIpAddress
	}
	return ""
}

func (x *VM_NIC) GetInternalIpAddress() string {
	if x != nil {
		return x.InternalIpAddress
	}
	return ""
}

func (x *VM_NIC) GetNetworkAddress() string {
	if x != nil {
		return x.NetworkAddress
	}
	return ""
}

func (x *VM_NIC) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

type VM_SecurityGroupRule struct {
	state    protoimpl.MessageState        `protogen:"open.v1"`
	Id       string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Protocol VM_SecurityGroupRule_Protocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=org.cudo.compute.v1.VM_SecurityGroupRule_Protocol" json:"protocol,omitempty"`
	Ports    string                        `protobuf:"bytes,3,opt,name=ports,proto3" json:"ports,omitempty"`
	RuleType VM_SecurityGroupRule_RuleType `protobuf:"varint,4,opt,name=rule_type,json=ruleType,proto3,enum=org.cudo.compute.v1.VM_SecurityGroupRule_RuleType" json:"rule_type,omitempty"`
	// single IP or CIDR format range to apply rule to
	IpRangeCidr   string `protobuf:"bytes,5,opt,name=ip_range_cidr,json=ipRangeCidr,proto3" json:"ip_range_cidr,omitempty"`
	IcmpType      string `protobuf:"bytes,6,opt,name=icmp_type,json=icmpType,proto3" json:"icmp_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VM_SecurityGroupRule) Reset() {
	*x = VM_SecurityGroupRule{}
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VM_SecurityGroupRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VM_SecurityGroupRule) ProtoMessage() {}

func (x *VM_SecurityGroupRule) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VM_SecurityGroupRule.ProtoReflect.Descriptor instead.
func (*VM_SecurityGroupRule) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{0, 1}
}

func (x *VM_SecurityGroupRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VM_SecurityGroupRule) GetProtocol() VM_SecurityGroupRule_Protocol {
	if x != nil {
		return x.Protocol
	}
	return VM_SecurityGroupRule_PROTOCOL_UNKNOWN
}

func (x *VM_SecurityGroupRule) GetPorts() string {
	if x != nil {
		return x.Ports
	}
	return ""
}

func (x *VM_SecurityGroupRule) GetRuleType() VM_SecurityGroupRule_RuleType {
	if x != nil {
		return x.RuleType
	}
	return VM_SecurityGroupRule_RULE_TYPE_UNKNOWN
}

func (x *VM_SecurityGroupRule) GetIpRangeCidr() string {
	if x != nil {
		return x.IpRangeCidr
	}
	return ""
}

func (x *VM_SecurityGroupRule) GetIcmpType() string {
	if x != nil {
		return x.IcmpType
	}
	return ""
}

type VM_VMPrice struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	VcpuPriceHr         *decimal.Decimal       `protobuf:"bytes,1,opt,name=vcpu_price_hr,json=vcpuPriceHr,proto3" json:"vcpu_price_hr,omitempty"`
	TotalVcpuPriceHr    *decimal.Decimal       `protobuf:"bytes,2,opt,name=total_vcpu_price_hr,json=totalVcpuPriceHr,proto3" json:"total_vcpu_price_hr,omitempty"`
	MemoryGibPriceHr    *decimal.Decimal       `protobuf:"bytes,3,opt,name=memory_gib_price_hr,json=memoryGibPriceHr,proto3" json:"memory_gib_price_hr,omitempty"`
	TotalMemoryPriceHr  *decimal.Decimal       `protobuf:"bytes,4,opt,name=total_memory_price_hr,json=totalMemoryPriceHr,proto3" json:"total_memory_price_hr,omitempty"`
	GpuPriceHr          *decimal.Decimal       `protobuf:"bytes,5,opt,name=gpu_price_hr,json=gpuPriceHr,proto3" json:"gpu_price_hr,omitempty"`
	TotalGpuPriceHr     *decimal.Decimal       `protobuf:"bytes,6,opt,name=total_gpu_price_hr,json=totalGpuPriceHr,proto3" json:"total_gpu_price_hr,omitempty"`
	StorageGibPriceHr   *decimal.Decimal       `protobuf:"bytes,7,opt,name=storage_gib_price_hr,json=storageGibPriceHr,proto3" json:"storage_gib_price_hr,omitempty"`
	TotalStoragePriceHr *decimal.Decimal       `protobuf:"bytes,8,opt,name=total_storage_price_hr,json=totalStoragePriceHr,proto3" json:"total_storage_price_hr,omitempty"`
	Ipv4AddressPriceHr  *decimal.Decimal       `protobuf:"bytes,9,opt,name=ipv4_address_price_hr,json=ipv4AddressPriceHr,proto3" json:"ipv4_address_price_hr,omitempty"`
	TotalPriceHr        *decimal.Decimal       `protobuf:"bytes,10,opt,name=total_price_hr,json=totalPriceHr,proto3" json:"total_price_hr,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *VM_VMPrice) Reset() {
	*x = VM_VMPrice{}
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VM_VMPrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VM_VMPrice) ProtoMessage() {}

func (x *VM_VMPrice) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_types_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VM_VMPrice.ProtoReflect.Descriptor instead.
func (*VM_VMPrice) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_types_proto_rawDescGZIP(), []int{0, 3}
}

func (x *VM_VMPrice) GetVcpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.VcpuPriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetTotalVcpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalVcpuPriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetMemoryGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.MemoryGibPriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetTotalMemoryPriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalMemoryPriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetGpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.GpuPriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetTotalGpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalGpuPriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetStorageGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.StorageGibPriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetTotalStoragePriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalStoragePriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetIpv4AddressPriceHr() *decimal.Decimal {
	if x != nil {
		return x.Ipv4AddressPriceHr
	}
	return nil
}

func (x *VM_VMPrice) GetTotalPriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalPriceHr
	}
	return nil
}

var File_svc_compute_vm_vm_types_proto protoreflect.FileDescriptor

var file_svc_compute_vm_vm_types_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x6d,
	0x2f, 0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xf3, 0x1b, 0x0a, 0x02, 0x56, 0x4d, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x63,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x70, 0x75,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x67,
	0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x67, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x70,
	0x75, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x67, 0x70, 0x75, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2b, 0x0a,
	0x12, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x67, 0x69, 0x62, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x62, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0xbe, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0xd2, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x79, 0x12, 0x2f, 0x0a, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x2e, 0x4e, 0x49, 0x43, 0x52, 0x04, 0x6e, 0x69,
	0x63, 0x73, 0x12, 0x3f, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x0c, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x4d, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x4d, 0x2e, 0x56, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75,
	0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d,
	0x2e, 0x56, 0x4d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x52, 0x0a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x06, 0xe0, 0x41, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x0e, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x73, 0x68,
	0x4b, 0x65, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x73, 0x68, 0x4b, 0x65,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64,
	0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x4b, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x26, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x1a, 0xdb, 0x01, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x73, 0x1a, 0x82, 0x04, 0x0a, 0x11, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x4e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x4d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4f,
	0x0a, 0x09, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x69, 0x64, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x69, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x63, 0x6d, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x63, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x92, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f,
	0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f,
	0x4c, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x4f, 0x54, 0x4f,
	0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x44, 0x50, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x4f,
	0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x43, 0x4d, 0x50, 0x76, 0x36, 0x10,
	0x05, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x49, 0x50,
	0x53, 0x45, 0x43, 0x10, 0x06, 0x22, 0x50, 0x0a, 0x08, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x55, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x55, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x55, 0x54,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0xda, 0x05, 0x0a, 0x07, 0x56, 0x4d, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0b, 0x76, 0x63, 0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12,
	0x48, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x63,
	0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x48, 0x0a, 0x13, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x48, 0x72, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48,
	0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x67, 0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x46,
	0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x68, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x4a, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x69, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x72, 0x12, 0x4e, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x72, 0x12, 0x4c, 0x0a, 0x15, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x69, 0x70,
	0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72,
	0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48,
	0x72, 0x22, 0xc2, 0x02, 0x0a, 0x07, 0x56, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4c, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x52,
	0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x48, 0x4f, 0x54, 0x50, 0x4c, 0x55, 0x47, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12,
	0x16, 0x0a, 0x12, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x49, 0x5a,
	0x49, 0x4e, 0x47, 0x10, 0x0a, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x45, 0x53, 0x49, 0x5a, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x10, 0x0c, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x0d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x0e, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0f, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x12, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x13, 0x22, 0xb3, 0x02, 0x0a, 0x10, 0x56, 0x4d, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x63,
	0x70, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x22, 0x0a,
	0x0d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x72, 0x64, 0x5f, 0x69, 0x6f, 0x70,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x52, 0x64, 0x49,
	0x6f, 0x70, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x77, 0x72, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x6b,
	0x57, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x6b, 0x5f,
	0x77, 0x72, 0x5f, 0x69, 0x6f, 0x70, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x64,
	0x69, 0x73, 0x6b, 0x57, 0x72, 0x49, 0x6f, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f, 0x72, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x12, 0x15, 0x0a, 0x06, 0x6e, 0x65, 0x74, 0x5f,
	0x74, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x54, 0x78, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1d, 0x0a,
	0x0a, 0x67, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x67, 0x75, 0x65, 0x73, 0x74, 0x50, 0x69, 0x6e, 0x67, 0x22, 0x94, 0x03, 0x0a,
	0x0c, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x69, 0x62,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x62, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x49, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x4f, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x08, 0x22, 0xd5, 0x06, 0x0a, 0x04, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x13, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x18, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x62, 0x12, 0x50, 0x0a, 0x0d, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x03, 0xe0, 0x41, 0x04, 0x52, 0x0c,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x44, 0x0a, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x08, 0x64, 0x69, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03,
	0x52, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x2d, 0x0a, 0x10, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0e,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x47, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x2e,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x09,
	0x64, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x5d, 0x0a, 0x0c, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x22, 0x4c, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x44,
	0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x22, 0x82, 0x01, 0x0a, 0x09, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44,
	0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x07, 0x12, 0x0c, 0x0a,
	0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x22, 0x8a, 0x01, 0x0a, 0x08,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x62, 0x12, 0x3b, 0x0a, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0xa9, 0x03, 0x0a, 0x1a, 0x56, 0x6d, 0x5f,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x69, 0x6c,
	0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x1c, 0x0a, 0x18, 0x56, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x5f, 0x4f, 0x52, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x56, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x4d, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4d, 0x41, 0x47, 0x45,
	0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x08, 0x12, 0x15,
	0x0a, 0x11, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54,
	0x59, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0a,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x47, 0x52, 0x4f,
	0x55, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0b, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0c,
	0x12, 0x12, 0x0a, 0x0e, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41,
	0x44, 0x59, 0x10, 0x0d, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x49, 0x53, 0x4b, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x49, 0x4e, 0x5f, 0x55, 0x53, 0x45, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53,
	0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54,
	0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x4d, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x54,
	0x45, 0x44, 0x10, 0x10, 0x2a, 0x78, 0x0a, 0x0c, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0xff,
	0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72,
	0x6d, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x31,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x33, 0x5f, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x36, 0x5f, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x53, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x31, 0x32, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x53, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e,
	0x54, 0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x32, 0x34, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53,
	0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x54, 0x45, 0x52, 0x4d, 0x5f, 0x33, 0x36, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10,
	0x06, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x54, 0x45, 0x52, 0x4d, 0x5f, 0x36, 0x30, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x53, 0x10, 0x07,
	0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43,
	0x75, 0x64, 0x6f, 0x56, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x63, 0x75, 0x64, 0x6f,
	0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2f,
	0x73, 0x76, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x6d, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_svc_compute_vm_vm_types_proto_rawDescOnce sync.Once
	file_svc_compute_vm_vm_types_proto_rawDescData []byte
)

func file_svc_compute_vm_vm_types_proto_rawDescGZIP() []byte {
	file_svc_compute_vm_vm_types_proto_rawDescOnce.Do(func() {
		file_svc_compute_vm_vm_types_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_svc_compute_vm_vm_types_proto_rawDesc), len(file_svc_compute_vm_vm_types_proto_rawDesc)))
	})
	return file_svc_compute_vm_vm_types_proto_rawDescData
}

var file_svc_compute_vm_vm_types_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_svc_compute_vm_vm_types_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_svc_compute_vm_vm_types_proto_goTypes = []any{
	(Vm_PreconditionFailureType)(0),     // 0: org.cudo.compute.v1.Vm_PreconditionFailureType
	(SshKeySource)(0),                   // 1: org.cudo.compute.v1.SshKeySource
	(CommitmentTerm)(0),                 // 2: org.cudo.compute.v1.CommitmentTerm
	(VM_VmState)(0),                     // 3: org.cudo.compute.v1.VM.VmState
	(VM_SecurityGroupRule_Protocol)(0),  // 4: org.cudo.compute.v1.VM.SecurityGroupRule.Protocol
	(VM_SecurityGroupRule_RuleType)(0),  // 5: org.cudo.compute.v1.VM.SecurityGroupRule.RuleType
	(PrivateImage_PrivateImageState)(0), // 6: org.cudo.compute.v1.PrivateImage.PrivateImageState
	(Disk_StorageClass)(0),              // 7: org.cudo.compute.v1.Disk.StorageClass
	(Disk_DiskType)(0),                  // 8: org.cudo.compute.v1.Disk.DiskType
	(Disk_DiskState)(0),                 // 9: org.cudo.compute.v1.Disk.DiskState
	(*VM)(nil),                          // 10: org.cudo.compute.v1.VM
	(*VMMonitoringItem)(nil),            // 11: org.cudo.compute.v1.VMMonitoringItem
	(*PrivateImage)(nil),                // 12: org.cudo.compute.v1.PrivateImage
	(*Disk)(nil),                        // 13: org.cudo.compute.v1.Disk
	(*Snapshot)(nil),                    // 14: org.cudo.compute.v1.Snapshot
	(*VM_NIC)(nil),                      // 15: org.cudo.compute.v1.VM.NIC
	(*VM_SecurityGroupRule)(nil),        // 16: org.cudo.compute.v1.VM.SecurityGroupRule
	nil,                                 // 17: org.cudo.compute.v1.VM.MetadataEntry
	(*VM_VMPrice)(nil),                  // 18: org.cudo.compute.v1.VM.VMPrice
	(*timestamppb.Timestamp)(nil),       // 19: google.protobuf.Timestamp
	(*network.SecurityGroup)(nil),       // 20: org.cudo.compute.v1.SecurityGroup
	(*decimal.Decimal)(nil),             // 21: google.type.Decimal
}
var file_svc_compute_vm_vm_types_proto_depIdxs = []int32{
	15, // 0: org.cudo.compute.v1.VM.nics:type_name -> org.cudo.compute.v1.VM.NIC
	16, // 1: org.cudo.compute.v1.VM.rules:type_name -> org.cudo.compute.v1.VM.SecurityGroupRule
	13, // 2: org.cudo.compute.v1.VM.boot_disk:type_name -> org.cudo.compute.v1.Disk
	13, // 3: org.cudo.compute.v1.VM.storage_disks:type_name -> org.cudo.compute.v1.Disk
	17, // 4: org.cudo.compute.v1.VM.metadata:type_name -> org.cudo.compute.v1.VM.MetadataEntry
	3,  // 5: org.cudo.compute.v1.VM.state:type_name -> org.cudo.compute.v1.VM.VmState
	19, // 6: org.cudo.compute.v1.VM.create_time:type_name -> google.protobuf.Timestamp
	19, // 7: org.cudo.compute.v1.VM.expire_time:type_name -> google.protobuf.Timestamp
	18, // 8: org.cudo.compute.v1.VM.price:type_name -> org.cudo.compute.v1.VM.VMPrice
	2,  // 9: org.cudo.compute.v1.VM.commitment_term:type_name -> org.cudo.compute.v1.CommitmentTerm
	19, // 10: org.cudo.compute.v1.VM.commitment_end_time:type_name -> google.protobuf.Timestamp
	1,  // 11: org.cudo.compute.v1.VM.ssh_key_source:type_name -> org.cudo.compute.v1.SshKeySource
	20, // 12: org.cudo.compute.v1.VM.security_groups:type_name -> org.cudo.compute.v1.SecurityGroup
	6,  // 13: org.cudo.compute.v1.PrivateImage.state:type_name -> org.cudo.compute.v1.PrivateImage.PrivateImageState
	7,  // 14: org.cudo.compute.v1.Disk.storage_class:type_name -> org.cudo.compute.v1.Disk.StorageClass
	8,  // 15: org.cudo.compute.v1.Disk.disk_type:type_name -> org.cudo.compute.v1.Disk.DiskType
	19, // 16: org.cudo.compute.v1.Disk.create_time:type_name -> google.protobuf.Timestamp
	9,  // 17: org.cudo.compute.v1.Disk.disk_state:type_name -> org.cudo.compute.v1.Disk.DiskState
	19, // 18: org.cudo.compute.v1.Snapshot.create_time:type_name -> google.protobuf.Timestamp
	4,  // 19: org.cudo.compute.v1.VM.SecurityGroupRule.protocol:type_name -> org.cudo.compute.v1.VM.SecurityGroupRule.Protocol
	5,  // 20: org.cudo.compute.v1.VM.SecurityGroupRule.rule_type:type_name -> org.cudo.compute.v1.VM.SecurityGroupRule.RuleType
	21, // 21: org.cudo.compute.v1.VM.VMPrice.vcpu_price_hr:type_name -> google.type.Decimal
	21, // 22: org.cudo.compute.v1.VM.VMPrice.total_vcpu_price_hr:type_name -> google.type.Decimal
	21, // 23: org.cudo.compute.v1.VM.VMPrice.memory_gib_price_hr:type_name -> google.type.Decimal
	21, // 24: org.cudo.compute.v1.VM.VMPrice.total_memory_price_hr:type_name -> google.type.Decimal
	21, // 25: org.cudo.compute.v1.VM.VMPrice.gpu_price_hr:type_name -> google.type.Decimal
	21, // 26: org.cudo.compute.v1.VM.VMPrice.total_gpu_price_hr:type_name -> google.type.Decimal
	21, // 27: org.cudo.compute.v1.VM.VMPrice.storage_gib_price_hr:type_name -> google.type.Decimal
	21, // 28: org.cudo.compute.v1.VM.VMPrice.total_storage_price_hr:type_name -> google.type.Decimal
	21, // 29: org.cudo.compute.v1.VM.VMPrice.ipv4_address_price_hr:type_name -> google.type.Decimal
	21, // 30: org.cudo.compute.v1.VM.VMPrice.total_price_hr:type_name -> google.type.Decimal
	31, // [31:31] is the sub-list for method output_type
	31, // [31:31] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_svc_compute_vm_vm_types_proto_init() }
func file_svc_compute_vm_vm_types_proto_init() {
	if File_svc_compute_vm_vm_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_svc_compute_vm_vm_types_proto_rawDesc), len(file_svc_compute_vm_vm_types_proto_rawDesc)),
			NumEnums:      10,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_svc_compute_vm_vm_types_proto_goTypes,
		DependencyIndexes: file_svc_compute_vm_vm_types_proto_depIdxs,
		EnumInfos:         file_svc_compute_vm_vm_types_proto_enumTypes,
		MessageInfos:      file_svc_compute_vm_vm_types_proto_msgTypes,
	}.Build()
	File_svc_compute_vm_vm_types_proto = out.File
	file_svc_compute_vm_vm_types_proto_goTypes = nil
	file_svc_compute_vm_vm_types_proto_depIdxs = nil
}
