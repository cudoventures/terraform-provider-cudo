// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: svc/compute/vm/vm.proto

package vm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VMService_CountVMs_FullMethodName             = "/org.cudo.compute.v1.VMService/CountVMs"
	VMService_CreateVM_FullMethodName             = "/org.cudo.compute.v1.VMService/CreateVM"
	VMService_GetVM_FullMethodName                = "/org.cudo.compute.v1.VMService/GetVM"
	VMService_ListVMs_FullMethodName              = "/org.cudo.compute.v1.VMService/ListVMs"
	VMService_MonitorVM_FullMethodName            = "/org.cudo.compute.v1.VMService/MonitorVM"
	VMService_RebootVM_FullMethodName             = "/org.cudo.compute.v1.VMService/RebootVM"
	VMService_StartVM_FullMethodName              = "/org.cudo.compute.v1.VMService/StartVM"
	VMService_StopVM_FullMethodName               = "/org.cudo.compute.v1.VMService/StopVM"
	VMService_TerminateVM_FullMethodName          = "/org.cudo.compute.v1.VMService/TerminateVM"
	VMService_ConnectVM_FullMethodName            = "/org.cudo.compute.v1.VMService/ConnectVM"
	VMService_ResizeVM_FullMethodName             = "/org.cudo.compute.v1.VMService/ResizeVM"
	VMService_ListVMDisks_FullMethodName          = "/org.cudo.compute.v1.VMService/ListVMDisks"
	VMService_ListPublicVMImages_FullMethodName   = "/org.cudo.compute.v1.VMService/ListPublicVMImages"
	VMService_ListVMMachineTypes_FullMethodName   = "/org.cudo.compute.v1.VMService/ListVMMachineTypes"
	VMService_ListVMMachineTypes2_FullMethodName  = "/org.cudo.compute.v1.VMService/ListVMMachineTypes2"
	VMService_ListVMDataCenters_FullMethodName    = "/org.cudo.compute.v1.VMService/ListVMDataCenters"
	VMService_ListVMGpuModels_FullMethodName      = "/org.cudo.compute.v1.VMService/ListVMGpuModels"
	VMService_CreatePrivateVMImage_FullMethodName = "/org.cudo.compute.v1.VMService/CreatePrivateVMImage"
	VMService_DeletePrivateVMImage_FullMethodName = "/org.cudo.compute.v1.VMService/DeletePrivateVMImage"
	VMService_GetPrivateVMImage_FullMethodName    = "/org.cudo.compute.v1.VMService/GetPrivateVMImage"
	VMService_ListPrivateVMImages_FullMethodName  = "/org.cudo.compute.v1.VMService/ListPrivateVMImages"
	VMService_UpdatePrivateVMImage_FullMethodName = "/org.cudo.compute.v1.VMService/UpdatePrivateVMImage"
	VMService_CreateStorageDisk_FullMethodName    = "/org.cudo.compute.v1.VMService/CreateStorageDisk"
	VMService_ResizeVMDisk_FullMethodName         = "/org.cudo.compute.v1.VMService/ResizeVMDisk"
	VMService_ListDisks_FullMethodName            = "/org.cudo.compute.v1.VMService/ListDisks"
	VMService_GetDisk_FullMethodName              = "/org.cudo.compute.v1.VMService/GetDisk"
	VMService_DeleteStorageDisk_FullMethodName    = "/org.cudo.compute.v1.VMService/DeleteStorageDisk"
	VMService_AttachStorageDisk_FullMethodName    = "/org.cudo.compute.v1.VMService/AttachStorageDisk"
	VMService_DetachStorageDisk_FullMethodName    = "/org.cudo.compute.v1.VMService/DetachStorageDisk"
	VMService_CreateDiskSnapshot_FullMethodName   = "/org.cudo.compute.v1.VMService/CreateDiskSnapshot"
	VMService_ListDiskSnapshots_FullMethodName    = "/org.cudo.compute.v1.VMService/ListDiskSnapshots"
	VMService_DeleteDiskSnapshot_FullMethodName   = "/org.cudo.compute.v1.VMService/DeleteDiskSnapshot"
	VMService_RevertDisk_FullMethodName           = "/org.cudo.compute.v1.VMService/RevertDisk"
	VMService_AttachSecurityGroup_FullMethodName  = "/org.cudo.compute.v1.VMService/AttachSecurityGroup"
	VMService_DetachSecurityGroup_FullMethodName  = "/org.cudo.compute.v1.VMService/DetachSecurityGroup"
	VMService_UpdateVMMetadata_FullMethodName     = "/org.cudo.compute.v1.VMService/UpdateVMMetadata"
	VMService_UpdateVMExpireTime_FullMethodName   = "/org.cudo.compute.v1.VMService/UpdateVMExpireTime"
	VMService_UpdateVMPassword_FullMethodName     = "/org.cudo.compute.v1.VMService/UpdateVMPassword"
)

// VMServiceClient is the client API for VMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VMServiceClient interface {
	CountVMs(ctx context.Context, in *CountVMsRequest, opts ...grpc.CallOption) (*CountVMsResponse, error)
	CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*CreateVMResponse, error)
	GetVM(ctx context.Context, in *GetVMRequest, opts ...grpc.CallOption) (*GetVMResponse, error)
	ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error)
	MonitorVM(ctx context.Context, in *MonitorVMRequest, opts ...grpc.CallOption) (*MonitorVMResponse, error)
	RebootVM(ctx context.Context, in *RebootVMRequest, opts ...grpc.CallOption) (*RebootVMResponse, error)
	StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*StartVMResponse, error)
	StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*StopVMResponse, error)
	TerminateVM(ctx context.Context, in *TerminateVMRequest, opts ...grpc.CallOption) (*TerminateVMResponse, error)
	ConnectVM(ctx context.Context, in *ConnectVMRequest, opts ...grpc.CallOption) (*ConnectVMResponse, error)
	ResizeVM(ctx context.Context, in *ResizeVMRequest, opts ...grpc.CallOption) (*ResizeVMResponse, error)
	ListVMDisks(ctx context.Context, in *ListVMDisksRequest, opts ...grpc.CallOption) (*ListVMDisksResponse, error)
	ListPublicVMImages(ctx context.Context, in *ListPublicVMImagesRequest, opts ...grpc.CallOption) (*ListPublicVMImagesResponse, error)
	ListVMMachineTypes(ctx context.Context, in *ListVMMachineTypesRequest, opts ...grpc.CallOption) (*ListVMMachineTypesResponse, error)
	ListVMMachineTypes2(ctx context.Context, in *ListVMMachineTypes2Request, opts ...grpc.CallOption) (*ListVMMachineTypes2Response, error)
	ListVMDataCenters(ctx context.Context, in *ListVMDataCentersRequest, opts ...grpc.CallOption) (*ListVMDataCentersResponse, error)
	ListVMGpuModels(ctx context.Context, in *ListVMGpuModelsRequest, opts ...grpc.CallOption) (*ListVMGpuModelsResponse, error)
	CreatePrivateVMImage(ctx context.Context, in *CreatePrivateVMImageRequest, opts ...grpc.CallOption) (*CreatePrivateVMImageResponse, error)
	DeletePrivateVMImage(ctx context.Context, in *DeletePrivateVMImageRequest, opts ...grpc.CallOption) (*DeletePrivateVMImageResponse, error)
	GetPrivateVMImage(ctx context.Context, in *GetPrivateVMImageRequest, opts ...grpc.CallOption) (*GetPrivateVMImageResponse, error)
	ListPrivateVMImages(ctx context.Context, in *ListPrivateVMImagesRequest, opts ...grpc.CallOption) (*ListPrivateVMImagesResponse, error)
	UpdatePrivateVMImage(ctx context.Context, in *UpdatePrivateVMImageRequest, opts ...grpc.CallOption) (*UpdatePrivateVMImageResponse, error)
	CreateStorageDisk(ctx context.Context, in *CreateStorageDiskRequest, opts ...grpc.CallOption) (*CreateStorageDiskResponse, error)
	ResizeVMDisk(ctx context.Context, in *ResizeVMDiskRequest, opts ...grpc.CallOption) (*ResizeVMDiskResponse, error)
	ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error)
	GetDisk(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*GetDiskResponse, error)
	DeleteStorageDisk(ctx context.Context, in *DeleteStorageDiskRequest, opts ...grpc.CallOption) (*DeleteStorageDiskResponse, error)
	AttachStorageDisk(ctx context.Context, in *AttachStorageDiskRequest, opts ...grpc.CallOption) (*AttachStorageDiskResponse, error)
	DetachStorageDisk(ctx context.Context, in *DetachStorageDiskRequest, opts ...grpc.CallOption) (*DetachStorageDiskResponse, error)
	CreateDiskSnapshot(ctx context.Context, in *CreateDiskSnapshotRequest, opts ...grpc.CallOption) (*CreateDiskSnapshotResponse, error)
	ListDiskSnapshots(ctx context.Context, in *ListDiskSnapshotsRequest, opts ...grpc.CallOption) (*ListDiskSnapshotsResponse, error)
	DeleteDiskSnapshot(ctx context.Context, in *DeleteDiskSnapshotRequest, opts ...grpc.CallOption) (*DeleteDiskSnapshotResponse, error)
	RevertDisk(ctx context.Context, in *RevertDiskRequest, opts ...grpc.CallOption) (*RevertDiskResponse, error)
	AttachSecurityGroup(ctx context.Context, in *AttachSecurityGroupRequest, opts ...grpc.CallOption) (*AttachSecurityGroupResponse, error)
	DetachSecurityGroup(ctx context.Context, in *DetachSecurityGroupRequest, opts ...grpc.CallOption) (*DetachSecurityGroupResponse, error)
	UpdateVMMetadata(ctx context.Context, in *UpdateVMMetadataRequest, opts ...grpc.CallOption) (*UpdateVMMetadataResponse, error)
	UpdateVMExpireTime(ctx context.Context, in *UpdateVMExpireTimeRequest, opts ...grpc.CallOption) (*UpdateVMExpireTimeResponse, error)
	UpdateVMPassword(ctx context.Context, in *UpdateVMPasswordRequest, opts ...grpc.CallOption) (*UpdateVMPasswordResponse, error)
}

type vMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVMServiceClient(cc grpc.ClientConnInterface) VMServiceClient {
	return &vMServiceClient{cc}
}

func (c *vMServiceClient) CountVMs(ctx context.Context, in *CountVMsRequest, opts ...grpc.CallOption) (*CountVMsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CountVMsResponse)
	err := c.cc.Invoke(ctx, VMService_CountVMs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) CreateVM(ctx context.Context, in *CreateVMRequest, opts ...grpc.CallOption) (*CreateVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVMResponse)
	err := c.cc.Invoke(ctx, VMService_CreateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) GetVM(ctx context.Context, in *GetVMRequest, opts ...grpc.CallOption) (*GetVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVMResponse)
	err := c.cc.Invoke(ctx, VMService_GetVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListVMs(ctx context.Context, in *ListVMsRequest, opts ...grpc.CallOption) (*ListVMsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMsResponse)
	err := c.cc.Invoke(ctx, VMService_ListVMs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) MonitorVM(ctx context.Context, in *MonitorVMRequest, opts ...grpc.CallOption) (*MonitorVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MonitorVMResponse)
	err := c.cc.Invoke(ctx, VMService_MonitorVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) RebootVM(ctx context.Context, in *RebootVMRequest, opts ...grpc.CallOption) (*RebootVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RebootVMResponse)
	err := c.cc.Invoke(ctx, VMService_RebootVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) StartVM(ctx context.Context, in *StartVMRequest, opts ...grpc.CallOption) (*StartVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartVMResponse)
	err := c.cc.Invoke(ctx, VMService_StartVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) StopVM(ctx context.Context, in *StopVMRequest, opts ...grpc.CallOption) (*StopVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StopVMResponse)
	err := c.cc.Invoke(ctx, VMService_StopVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) TerminateVM(ctx context.Context, in *TerminateVMRequest, opts ...grpc.CallOption) (*TerminateVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateVMResponse)
	err := c.cc.Invoke(ctx, VMService_TerminateVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ConnectVM(ctx context.Context, in *ConnectVMRequest, opts ...grpc.CallOption) (*ConnectVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectVMResponse)
	err := c.cc.Invoke(ctx, VMService_ConnectVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ResizeVM(ctx context.Context, in *ResizeVMRequest, opts ...grpc.CallOption) (*ResizeVMResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResizeVMResponse)
	err := c.cc.Invoke(ctx, VMService_ResizeVM_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListVMDisks(ctx context.Context, in *ListVMDisksRequest, opts ...grpc.CallOption) (*ListVMDisksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMDisksResponse)
	err := c.cc.Invoke(ctx, VMService_ListVMDisks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListPublicVMImages(ctx context.Context, in *ListPublicVMImagesRequest, opts ...grpc.CallOption) (*ListPublicVMImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPublicVMImagesResponse)
	err := c.cc.Invoke(ctx, VMService_ListPublicVMImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListVMMachineTypes(ctx context.Context, in *ListVMMachineTypesRequest, opts ...grpc.CallOption) (*ListVMMachineTypesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMMachineTypesResponse)
	err := c.cc.Invoke(ctx, VMService_ListVMMachineTypes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListVMMachineTypes2(ctx context.Context, in *ListVMMachineTypes2Request, opts ...grpc.CallOption) (*ListVMMachineTypes2Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMMachineTypes2Response)
	err := c.cc.Invoke(ctx, VMService_ListVMMachineTypes2_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListVMDataCenters(ctx context.Context, in *ListVMDataCentersRequest, opts ...grpc.CallOption) (*ListVMDataCentersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMDataCentersResponse)
	err := c.cc.Invoke(ctx, VMService_ListVMDataCenters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListVMGpuModels(ctx context.Context, in *ListVMGpuModelsRequest, opts ...grpc.CallOption) (*ListVMGpuModelsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVMGpuModelsResponse)
	err := c.cc.Invoke(ctx, VMService_ListVMGpuModels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) CreatePrivateVMImage(ctx context.Context, in *CreatePrivateVMImageRequest, opts ...grpc.CallOption) (*CreatePrivateVMImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePrivateVMImageResponse)
	err := c.cc.Invoke(ctx, VMService_CreatePrivateVMImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) DeletePrivateVMImage(ctx context.Context, in *DeletePrivateVMImageRequest, opts ...grpc.CallOption) (*DeletePrivateVMImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeletePrivateVMImageResponse)
	err := c.cc.Invoke(ctx, VMService_DeletePrivateVMImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) GetPrivateVMImage(ctx context.Context, in *GetPrivateVMImageRequest, opts ...grpc.CallOption) (*GetPrivateVMImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrivateVMImageResponse)
	err := c.cc.Invoke(ctx, VMService_GetPrivateVMImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListPrivateVMImages(ctx context.Context, in *ListPrivateVMImagesRequest, opts ...grpc.CallOption) (*ListPrivateVMImagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPrivateVMImagesResponse)
	err := c.cc.Invoke(ctx, VMService_ListPrivateVMImages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) UpdatePrivateVMImage(ctx context.Context, in *UpdatePrivateVMImageRequest, opts ...grpc.CallOption) (*UpdatePrivateVMImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePrivateVMImageResponse)
	err := c.cc.Invoke(ctx, VMService_UpdatePrivateVMImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) CreateStorageDisk(ctx context.Context, in *CreateStorageDiskRequest, opts ...grpc.CallOption) (*CreateStorageDiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStorageDiskResponse)
	err := c.cc.Invoke(ctx, VMService_CreateStorageDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ResizeVMDisk(ctx context.Context, in *ResizeVMDiskRequest, opts ...grpc.CallOption) (*ResizeVMDiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResizeVMDiskResponse)
	err := c.cc.Invoke(ctx, VMService_ResizeVMDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListDisks(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDisksResponse)
	err := c.cc.Invoke(ctx, VMService_ListDisks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) GetDisk(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*GetDiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDiskResponse)
	err := c.cc.Invoke(ctx, VMService_GetDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) DeleteStorageDisk(ctx context.Context, in *DeleteStorageDiskRequest, opts ...grpc.CallOption) (*DeleteStorageDiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStorageDiskResponse)
	err := c.cc.Invoke(ctx, VMService_DeleteStorageDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) AttachStorageDisk(ctx context.Context, in *AttachStorageDiskRequest, opts ...grpc.CallOption) (*AttachStorageDiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachStorageDiskResponse)
	err := c.cc.Invoke(ctx, VMService_AttachStorageDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) DetachStorageDisk(ctx context.Context, in *DetachStorageDiskRequest, opts ...grpc.CallOption) (*DetachStorageDiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetachStorageDiskResponse)
	err := c.cc.Invoke(ctx, VMService_DetachStorageDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) CreateDiskSnapshot(ctx context.Context, in *CreateDiskSnapshotRequest, opts ...grpc.CallOption) (*CreateDiskSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDiskSnapshotResponse)
	err := c.cc.Invoke(ctx, VMService_CreateDiskSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) ListDiskSnapshots(ctx context.Context, in *ListDiskSnapshotsRequest, opts ...grpc.CallOption) (*ListDiskSnapshotsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDiskSnapshotsResponse)
	err := c.cc.Invoke(ctx, VMService_ListDiskSnapshots_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) DeleteDiskSnapshot(ctx context.Context, in *DeleteDiskSnapshotRequest, opts ...grpc.CallOption) (*DeleteDiskSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDiskSnapshotResponse)
	err := c.cc.Invoke(ctx, VMService_DeleteDiskSnapshot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) RevertDisk(ctx context.Context, in *RevertDiskRequest, opts ...grpc.CallOption) (*RevertDiskResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RevertDiskResponse)
	err := c.cc.Invoke(ctx, VMService_RevertDisk_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) AttachSecurityGroup(ctx context.Context, in *AttachSecurityGroupRequest, opts ...grpc.CallOption) (*AttachSecurityGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AttachSecurityGroupResponse)
	err := c.cc.Invoke(ctx, VMService_AttachSecurityGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) DetachSecurityGroup(ctx context.Context, in *DetachSecurityGroupRequest, opts ...grpc.CallOption) (*DetachSecurityGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DetachSecurityGroupResponse)
	err := c.cc.Invoke(ctx, VMService_DetachSecurityGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) UpdateVMMetadata(ctx context.Context, in *UpdateVMMetadataRequest, opts ...grpc.CallOption) (*UpdateVMMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVMMetadataResponse)
	err := c.cc.Invoke(ctx, VMService_UpdateVMMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) UpdateVMExpireTime(ctx context.Context, in *UpdateVMExpireTimeRequest, opts ...grpc.CallOption) (*UpdateVMExpireTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVMExpireTimeResponse)
	err := c.cc.Invoke(ctx, VMService_UpdateVMExpireTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vMServiceClient) UpdateVMPassword(ctx context.Context, in *UpdateVMPasswordRequest, opts ...grpc.CallOption) (*UpdateVMPasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVMPasswordResponse)
	err := c.cc.Invoke(ctx, VMService_UpdateVMPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VMServiceServer is the server API for VMService service.
// All implementations must embed UnimplementedVMServiceServer
// for forward compatibility.
type VMServiceServer interface {
	CountVMs(context.Context, *CountVMsRequest) (*CountVMsResponse, error)
	CreateVM(context.Context, *CreateVMRequest) (*CreateVMResponse, error)
	GetVM(context.Context, *GetVMRequest) (*GetVMResponse, error)
	ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error)
	MonitorVM(context.Context, *MonitorVMRequest) (*MonitorVMResponse, error)
	RebootVM(context.Context, *RebootVMRequest) (*RebootVMResponse, error)
	StartVM(context.Context, *StartVMRequest) (*StartVMResponse, error)
	StopVM(context.Context, *StopVMRequest) (*StopVMResponse, error)
	TerminateVM(context.Context, *TerminateVMRequest) (*TerminateVMResponse, error)
	ConnectVM(context.Context, *ConnectVMRequest) (*ConnectVMResponse, error)
	ResizeVM(context.Context, *ResizeVMRequest) (*ResizeVMResponse, error)
	ListVMDisks(context.Context, *ListVMDisksRequest) (*ListVMDisksResponse, error)
	ListPublicVMImages(context.Context, *ListPublicVMImagesRequest) (*ListPublicVMImagesResponse, error)
	ListVMMachineTypes(context.Context, *ListVMMachineTypesRequest) (*ListVMMachineTypesResponse, error)
	ListVMMachineTypes2(context.Context, *ListVMMachineTypes2Request) (*ListVMMachineTypes2Response, error)
	ListVMDataCenters(context.Context, *ListVMDataCentersRequest) (*ListVMDataCentersResponse, error)
	ListVMGpuModels(context.Context, *ListVMGpuModelsRequest) (*ListVMGpuModelsResponse, error)
	CreatePrivateVMImage(context.Context, *CreatePrivateVMImageRequest) (*CreatePrivateVMImageResponse, error)
	DeletePrivateVMImage(context.Context, *DeletePrivateVMImageRequest) (*DeletePrivateVMImageResponse, error)
	GetPrivateVMImage(context.Context, *GetPrivateVMImageRequest) (*GetPrivateVMImageResponse, error)
	ListPrivateVMImages(context.Context, *ListPrivateVMImagesRequest) (*ListPrivateVMImagesResponse, error)
	UpdatePrivateVMImage(context.Context, *UpdatePrivateVMImageRequest) (*UpdatePrivateVMImageResponse, error)
	CreateStorageDisk(context.Context, *CreateStorageDiskRequest) (*CreateStorageDiskResponse, error)
	ResizeVMDisk(context.Context, *ResizeVMDiskRequest) (*ResizeVMDiskResponse, error)
	ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error)
	GetDisk(context.Context, *GetDiskRequest) (*GetDiskResponse, error)
	DeleteStorageDisk(context.Context, *DeleteStorageDiskRequest) (*DeleteStorageDiskResponse, error)
	AttachStorageDisk(context.Context, *AttachStorageDiskRequest) (*AttachStorageDiskResponse, error)
	DetachStorageDisk(context.Context, *DetachStorageDiskRequest) (*DetachStorageDiskResponse, error)
	CreateDiskSnapshot(context.Context, *CreateDiskSnapshotRequest) (*CreateDiskSnapshotResponse, error)
	ListDiskSnapshots(context.Context, *ListDiskSnapshotsRequest) (*ListDiskSnapshotsResponse, error)
	DeleteDiskSnapshot(context.Context, *DeleteDiskSnapshotRequest) (*DeleteDiskSnapshotResponse, error)
	RevertDisk(context.Context, *RevertDiskRequest) (*RevertDiskResponse, error)
	AttachSecurityGroup(context.Context, *AttachSecurityGroupRequest) (*AttachSecurityGroupResponse, error)
	DetachSecurityGroup(context.Context, *DetachSecurityGroupRequest) (*DetachSecurityGroupResponse, error)
	UpdateVMMetadata(context.Context, *UpdateVMMetadataRequest) (*UpdateVMMetadataResponse, error)
	UpdateVMExpireTime(context.Context, *UpdateVMExpireTimeRequest) (*UpdateVMExpireTimeResponse, error)
	UpdateVMPassword(context.Context, *UpdateVMPasswordRequest) (*UpdateVMPasswordResponse, error)
	mustEmbedUnimplementedVMServiceServer()
}

// UnimplementedVMServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVMServiceServer struct{}

func (UnimplementedVMServiceServer) CountVMs(context.Context, *CountVMsRequest) (*CountVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountVMs not implemented")
}
func (UnimplementedVMServiceServer) CreateVM(context.Context, *CreateVMRequest) (*CreateVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVM not implemented")
}
func (UnimplementedVMServiceServer) GetVM(context.Context, *GetVMRequest) (*GetVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVM not implemented")
}
func (UnimplementedVMServiceServer) ListVMs(context.Context, *ListVMsRequest) (*ListVMsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMs not implemented")
}
func (UnimplementedVMServiceServer) MonitorVM(context.Context, *MonitorVMRequest) (*MonitorVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MonitorVM not implemented")
}
func (UnimplementedVMServiceServer) RebootVM(context.Context, *RebootVMRequest) (*RebootVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebootVM not implemented")
}
func (UnimplementedVMServiceServer) StartVM(context.Context, *StartVMRequest) (*StartVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartVM not implemented")
}
func (UnimplementedVMServiceServer) StopVM(context.Context, *StopVMRequest) (*StopVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopVM not implemented")
}
func (UnimplementedVMServiceServer) TerminateVM(context.Context, *TerminateVMRequest) (*TerminateVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateVM not implemented")
}
func (UnimplementedVMServiceServer) ConnectVM(context.Context, *ConnectVMRequest) (*ConnectVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectVM not implemented")
}
func (UnimplementedVMServiceServer) ResizeVM(context.Context, *ResizeVMRequest) (*ResizeVMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeVM not implemented")
}
func (UnimplementedVMServiceServer) ListVMDisks(context.Context, *ListVMDisksRequest) (*ListVMDisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMDisks not implemented")
}
func (UnimplementedVMServiceServer) ListPublicVMImages(context.Context, *ListPublicVMImagesRequest) (*ListPublicVMImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPublicVMImages not implemented")
}
func (UnimplementedVMServiceServer) ListVMMachineTypes(context.Context, *ListVMMachineTypesRequest) (*ListVMMachineTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMMachineTypes not implemented")
}
func (UnimplementedVMServiceServer) ListVMMachineTypes2(context.Context, *ListVMMachineTypes2Request) (*ListVMMachineTypes2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMMachineTypes2 not implemented")
}
func (UnimplementedVMServiceServer) ListVMDataCenters(context.Context, *ListVMDataCentersRequest) (*ListVMDataCentersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMDataCenters not implemented")
}
func (UnimplementedVMServiceServer) ListVMGpuModels(context.Context, *ListVMGpuModelsRequest) (*ListVMGpuModelsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVMGpuModels not implemented")
}
func (UnimplementedVMServiceServer) CreatePrivateVMImage(context.Context, *CreatePrivateVMImageRequest) (*CreatePrivateVMImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivateVMImage not implemented")
}
func (UnimplementedVMServiceServer) DeletePrivateVMImage(context.Context, *DeletePrivateVMImageRequest) (*DeletePrivateVMImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePrivateVMImage not implemented")
}
func (UnimplementedVMServiceServer) GetPrivateVMImage(context.Context, *GetPrivateVMImageRequest) (*GetPrivateVMImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateVMImage not implemented")
}
func (UnimplementedVMServiceServer) ListPrivateVMImages(context.Context, *ListPrivateVMImagesRequest) (*ListPrivateVMImagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivateVMImages not implemented")
}
func (UnimplementedVMServiceServer) UpdatePrivateVMImage(context.Context, *UpdatePrivateVMImageRequest) (*UpdatePrivateVMImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePrivateVMImage not implemented")
}
func (UnimplementedVMServiceServer) CreateStorageDisk(context.Context, *CreateStorageDiskRequest) (*CreateStorageDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageDisk not implemented")
}
func (UnimplementedVMServiceServer) ResizeVMDisk(context.Context, *ResizeVMDiskRequest) (*ResizeVMDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResizeVMDisk not implemented")
}
func (UnimplementedVMServiceServer) ListDisks(context.Context, *ListDisksRequest) (*ListDisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDisks not implemented")
}
func (UnimplementedVMServiceServer) GetDisk(context.Context, *GetDiskRequest) (*GetDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDisk not implemented")
}
func (UnimplementedVMServiceServer) DeleteStorageDisk(context.Context, *DeleteStorageDiskRequest) (*DeleteStorageDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageDisk not implemented")
}
func (UnimplementedVMServiceServer) AttachStorageDisk(context.Context, *AttachStorageDiskRequest) (*AttachStorageDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachStorageDisk not implemented")
}
func (UnimplementedVMServiceServer) DetachStorageDisk(context.Context, *DetachStorageDiskRequest) (*DetachStorageDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachStorageDisk not implemented")
}
func (UnimplementedVMServiceServer) CreateDiskSnapshot(context.Context, *CreateDiskSnapshotRequest) (*CreateDiskSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDiskSnapshot not implemented")
}
func (UnimplementedVMServiceServer) ListDiskSnapshots(context.Context, *ListDiskSnapshotsRequest) (*ListDiskSnapshotsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDiskSnapshots not implemented")
}
func (UnimplementedVMServiceServer) DeleteDiskSnapshot(context.Context, *DeleteDiskSnapshotRequest) (*DeleteDiskSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDiskSnapshot not implemented")
}
func (UnimplementedVMServiceServer) RevertDisk(context.Context, *RevertDiskRequest) (*RevertDiskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevertDisk not implemented")
}
func (UnimplementedVMServiceServer) AttachSecurityGroup(context.Context, *AttachSecurityGroupRequest) (*AttachSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AttachSecurityGroup not implemented")
}
func (UnimplementedVMServiceServer) DetachSecurityGroup(context.Context, *DetachSecurityGroupRequest) (*DetachSecurityGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetachSecurityGroup not implemented")
}
func (UnimplementedVMServiceServer) UpdateVMMetadata(context.Context, *UpdateVMMetadataRequest) (*UpdateVMMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMMetadata not implemented")
}
func (UnimplementedVMServiceServer) UpdateVMExpireTime(context.Context, *UpdateVMExpireTimeRequest) (*UpdateVMExpireTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMExpireTime not implemented")
}
func (UnimplementedVMServiceServer) UpdateVMPassword(context.Context, *UpdateVMPasswordRequest) (*UpdateVMPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVMPassword not implemented")
}
func (UnimplementedVMServiceServer) mustEmbedUnimplementedVMServiceServer() {}
func (UnimplementedVMServiceServer) testEmbeddedByValue()                   {}

// UnsafeVMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VMServiceServer will
// result in compilation errors.
type UnsafeVMServiceServer interface {
	mustEmbedUnimplementedVMServiceServer()
}

func RegisterVMServiceServer(s grpc.ServiceRegistrar, srv VMServiceServer) {
	// If the following call pancis, it indicates UnimplementedVMServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VMService_ServiceDesc, srv)
}

func _VMService_CountVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).CountVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_CountVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).CountVMs(ctx, req.(*CountVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_CreateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).CreateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_CreateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).CreateVM(ctx, req.(*CreateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_GetVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).GetVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_GetVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).GetVM(ctx, req.(*GetVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListVMs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListVMs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListVMs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListVMs(ctx, req.(*ListVMsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_MonitorVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MonitorVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).MonitorVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_MonitorVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).MonitorVM(ctx, req.(*MonitorVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_RebootVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RebootVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).RebootVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_RebootVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).RebootVM(ctx, req.(*RebootVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_StartVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).StartVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_StartVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).StartVM(ctx, req.(*StartVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_StopVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).StopVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_StopVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).StopVM(ctx, req.(*StopVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_TerminateVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).TerminateVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_TerminateVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).TerminateVM(ctx, req.(*TerminateVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ConnectVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ConnectVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ConnectVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ConnectVM(ctx, req.(*ConnectVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ResizeVM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeVMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ResizeVM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ResizeVM_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ResizeVM(ctx, req.(*ResizeVMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListVMDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListVMDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListVMDisks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListVMDisks(ctx, req.(*ListVMDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListPublicVMImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPublicVMImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListPublicVMImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListPublicVMImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListPublicVMImages(ctx, req.(*ListPublicVMImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListVMMachineTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMMachineTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListVMMachineTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListVMMachineTypes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListVMMachineTypes(ctx, req.(*ListVMMachineTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListVMMachineTypes2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMMachineTypes2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListVMMachineTypes2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListVMMachineTypes2_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListVMMachineTypes2(ctx, req.(*ListVMMachineTypes2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListVMDataCenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMDataCentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListVMDataCenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListVMDataCenters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListVMDataCenters(ctx, req.(*ListVMDataCentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListVMGpuModels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVMGpuModelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListVMGpuModels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListVMGpuModels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListVMGpuModels(ctx, req.(*ListVMGpuModelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_CreatePrivateVMImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivateVMImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).CreatePrivateVMImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_CreatePrivateVMImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).CreatePrivateVMImage(ctx, req.(*CreatePrivateVMImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_DeletePrivateVMImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePrivateVMImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).DeletePrivateVMImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_DeletePrivateVMImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).DeletePrivateVMImage(ctx, req.(*DeletePrivateVMImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_GetPrivateVMImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrivateVMImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).GetPrivateVMImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_GetPrivateVMImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).GetPrivateVMImage(ctx, req.(*GetPrivateVMImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListPrivateVMImages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrivateVMImagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListPrivateVMImages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListPrivateVMImages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListPrivateVMImages(ctx, req.(*ListPrivateVMImagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_UpdatePrivateVMImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePrivateVMImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).UpdatePrivateVMImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_UpdatePrivateVMImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).UpdatePrivateVMImage(ctx, req.(*UpdatePrivateVMImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_CreateStorageDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorageDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).CreateStorageDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_CreateStorageDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).CreateStorageDisk(ctx, req.(*CreateStorageDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ResizeVMDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResizeVMDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ResizeVMDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ResizeVMDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ResizeVMDisk(ctx, req.(*ResizeVMDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListDisks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListDisks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListDisks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListDisks(ctx, req.(*ListDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_GetDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).GetDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_GetDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).GetDisk(ctx, req.(*GetDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_DeleteStorageDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).DeleteStorageDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_DeleteStorageDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).DeleteStorageDisk(ctx, req.(*DeleteStorageDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_AttachStorageDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachStorageDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).AttachStorageDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_AttachStorageDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).AttachStorageDisk(ctx, req.(*AttachStorageDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_DetachStorageDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachStorageDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).DetachStorageDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_DetachStorageDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).DetachStorageDisk(ctx, req.(*DetachStorageDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_CreateDiskSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiskSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).CreateDiskSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_CreateDiskSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).CreateDiskSnapshot(ctx, req.(*CreateDiskSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_ListDiskSnapshots_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDiskSnapshotsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).ListDiskSnapshots(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_ListDiskSnapshots_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).ListDiskSnapshots(ctx, req.(*ListDiskSnapshotsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_DeleteDiskSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiskSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).DeleteDiskSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_DeleteDiskSnapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).DeleteDiskSnapshot(ctx, req.(*DeleteDiskSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_RevertDisk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevertDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).RevertDisk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_RevertDisk_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).RevertDisk(ctx, req.(*RevertDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_AttachSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttachSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).AttachSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_AttachSecurityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).AttachSecurityGroup(ctx, req.(*AttachSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_DetachSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetachSecurityGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).DetachSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_DetachSecurityGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).DetachSecurityGroup(ctx, req.(*DetachSecurityGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_UpdateVMMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).UpdateVMMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_UpdateVMMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).UpdateVMMetadata(ctx, req.(*UpdateVMMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_UpdateVMExpireTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMExpireTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).UpdateVMExpireTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_UpdateVMExpireTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).UpdateVMExpireTime(ctx, req.(*UpdateVMExpireTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VMService_UpdateVMPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVMPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VMServiceServer).UpdateVMPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VMService_UpdateVMPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VMServiceServer).UpdateVMPassword(ctx, req.(*UpdateVMPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VMService_ServiceDesc is the grpc.ServiceDesc for VMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.cudo.compute.v1.VMService",
	HandlerType: (*VMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CountVMs",
			Handler:    _VMService_CountVMs_Handler,
		},
		{
			MethodName: "CreateVM",
			Handler:    _VMService_CreateVM_Handler,
		},
		{
			MethodName: "GetVM",
			Handler:    _VMService_GetVM_Handler,
		},
		{
			MethodName: "ListVMs",
			Handler:    _VMService_ListVMs_Handler,
		},
		{
			MethodName: "MonitorVM",
			Handler:    _VMService_MonitorVM_Handler,
		},
		{
			MethodName: "RebootVM",
			Handler:    _VMService_RebootVM_Handler,
		},
		{
			MethodName: "StartVM",
			Handler:    _VMService_StartVM_Handler,
		},
		{
			MethodName: "StopVM",
			Handler:    _VMService_StopVM_Handler,
		},
		{
			MethodName: "TerminateVM",
			Handler:    _VMService_TerminateVM_Handler,
		},
		{
			MethodName: "ConnectVM",
			Handler:    _VMService_ConnectVM_Handler,
		},
		{
			MethodName: "ResizeVM",
			Handler:    _VMService_ResizeVM_Handler,
		},
		{
			MethodName: "ListVMDisks",
			Handler:    _VMService_ListVMDisks_Handler,
		},
		{
			MethodName: "ListPublicVMImages",
			Handler:    _VMService_ListPublicVMImages_Handler,
		},
		{
			MethodName: "ListVMMachineTypes",
			Handler:    _VMService_ListVMMachineTypes_Handler,
		},
		{
			MethodName: "ListVMMachineTypes2",
			Handler:    _VMService_ListVMMachineTypes2_Handler,
		},
		{
			MethodName: "ListVMDataCenters",
			Handler:    _VMService_ListVMDataCenters_Handler,
		},
		{
			MethodName: "ListVMGpuModels",
			Handler:    _VMService_ListVMGpuModels_Handler,
		},
		{
			MethodName: "CreatePrivateVMImage",
			Handler:    _VMService_CreatePrivateVMImage_Handler,
		},
		{
			MethodName: "DeletePrivateVMImage",
			Handler:    _VMService_DeletePrivateVMImage_Handler,
		},
		{
			MethodName: "GetPrivateVMImage",
			Handler:    _VMService_GetPrivateVMImage_Handler,
		},
		{
			MethodName: "ListPrivateVMImages",
			Handler:    _VMService_ListPrivateVMImages_Handler,
		},
		{
			MethodName: "UpdatePrivateVMImage",
			Handler:    _VMService_UpdatePrivateVMImage_Handler,
		},
		{
			MethodName: "CreateStorageDisk",
			Handler:    _VMService_CreateStorageDisk_Handler,
		},
		{
			MethodName: "ResizeVMDisk",
			Handler:    _VMService_ResizeVMDisk_Handler,
		},
		{
			MethodName: "ListDisks",
			Handler:    _VMService_ListDisks_Handler,
		},
		{
			MethodName: "GetDisk",
			Handler:    _VMService_GetDisk_Handler,
		},
		{
			MethodName: "DeleteStorageDisk",
			Handler:    _VMService_DeleteStorageDisk_Handler,
		},
		{
			MethodName: "AttachStorageDisk",
			Handler:    _VMService_AttachStorageDisk_Handler,
		},
		{
			MethodName: "DetachStorageDisk",
			Handler:    _VMService_DetachStorageDisk_Handler,
		},
		{
			MethodName: "CreateDiskSnapshot",
			Handler:    _VMService_CreateDiskSnapshot_Handler,
		},
		{
			MethodName: "ListDiskSnapshots",
			Handler:    _VMService_ListDiskSnapshots_Handler,
		},
		{
			MethodName: "DeleteDiskSnapshot",
			Handler:    _VMService_DeleteDiskSnapshot_Handler,
		},
		{
			MethodName: "RevertDisk",
			Handler:    _VMService_RevertDisk_Handler,
		},
		{
			MethodName: "AttachSecurityGroup",
			Handler:    _VMService_AttachSecurityGroup_Handler,
		},
		{
			MethodName: "DetachSecurityGroup",
			Handler:    _VMService_DetachSecurityGroup_Handler,
		},
		{
			MethodName: "UpdateVMMetadata",
			Handler:    _VMService_UpdateVMMetadata_Handler,
		},
		{
			MethodName: "UpdateVMExpireTime",
			Handler:    _VMService_UpdateVMExpireTime_Handler,
		},
		{
			MethodName: "UpdateVMPassword",
			Handler:    _VMService_UpdateVMPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "svc/compute/vm/vm.proto",
}
