// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: svc/compute/vm/vm.proto

package vm

import (
	_ "github.com/google/gnostic/openapiv3"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	decimal "google.golang.org/genproto/googleapis/type/decimal"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateVMRequest_SshKeySource int32

const (
	CreateVMRequest_SSH_KEY_SOURCE_UNKNOWN CreateVMRequest_SshKeySource = 0
	CreateVMRequest_SSH_KEY_SOURCE_PROJECT CreateVMRequest_SshKeySource = 1
	CreateVMRequest_SSH_KEY_SOURCE_USER    CreateVMRequest_SshKeySource = 2
	CreateVMRequest_SSH_KEY_SOURCE_NONE    CreateVMRequest_SshKeySource = 3
)

// Enum value maps for CreateVMRequest_SshKeySource.
var (
	CreateVMRequest_SshKeySource_name = map[int32]string{
		0: "SSH_KEY_SOURCE_UNKNOWN",
		1: "SSH_KEY_SOURCE_PROJECT",
		2: "SSH_KEY_SOURCE_USER",
		3: "SSH_KEY_SOURCE_NONE",
	}
	CreateVMRequest_SshKeySource_value = map[string]int32{
		"SSH_KEY_SOURCE_UNKNOWN": 0,
		"SSH_KEY_SOURCE_PROJECT": 1,
		"SSH_KEY_SOURCE_USER":    2,
		"SSH_KEY_SOURCE_NONE":    3,
	}
)

func (x CreateVMRequest_SshKeySource) Enum() *CreateVMRequest_SshKeySource {
	p := new(CreateVMRequest_SshKeySource)
	*p = x
	return p
}

func (x CreateVMRequest_SshKeySource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateVMRequest_SshKeySource) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_proto_enumTypes[0].Descriptor()
}

func (CreateVMRequest_SshKeySource) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_proto_enumTypes[0]
}

func (x CreateVMRequest_SshKeySource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateVMRequest_SshKeySource.Descriptor instead.
func (CreateVMRequest_SshKeySource) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{0, 0}
}

type ListVMDataCentersResponse_VMDataCenter_StorageClass int32

const (
	ListVMDataCentersResponse_VMDataCenter_STORAGE_CLASS_UNKNOWN ListVMDataCentersResponse_VMDataCenter_StorageClass = 0
	ListVMDataCentersResponse_VMDataCenter_STORAGE_CLASS_LOCAL   ListVMDataCentersResponse_VMDataCenter_StorageClass = 1
	ListVMDataCentersResponse_VMDataCenter_STORAGE_CLASS_NETWORK ListVMDataCentersResponse_VMDataCenter_StorageClass = 2
)

// Enum value maps for ListVMDataCentersResponse_VMDataCenter_StorageClass.
var (
	ListVMDataCentersResponse_VMDataCenter_StorageClass_name = map[int32]string{
		0: "STORAGE_CLASS_UNKNOWN",
		1: "STORAGE_CLASS_LOCAL",
		2: "STORAGE_CLASS_NETWORK",
	}
	ListVMDataCentersResponse_VMDataCenter_StorageClass_value = map[string]int32{
		"STORAGE_CLASS_UNKNOWN": 0,
		"STORAGE_CLASS_LOCAL":   1,
		"STORAGE_CLASS_NETWORK": 2,
	}
)

func (x ListVMDataCentersResponse_VMDataCenter_StorageClass) Enum() *ListVMDataCentersResponse_VMDataCenter_StorageClass {
	p := new(ListVMDataCentersResponse_VMDataCenter_StorageClass)
	*p = x
	return p
}

func (x ListVMDataCentersResponse_VMDataCenter_StorageClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListVMDataCentersResponse_VMDataCenter_StorageClass) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_proto_enumTypes[1].Descriptor()
}

func (ListVMDataCentersResponse_VMDataCenter_StorageClass) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_proto_enumTypes[1]
}

func (x ListVMDataCentersResponse_VMDataCenter_StorageClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListVMDataCentersResponse_VMDataCenter_StorageClass.Descriptor instead.
func (ListVMDataCentersResponse_VMDataCenter_StorageClass) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{37, 0, 0}
}

type ListVMDataCentersResponse_VMDataCenter_VRouterSize int32

const (
	ListVMDataCentersResponse_VMDataCenter_VROUTER_INSTANCE_UNKNOWN ListVMDataCentersResponse_VMDataCenter_VRouterSize = 0
	ListVMDataCentersResponse_VMDataCenter_VROUTER_INSTANCE_SMALL   ListVMDataCentersResponse_VMDataCenter_VRouterSize = 1
	ListVMDataCentersResponse_VMDataCenter_VROUTER_INSTANCE_MEDIUM  ListVMDataCentersResponse_VMDataCenter_VRouterSize = 2
	ListVMDataCentersResponse_VMDataCenter_VROUTER_INSTANCE_LARGE   ListVMDataCentersResponse_VMDataCenter_VRouterSize = 3
)

// Enum value maps for ListVMDataCentersResponse_VMDataCenter_VRouterSize.
var (
	ListVMDataCentersResponse_VMDataCenter_VRouterSize_name = map[int32]string{
		0: "VROUTER_INSTANCE_UNKNOWN",
		1: "VROUTER_INSTANCE_SMALL",
		2: "VROUTER_INSTANCE_MEDIUM",
		3: "VROUTER_INSTANCE_LARGE",
	}
	ListVMDataCentersResponse_VMDataCenter_VRouterSize_value = map[string]int32{
		"VROUTER_INSTANCE_UNKNOWN": 0,
		"VROUTER_INSTANCE_SMALL":   1,
		"VROUTER_INSTANCE_MEDIUM":  2,
		"VROUTER_INSTANCE_LARGE":   3,
	}
)

func (x ListVMDataCentersResponse_VMDataCenter_VRouterSize) Enum() *ListVMDataCentersResponse_VMDataCenter_VRouterSize {
	p := new(ListVMDataCentersResponse_VMDataCenter_VRouterSize)
	*p = x
	return p
}

func (x ListVMDataCentersResponse_VMDataCenter_VRouterSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListVMDataCentersResponse_VMDataCenter_VRouterSize) Descriptor() protoreflect.EnumDescriptor {
	return file_svc_compute_vm_vm_proto_enumTypes[2].Descriptor()
}

func (ListVMDataCentersResponse_VMDataCenter_VRouterSize) Type() protoreflect.EnumType {
	return &file_svc_compute_vm_vm_proto_enumTypes[2]
}

func (x ListVMDataCentersResponse_VMDataCenter_VRouterSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListVMDataCentersResponse_VMDataCenter_VRouterSize.Descriptor instead.
func (ListVMDataCentersResponse_VMDataCenter_VRouterSize) EnumDescriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{37, 0, 1}
}

type CreateVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterId    string                       `protobuf:"bytes,1,opt,name=data_center_id,json=dataCenterId,proto3" json:"data_center_id,omitempty"`
	MachineType     string                       `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	ProjectId       string                       `protobuf:"bytes,3,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	VmId            string                       `protobuf:"bytes,4,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	StartScript     string                       `protobuf:"bytes,5,opt,name=start_script,json=startScript,proto3" json:"start_script,omitempty"`
	SshKeySource    CreateVMRequest_SshKeySource `protobuf:"varint,6,opt,name=ssh_key_source,json=sshKeySource,proto3,enum=org.cudo.compute.v1.CreateVMRequest_SshKeySource" json:"ssh_key_source,omitempty"`
	CustomSshKeys   []string                     `protobuf:"bytes,7,rep,name=custom_ssh_keys,json=customSshKeys,proto3" json:"custom_ssh_keys,omitempty"`
	Password        string                       `protobuf:"bytes,8,opt,name=password,proto3" json:"password,omitempty"`
	BootDisk        *Disk                        `protobuf:"bytes,9,opt,name=boot_disk,json=bootDisk,proto3" json:"boot_disk,omitempty"`
	BootDiskImageId string                       `protobuf:"bytes,10,opt,name=boot_disk_image_id,json=bootDiskImageId,proto3" json:"boot_disk_image_id,omitempty"`
	Vcpus           int32                        `protobuf:"varint,12,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	MemoryGib       int32                        `protobuf:"varint,13,opt,name=memory_gib,json=memoryGib,proto3" json:"memory_gib,omitempty"`
	Gpus            int32                        `protobuf:"varint,15,opt,name=gpus,proto3" json:"gpus,omitempty"`
	CpuModel        string                       `protobuf:"bytes,16,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	GpuModel        string                       `protobuf:"bytes,17,opt,name=gpu_model,json=gpuModel,proto3" json:"gpu_model,omitempty"`
	GpuModelId      string                       `protobuf:"bytes,170,opt,name=gpu_model_id,json=gpuModelId,proto3" json:"gpu_model_id,omitempty"`
	Nics            []*CreateVMRequest_NIC       `protobuf:"bytes,19,rep,name=nics,proto3" json:"nics,omitempty"`
	// ignored if any nics are provided
	SecurityGroupIds []string                     `protobuf:"bytes,20,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
	StorageDiskIds   []string                     `protobuf:"bytes,21,rep,name=storage_disk_ids,json=storageDiskIds,proto3" json:"storage_disk_ids,omitempty"`
	Metadata         map[string]string            `protobuf:"bytes,22,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Topology         *CreateVMRequest_CpuTopology `protobuf:"bytes,23,opt,name=topology,proto3" json:"topology,omitempty"`
	ValidateOnly     bool                         `protobuf:"varint,24,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
	// Types that are assignable to Expiration:
	//
	//	*CreateVMRequest_ExpireTime
	//	*CreateVMRequest_Ttl
	Expiration     isCreateVMRequest_Expiration `protobuf_oneof:"expiration"`
	CommitmentTerm CommitmentTerm               `protobuf:"varint,27,opt,name=commitment_term,json=commitmentTerm,proto3,enum=org.cudo.compute.v1.CommitmentTerm" json:"commitment_term,omitempty"`
}

func (x *CreateVMRequest) Reset() {
	*x = CreateVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest) ProtoMessage() {}

func (x *CreateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest.ProtoReflect.Descriptor instead.
func (*CreateVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVMRequest) GetDataCenterId() string {
	if x != nil {
		return x.DataCenterId
	}
	return ""
}

func (x *CreateVMRequest) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *CreateVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateVMRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *CreateVMRequest) GetStartScript() string {
	if x != nil {
		return x.StartScript
	}
	return ""
}

func (x *CreateVMRequest) GetSshKeySource() CreateVMRequest_SshKeySource {
	if x != nil {
		return x.SshKeySource
	}
	return CreateVMRequest_SSH_KEY_SOURCE_UNKNOWN
}

func (x *CreateVMRequest) GetCustomSshKeys() []string {
	if x != nil {
		return x.CustomSshKeys
	}
	return nil
}

func (x *CreateVMRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateVMRequest) GetBootDisk() *Disk {
	if x != nil {
		return x.BootDisk
	}
	return nil
}

func (x *CreateVMRequest) GetBootDiskImageId() string {
	if x != nil {
		return x.BootDiskImageId
	}
	return ""
}

func (x *CreateVMRequest) GetVcpus() int32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *CreateVMRequest) GetMemoryGib() int32 {
	if x != nil {
		return x.MemoryGib
	}
	return 0
}

func (x *CreateVMRequest) GetGpus() int32 {
	if x != nil {
		return x.Gpus
	}
	return 0
}

func (x *CreateVMRequest) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *CreateVMRequest) GetGpuModel() string {
	if x != nil {
		return x.GpuModel
	}
	return ""
}

func (x *CreateVMRequest) GetGpuModelId() string {
	if x != nil {
		return x.GpuModelId
	}
	return ""
}

func (x *CreateVMRequest) GetNics() []*CreateVMRequest_NIC {
	if x != nil {
		return x.Nics
	}
	return nil
}

func (x *CreateVMRequest) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

func (x *CreateVMRequest) GetStorageDiskIds() []string {
	if x != nil {
		return x.StorageDiskIds
	}
	return nil
}

func (x *CreateVMRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateVMRequest) GetTopology() *CreateVMRequest_CpuTopology {
	if x != nil {
		return x.Topology
	}
	return nil
}

func (x *CreateVMRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

func (m *CreateVMRequest) GetExpiration() isCreateVMRequest_Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (x *CreateVMRequest) GetExpireTime() *timestamppb.Timestamp {
	if x, ok := x.GetExpiration().(*CreateVMRequest_ExpireTime); ok {
		return x.ExpireTime
	}
	return nil
}

func (x *CreateVMRequest) GetTtl() *durationpb.Duration {
	if x, ok := x.GetExpiration().(*CreateVMRequest_Ttl); ok {
		return x.Ttl
	}
	return nil
}

func (x *CreateVMRequest) GetCommitmentTerm() CommitmentTerm {
	if x != nil {
		return x.CommitmentTerm
	}
	return CommitmentTerm_COMMITMENT_TERM_NONE
}

type isCreateVMRequest_Expiration interface {
	isCreateVMRequest_Expiration()
}

type CreateVMRequest_ExpireTime struct {
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=expire_time,json=expireTime,proto3,oneof"`
}

type CreateVMRequest_Ttl struct {
	Ttl *durationpb.Duration `protobuf:"bytes,26,opt,name=ttl,proto3,oneof"`
}

func (*CreateVMRequest_ExpireTime) isCreateVMRequest_Expiration() {}

func (*CreateVMRequest_Ttl) isCreateVMRequest_Expiration() {}

type CreateVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Vm *VM    `protobuf:"bytes,2,opt,name=vm,proto3" json:"vm,omitempty"`
}

func (x *CreateVMResponse) Reset() {
	*x = CreateVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMResponse) ProtoMessage() {}

func (x *CreateVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMResponse.ProtoReflect.Descriptor instead.
func (*CreateVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{1}
}

func (x *CreateVMResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateVMResponse) GetVm() *VM {
	if x != nil {
		return x.Vm
	}
	return nil
}

type ListVMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	NetworkId string `protobuf:"bytes,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
}

func (x *ListVMsRequest) Reset() {
	*x = ListVMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMsRequest) ProtoMessage() {}

func (x *ListVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMsRequest.ProtoReflect.Descriptor instead.
func (*ListVMsRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{2}
}

func (x *ListVMsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListVMsRequest) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

type ListVMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VMs []*VM `protobuf:"bytes,1,rep,name=VMs,proto3" json:"VMs,omitempty"`
}

func (x *ListVMsResponse) Reset() {
	*x = ListVMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMsResponse) ProtoMessage() {}

func (x *ListVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMsResponse.ProtoReflect.Descriptor instead.
func (*ListVMsResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{3}
}

func (x *ListVMsResponse) GetVMs() []*VM {
	if x != nil {
		return x.VMs
	}
	return nil
}

type ResizeVMDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	DiskId    string `protobuf:"bytes,3,opt,name=disk_id,json=diskId,proto3" json:"disk_id,omitempty"`
	SizeGib   int32  `protobuf:"varint,4,opt,name=size_gib,json=sizeGib,proto3" json:"size_gib,omitempty"`
}

func (x *ResizeVMDiskRequest) Reset() {
	*x = ResizeVMDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeVMDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeVMDiskRequest) ProtoMessage() {}

func (x *ResizeVMDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeVMDiskRequest.ProtoReflect.Descriptor instead.
func (*ResizeVMDiskRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{4}
}

func (x *ResizeVMDiskRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ResizeVMDiskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResizeVMDiskRequest) GetDiskId() string {
	if x != nil {
		return x.DiskId
	}
	return ""
}

func (x *ResizeVMDiskRequest) GetSizeGib() int32 {
	if x != nil {
		return x.SizeGib
	}
	return 0
}

type ResizeVMDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResizeVMDiskResponse) Reset() {
	*x = ResizeVMDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeVMDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeVMDiskResponse) ProtoMessage() {}

func (x *ResizeVMDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeVMDiskResponse.ProtoReflect.Descriptor instead.
func (*ResizeVMDiskResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{5}
}

type ResizeVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Vcpus     uint32 `protobuf:"varint,3,opt,name=vcpus,proto3" json:"vcpus,omitempty"`
	MemoryGib uint32 `protobuf:"varint,4,opt,name=memory_gib,json=memoryGib,proto3" json:"memory_gib,omitempty"`
}

func (x *ResizeVMRequest) Reset() {
	*x = ResizeVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeVMRequest) ProtoMessage() {}

func (x *ResizeVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeVMRequest.ProtoReflect.Descriptor instead.
func (*ResizeVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{6}
}

func (x *ResizeVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ResizeVMRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ResizeVMRequest) GetVcpus() uint32 {
	if x != nil {
		return x.Vcpus
	}
	return 0
}

func (x *ResizeVMRequest) GetMemoryGib() uint32 {
	if x != nil {
		return x.MemoryGib
	}
	return 0
}

type ResizeVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vm *VM `protobuf:"bytes,1,opt,name=vm,proto3" json:"vm,omitempty"`
}

func (x *ResizeVMResponse) Reset() {
	*x = ResizeVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizeVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizeVMResponse) ProtoMessage() {}

func (x *ResizeVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizeVMResponse.ProtoReflect.Descriptor instead.
func (*ResizeVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{7}
}

func (x *ResizeVMResponse) GetVm() *VM {
	if x != nil {
		return x.Vm
	}
	return nil
}

type ListVMDisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListVMDisksRequest) Reset() {
	*x = ListVMDisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMDisksRequest) ProtoMessage() {}

func (x *ListVMDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMDisksRequest.ProtoReflect.Descriptor instead.
func (*ListVMDisksRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{8}
}

func (x *ListVMDisksRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListVMDisksRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListVMDisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks []*Disk `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
}

func (x *ListVMDisksResponse) Reset() {
	*x = ListVMDisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMDisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMDisksResponse) ProtoMessage() {}

func (x *ListVMDisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMDisksResponse.ProtoReflect.Descriptor instead.
func (*ListVMDisksResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{9}
}

func (x *ListVMDisksResponse) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

type AttachStorageDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	VmId      string `protobuf:"bytes,3,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
}

func (x *AttachStorageDiskRequest) Reset() {
	*x = AttachStorageDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachStorageDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachStorageDiskRequest) ProtoMessage() {}

func (x *AttachStorageDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachStorageDiskRequest.ProtoReflect.Descriptor instead.
func (*AttachStorageDiskRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{10}
}

func (x *AttachStorageDiskRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AttachStorageDiskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AttachStorageDiskRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type AttachStorageDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttachStorageDiskResponse) Reset() {
	*x = AttachStorageDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachStorageDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachStorageDiskResponse) ProtoMessage() {}

func (x *AttachStorageDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachStorageDiskResponse.ProtoReflect.Descriptor instead.
func (*AttachStorageDiskResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{11}
}

type DetachStorageDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DetachStorageDiskRequest) Reset() {
	*x = DetachStorageDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachStorageDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachStorageDiskRequest) ProtoMessage() {}

func (x *DetachStorageDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachStorageDiskRequest.ProtoReflect.Descriptor instead.
func (*DetachStorageDiskRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{12}
}

func (x *DetachStorageDiskRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DetachStorageDiskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DetachStorageDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DetachStorageDiskResponse) Reset() {
	*x = DetachStorageDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachStorageDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachStorageDiskResponse) ProtoMessage() {}

func (x *DetachStorageDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachStorageDiskResponse.ProtoReflect.Descriptor instead.
func (*DetachStorageDiskResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{13}
}

type StartVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StartVMRequest) Reset() {
	*x = StartVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMRequest) ProtoMessage() {}

func (x *StartVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMRequest.ProtoReflect.Descriptor instead.
func (*StartVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{14}
}

func (x *StartVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *StartVMRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StartVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StartVMResponse) Reset() {
	*x = StartVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVMResponse) ProtoMessage() {}

func (x *StartVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVMResponse.ProtoReflect.Descriptor instead.
func (*StartVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{15}
}

type StopVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *StopVMRequest) Reset() {
	*x = StopVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMRequest) ProtoMessage() {}

func (x *StopVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMRequest.ProtoReflect.Descriptor instead.
func (*StopVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{16}
}

func (x *StopVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *StopVMRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type StopVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopVMResponse) Reset() {
	*x = StopVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopVMResponse) ProtoMessage() {}

func (x *StopVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopVMResponse.ProtoReflect.Descriptor instead.
func (*StopVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{17}
}

type TerminateVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TerminateVMRequest) Reset() {
	*x = TerminateVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateVMRequest) ProtoMessage() {}

func (x *TerminateVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateVMRequest.ProtoReflect.Descriptor instead.
func (*TerminateVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{18}
}

func (x *TerminateVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *TerminateVMRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type TerminateVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TerminateVMResponse) Reset() {
	*x = TerminateVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerminateVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerminateVMResponse) ProtoMessage() {}

func (x *TerminateVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerminateVMResponse.ProtoReflect.Descriptor instead.
func (*TerminateVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{19}
}

type RebootVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RebootVMRequest) Reset() {
	*x = RebootVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootVMRequest) ProtoMessage() {}

func (x *RebootVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootVMRequest.ProtoReflect.Descriptor instead.
func (*RebootVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{20}
}

func (x *RebootVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RebootVMRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RebootVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RebootVMResponse) Reset() {
	*x = RebootVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebootVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebootVMResponse) ProtoMessage() {}

func (x *RebootVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebootVMResponse.ProtoReflect.Descriptor instead.
func (*RebootVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{21}
}

type GetVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetVMRequest) Reset() {
	*x = GetVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMRequest) ProtoMessage() {}

func (x *GetVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMRequest.ProtoReflect.Descriptor instead.
func (*GetVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{22}
}

func (x *GetVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetVMRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VM                  *VM              `protobuf:"bytes,1,opt,name=VM,proto3" json:"VM,omitempty"`
	VcpuPriceHr         *decimal.Decimal `protobuf:"bytes,2,opt,name=vcpu_price_hr,json=vcpuPriceHr,proto3" json:"vcpu_price_hr,omitempty"`
	TotalVcpuPriceHr    *decimal.Decimal `protobuf:"bytes,3,opt,name=total_vcpu_price_hr,json=totalVcpuPriceHr,proto3" json:"total_vcpu_price_hr,omitempty"`
	MemoryGibPriceHr    *decimal.Decimal `protobuf:"bytes,4,opt,name=memory_gib_price_hr,json=memoryGibPriceHr,proto3" json:"memory_gib_price_hr,omitempty"`
	TotalMemoryPriceHr  *decimal.Decimal `protobuf:"bytes,5,opt,name=total_memory_price_hr,json=totalMemoryPriceHr,proto3" json:"total_memory_price_hr,omitempty"`
	GpuPriceHr          *decimal.Decimal `protobuf:"bytes,6,opt,name=gpu_price_hr,json=gpuPriceHr,proto3" json:"gpu_price_hr,omitempty"`
	TotalGpuPriceHr     *decimal.Decimal `protobuf:"bytes,7,opt,name=total_gpu_price_hr,json=totalGpuPriceHr,proto3" json:"total_gpu_price_hr,omitempty"`
	StorageGibPriceHr   *decimal.Decimal `protobuf:"bytes,8,opt,name=storage_gib_price_hr,json=storageGibPriceHr,proto3" json:"storage_gib_price_hr,omitempty"`
	TotalStoragePriceHr *decimal.Decimal `protobuf:"bytes,9,opt,name=total_storage_price_hr,json=totalStoragePriceHr,proto3" json:"total_storage_price_hr,omitempty"`
	Ipv4PriceHr         *decimal.Decimal `protobuf:"bytes,10,opt,name=ipv4_price_hr,json=ipv4PriceHr,proto3" json:"ipv4_price_hr,omitempty"`
	TotalPriceHr        *decimal.Decimal `protobuf:"bytes,12,opt,name=total_price_hr,json=totalPriceHr,proto3" json:"total_price_hr,omitempty"`
}

func (x *GetVMResponse) Reset() {
	*x = GetVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVMResponse) ProtoMessage() {}

func (x *GetVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVMResponse.ProtoReflect.Descriptor instead.
func (*GetVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{23}
}

func (x *GetVMResponse) GetVM() *VM {
	if x != nil {
		return x.VM
	}
	return nil
}

func (x *GetVMResponse) GetVcpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.VcpuPriceHr
	}
	return nil
}

func (x *GetVMResponse) GetTotalVcpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalVcpuPriceHr
	}
	return nil
}

func (x *GetVMResponse) GetMemoryGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.MemoryGibPriceHr
	}
	return nil
}

func (x *GetVMResponse) GetTotalMemoryPriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalMemoryPriceHr
	}
	return nil
}

func (x *GetVMResponse) GetGpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.GpuPriceHr
	}
	return nil
}

func (x *GetVMResponse) GetTotalGpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalGpuPriceHr
	}
	return nil
}

func (x *GetVMResponse) GetStorageGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.StorageGibPriceHr
	}
	return nil
}

func (x *GetVMResponse) GetTotalStoragePriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalStoragePriceHr
	}
	return nil
}

func (x *GetVMResponse) GetIpv4PriceHr() *decimal.Decimal {
	if x != nil {
		return x.Ipv4PriceHr
	}
	return nil
}

func (x *GetVMResponse) GetTotalPriceHr() *decimal.Decimal {
	if x != nil {
		return x.TotalPriceHr
	}
	return nil
}

type CountVMsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
}

func (x *CountVMsRequest) Reset() {
	*x = CountVMsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountVMsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountVMsRequest) ProtoMessage() {}

func (x *CountVMsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountVMsRequest.ProtoReflect.Descriptor instead.
func (*CountVMsRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{24}
}

func (x *CountVMsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type CountVMsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountVMsResponse) Reset() {
	*x = CountVMsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountVMsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountVMsResponse) ProtoMessage() {}

func (x *CountVMsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountVMsResponse.ProtoReflect.Descriptor instead.
func (*CountVMsResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{25}
}

func (x *CountVMsResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MonitorVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *MonitorVMRequest) Reset() {
	*x = MonitorVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorVMRequest) ProtoMessage() {}

func (x *MonitorVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorVMRequest.ProtoReflect.Descriptor instead.
func (*MonitorVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{26}
}

func (x *MonitorVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *MonitorVMRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type MonitorVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*VMMonitoringItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *MonitorVMResponse) Reset() {
	*x = MonitorVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorVMResponse) ProtoMessage() {}

func (x *MonitorVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorVMResponse.ProtoReflect.Descriptor instead.
func (*MonitorVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{27}
}

func (x *MonitorVMResponse) GetItems() []*VMMonitoringItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ConnectVMRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	ConnectionId string `protobuf:"bytes,3,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
}

func (x *ConnectVMRequest) Reset() {
	*x = ConnectVMRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectVMRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectVMRequest) ProtoMessage() {}

func (x *ConnectVMRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectVMRequest.ProtoReflect.Descriptor instead.
func (*ConnectVMRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{28}
}

func (x *ConnectVMRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ConnectVMRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConnectVMRequest) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

type ConnectVMResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectUrl string `protobuf:"bytes,1,opt,name=connect_url,json=connectUrl,proto3" json:"connect_url,omitempty"`
	Token      string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *ConnectVMResponse) Reset() {
	*x = ConnectVMResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectVMResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectVMResponse) ProtoMessage() {}

func (x *ConnectVMResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectVMResponse.ProtoReflect.Descriptor instead.
func (*ConnectVMResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{29}
}

func (x *ConnectVMResponse) GetConnectUrl() string {
	if x != nil {
		return x.ConnectUrl
	}
	return ""
}

func (x *ConnectVMResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ListVMMachineTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListVMMachineTypesRequest) Reset() {
	*x = ListVMMachineTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMMachineTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMMachineTypesRequest) ProtoMessage() {}

func (x *ListVMMachineTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMMachineTypesRequest.ProtoReflect.Descriptor instead.
func (*ListVMMachineTypesRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{30}
}

type ListVMMachineTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineTypes []*ListVMMachineTypesResponse_VMMachineType `protobuf:"bytes,1,rep,name=machine_types,json=machineTypes,proto3" json:"machine_types,omitempty"`
}

func (x *ListVMMachineTypesResponse) Reset() {
	*x = ListVMMachineTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMMachineTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMMachineTypesResponse) ProtoMessage() {}

func (x *ListVMMachineTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMMachineTypesResponse.ProtoReflect.Descriptor instead.
func (*ListVMMachineTypesResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{31}
}

func (x *ListVMMachineTypesResponse) GetMachineTypes() []*ListVMMachineTypesResponse_VMMachineType {
	if x != nil {
		return x.MachineTypes
	}
	return nil
}

type ListVMMachineTypes2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListVMMachineTypes2Request) Reset() {
	*x = ListVMMachineTypes2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMMachineTypes2Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMMachineTypes2Request) ProtoMessage() {}

func (x *ListVMMachineTypes2Request) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMMachineTypes2Request.ProtoReflect.Descriptor instead.
func (*ListVMMachineTypes2Request) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{32}
}

type ListVMMachineTypes2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MachineTypes []*ListVMMachineTypes2Response_VMMachineType `protobuf:"bytes,1,rep,name=machine_types,json=machineTypes,proto3" json:"machine_types,omitempty"`
}

func (x *ListVMMachineTypes2Response) Reset() {
	*x = ListVMMachineTypes2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMMachineTypes2Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMMachineTypes2Response) ProtoMessage() {}

func (x *ListVMMachineTypes2Response) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMMachineTypes2Response.ProtoReflect.Descriptor instead.
func (*ListVMMachineTypes2Response) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{33}
}

func (x *ListVMMachineTypes2Response) GetMachineTypes() []*ListVMMachineTypes2Response_VMMachineType {
	if x != nil {
		return x.MachineTypes
	}
	return nil
}

type ListPublicVMImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListPublicVMImagesRequest) Reset() {
	*x = ListPublicVMImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicVMImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicVMImagesRequest) ProtoMessage() {}

func (x *ListPublicVMImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicVMImagesRequest.ProtoReflect.Descriptor instead.
func (*ListPublicVMImagesRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{34}
}

type ListPublicVMImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images []*ListPublicVMImagesResponse_Image `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
}

func (x *ListPublicVMImagesResponse) Reset() {
	*x = ListPublicVMImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicVMImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicVMImagesResponse) ProtoMessage() {}

func (x *ListPublicVMImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicVMImagesResponse.ProtoReflect.Descriptor instead.
func (*ListPublicVMImagesResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{35}
}

func (x *ListPublicVMImagesResponse) GetImages() []*ListPublicVMImagesResponse_Image {
	if x != nil {
		return x.Images
	}
	return nil
}

type ListVMDataCentersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RegionId        []string `protobuf:"bytes,1,rep,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	RenewableEnergy bool     `protobuf:"varint,2,opt,name=renewable_energy,json=renewableEnergy,proto3" json:"renewable_energy,omitempty"`
}

func (x *ListVMDataCentersRequest) Reset() {
	*x = ListVMDataCentersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMDataCentersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMDataCentersRequest) ProtoMessage() {}

func (x *ListVMDataCentersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMDataCentersRequest.ProtoReflect.Descriptor instead.
func (*ListVMDataCentersRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{36}
}

func (x *ListVMDataCentersRequest) GetRegionId() []string {
	if x != nil {
		return x.RegionId
	}
	return nil
}

func (x *ListVMDataCentersRequest) GetRenewableEnergy() bool {
	if x != nil {
		return x.RenewableEnergy
	}
	return false
}

type ListVMDataCentersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenters []*ListVMDataCentersResponse_VMDataCenter `protobuf:"bytes,1,rep,name=data_centers,json=dataCenters,proto3" json:"data_centers,omitempty"`
}

func (x *ListVMDataCentersResponse) Reset() {
	*x = ListVMDataCentersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMDataCentersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMDataCentersResponse) ProtoMessage() {}

func (x *ListVMDataCentersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMDataCentersResponse.ProtoReflect.Descriptor instead.
func (*ListVMDataCentersResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{37}
}

func (x *ListVMDataCentersResponse) GetDataCenters() []*ListVMDataCentersResponse_VMDataCenter {
	if x != nil {
		return x.DataCenters
	}
	return nil
}

type ListVMGpuModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListVMGpuModelsRequest) Reset() {
	*x = ListVMGpuModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMGpuModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMGpuModelsRequest) ProtoMessage() {}

func (x *ListVMGpuModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMGpuModelsRequest.ProtoReflect.Descriptor instead.
func (*ListVMGpuModelsRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{38}
}

type ListVMGpuModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GpuModels []*ListVMGpuModelsResponse_GpuModel `protobuf:"bytes,1,rep,name=gpu_models,json=gpuModels,proto3" json:"gpu_models,omitempty"`
}

func (x *ListVMGpuModelsResponse) Reset() {
	*x = ListVMGpuModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMGpuModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMGpuModelsResponse) ProtoMessage() {}

func (x *ListVMGpuModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMGpuModelsResponse.ProtoReflect.Descriptor instead.
func (*ListVMGpuModelsResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{39}
}

func (x *ListVMGpuModelsResponse) GetGpuModels() []*ListVMGpuModelsResponse_GpuModel {
	if x != nil {
		return x.GpuModels
	}
	return nil
}

type CreatePrivateVMImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	VmId        string `protobuf:"bytes,2,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
	Id          string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *CreatePrivateVMImageRequest) Reset() {
	*x = CreatePrivateVMImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrivateVMImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrivateVMImageRequest) ProtoMessage() {}

func (x *CreatePrivateVMImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrivateVMImageRequest.ProtoReflect.Descriptor instead.
func (*CreatePrivateVMImageRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{40}
}

func (x *CreatePrivateVMImageRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreatePrivateVMImageRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

func (x *CreatePrivateVMImageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreatePrivateVMImageRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreatePrivateVMImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *PrivateImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *CreatePrivateVMImageResponse) Reset() {
	*x = CreatePrivateVMImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePrivateVMImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePrivateVMImageResponse) ProtoMessage() {}

func (x *CreatePrivateVMImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePrivateVMImageResponse.ProtoReflect.Descriptor instead.
func (*CreatePrivateVMImageResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{41}
}

func (x *CreatePrivateVMImageResponse) GetImage() *PrivateImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type DeletePrivateVMImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeletePrivateVMImageRequest) Reset() {
	*x = DeletePrivateVMImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrivateVMImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrivateVMImageRequest) ProtoMessage() {}

func (x *DeletePrivateVMImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrivateVMImageRequest.ProtoReflect.Descriptor instead.
func (*DeletePrivateVMImageRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{42}
}

func (x *DeletePrivateVMImageRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeletePrivateVMImageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeletePrivateVMImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePrivateVMImageResponse) Reset() {
	*x = DeletePrivateVMImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePrivateVMImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePrivateVMImageResponse) ProtoMessage() {}

func (x *DeletePrivateVMImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePrivateVMImageResponse.ProtoReflect.Descriptor instead.
func (*DeletePrivateVMImageResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{43}
}

type ListPrivateVMImagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber int32  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize   int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListPrivateVMImagesRequest) Reset() {
	*x = ListPrivateVMImagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPrivateVMImagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrivateVMImagesRequest) ProtoMessage() {}

func (x *ListPrivateVMImagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrivateVMImagesRequest.ProtoReflect.Descriptor instead.
func (*ListPrivateVMImagesRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{44}
}

func (x *ListPrivateVMImagesRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListPrivateVMImagesRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListPrivateVMImagesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetPrivateVMImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPrivateVMImageRequest) Reset() {
	*x = GetPrivateVMImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivateVMImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateVMImageRequest) ProtoMessage() {}

func (x *GetPrivateVMImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateVMImageRequest.ProtoReflect.Descriptor instead.
func (*GetPrivateVMImageRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{45}
}

func (x *GetPrivateVMImageRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetPrivateVMImageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPrivateVMImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Image *PrivateImage `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *GetPrivateVMImageResponse) Reset() {
	*x = GetPrivateVMImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPrivateVMImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPrivateVMImageResponse) ProtoMessage() {}

func (x *GetPrivateVMImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPrivateVMImageResponse.ProtoReflect.Descriptor instead.
func (*GetPrivateVMImageResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{46}
}

func (x *GetPrivateVMImageResponse) GetImage() *PrivateImage {
	if x != nil {
		return x.Image
	}
	return nil
}

type ListPrivateVMImagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Images     []*PrivateImage `protobuf:"bytes,1,rep,name=images,proto3" json:"images,omitempty"`
	TotalCount int32           `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	PageNumber int32           `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize   int32           `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListPrivateVMImagesResponse) Reset() {
	*x = ListPrivateVMImagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPrivateVMImagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPrivateVMImagesResponse) ProtoMessage() {}

func (x *ListPrivateVMImagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPrivateVMImagesResponse.ProtoReflect.Descriptor instead.
func (*ListPrivateVMImagesResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{47}
}

func (x *ListPrivateVMImagesResponse) GetImages() []*PrivateImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *ListPrivateVMImagesResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListPrivateVMImagesResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListPrivateVMImagesResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type UpdatePrivateVMImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId   string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id          string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *UpdatePrivateVMImageRequest) Reset() {
	*x = UpdatePrivateVMImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivateVMImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivateVMImageRequest) ProtoMessage() {}

func (x *UpdatePrivateVMImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivateVMImageRequest.ProtoReflect.Descriptor instead.
func (*UpdatePrivateVMImageRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{48}
}

func (x *UpdatePrivateVMImageRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdatePrivateVMImageRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePrivateVMImageRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdatePrivateVMImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdatePrivateVMImageResponse) Reset() {
	*x = UpdatePrivateVMImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePrivateVMImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePrivateVMImageResponse) ProtoMessage() {}

func (x *UpdatePrivateVMImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePrivateVMImageResponse.ProtoReflect.Descriptor instead.
func (*UpdatePrivateVMImageResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{49}
}

type ListDisksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	PageNumber   int32  `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize     int32  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	DataCenterId string `protobuf:"bytes,4,opt,name=data_center_id,json=dataCenterId,proto3" json:"data_center_id,omitempty"`
}

func (x *ListDisksRequest) Reset() {
	*x = ListDisksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDisksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksRequest) ProtoMessage() {}

func (x *ListDisksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksRequest.ProtoReflect.Descriptor instead.
func (*ListDisksRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{50}
}

func (x *ListDisksRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListDisksRequest) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListDisksRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListDisksRequest) GetDataCenterId() string {
	if x != nil {
		return x.DataCenterId
	}
	return ""
}

type ListDisksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disks      []*Disk `protobuf:"bytes,1,rep,name=disks,proto3" json:"disks,omitempty"`
	TotalCount int32   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	PageNumber int32   `protobuf:"varint,3,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	PageSize   int32   `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *ListDisksResponse) Reset() {
	*x = ListDisksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDisksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDisksResponse) ProtoMessage() {}

func (x *ListDisksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDisksResponse.ProtoReflect.Descriptor instead.
func (*ListDisksResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{51}
}

func (x *ListDisksResponse) GetDisks() []*Disk {
	if x != nil {
		return x.Disks
	}
	return nil
}

func (x *ListDisksResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListDisksResponse) GetPageNumber() int32 {
	if x != nil {
		return x.PageNumber
	}
	return 0
}

func (x *ListDisksResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDiskRequest) Reset() {
	*x = GetDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskRequest) ProtoMessage() {}

func (x *GetDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskRequest.ProtoReflect.Descriptor instead.
func (*GetDiskRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{52}
}

func (x *GetDiskRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *GetDiskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk      *Disk       `protobuf:"bytes,1,opt,name=disk,proto3" json:"disk,omitempty"`
	Snapshots []*Snapshot `protobuf:"bytes,2,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *GetDiskResponse) Reset() {
	*x = GetDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDiskResponse) ProtoMessage() {}

func (x *GetDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDiskResponse.ProtoReflect.Descriptor instead.
func (*GetDiskResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{53}
}

func (x *GetDiskResponse) GetDisk() *Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

func (x *GetDiskResponse) GetSnapshots() []*Snapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type CreateStorageDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId    string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	DataCenterId string `protobuf:"bytes,2,opt,name=data_center_id,json=dataCenterId,proto3" json:"data_center_id,omitempty"`
	Disk         *Disk  `protobuf:"bytes,3,opt,name=disk,proto3" json:"disk,omitempty"`
}

func (x *CreateStorageDiskRequest) Reset() {
	*x = CreateStorageDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStorageDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStorageDiskRequest) ProtoMessage() {}

func (x *CreateStorageDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStorageDiskRequest.ProtoReflect.Descriptor instead.
func (*CreateStorageDiskRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{54}
}

func (x *CreateStorageDiskRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateStorageDiskRequest) GetDataCenterId() string {
	if x != nil {
		return x.DataCenterId
	}
	return ""
}

func (x *CreateStorageDiskRequest) GetDisk() *Disk {
	if x != nil {
		return x.Disk
	}
	return nil
}

type CreateStorageDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateStorageDiskResponse) Reset() {
	*x = CreateStorageDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateStorageDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStorageDiskResponse) ProtoMessage() {}

func (x *CreateStorageDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStorageDiskResponse.ProtoReflect.Descriptor instead.
func (*CreateStorageDiskResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{55}
}

type DeleteStorageDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteStorageDiskRequest) Reset() {
	*x = DeleteStorageDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStorageDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStorageDiskRequest) ProtoMessage() {}

func (x *DeleteStorageDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStorageDiskRequest.ProtoReflect.Descriptor instead.
func (*DeleteStorageDiskRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteStorageDiskRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteStorageDiskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type DeleteStorageDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteStorageDiskResponse) Reset() {
	*x = DeleteStorageDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteStorageDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteStorageDiskResponse) ProtoMessage() {}

func (x *DeleteStorageDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteStorageDiskResponse.ProtoReflect.Descriptor instead.
func (*DeleteStorageDiskResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{57}
}

type CreateDiskSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	VmId       string `protobuf:"bytes,4,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
}

func (x *CreateDiskSnapshotRequest) Reset() {
	*x = CreateDiskSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiskSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiskSnapshotRequest) ProtoMessage() {}

func (x *CreateDiskSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiskSnapshotRequest.ProtoReflect.Descriptor instead.
func (*CreateDiskSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{58}
}

func (x *CreateDiskSnapshotRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *CreateDiskSnapshotRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateDiskSnapshotRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *CreateDiskSnapshotRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type CreateDiskSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateDiskSnapshotResponse) Reset() {
	*x = CreateDiskSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDiskSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDiskSnapshotResponse) ProtoMessage() {}

func (x *CreateDiskSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDiskSnapshotResponse.ProtoReflect.Descriptor instead.
func (*CreateDiskSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{59}
}

type RevertDiskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	VmId       string `protobuf:"bytes,4,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
}

func (x *RevertDiskRequest) Reset() {
	*x = RevertDiskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertDiskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertDiskRequest) ProtoMessage() {}

func (x *RevertDiskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertDiskRequest.ProtoReflect.Descriptor instead.
func (*RevertDiskRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{60}
}

func (x *RevertDiskRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *RevertDiskRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *RevertDiskRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *RevertDiskRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type RevertDiskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RevertDiskResponse) Reset() {
	*x = RevertDiskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RevertDiskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RevertDiskResponse) ProtoMessage() {}

func (x *RevertDiskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RevertDiskResponse.ProtoReflect.Descriptor instead.
func (*RevertDiskResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{61}
}

type ListDiskSnapshotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListDiskSnapshotsRequest) Reset() {
	*x = ListDiskSnapshotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiskSnapshotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskSnapshotsRequest) ProtoMessage() {}

func (x *ListDiskSnapshotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskSnapshotsRequest.ProtoReflect.Descriptor instead.
func (*ListDiskSnapshotsRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{62}
}

func (x *ListDiskSnapshotsRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ListDiskSnapshotsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ListDiskSnapshotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Snapshots []*Snapshot `protobuf:"bytes,1,rep,name=snapshots,proto3" json:"snapshots,omitempty"`
}

func (x *ListDiskSnapshotsResponse) Reset() {
	*x = ListDiskSnapshotsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDiskSnapshotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDiskSnapshotsResponse) ProtoMessage() {}

func (x *ListDiskSnapshotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDiskSnapshotsResponse.ProtoReflect.Descriptor instead.
func (*ListDiskSnapshotsResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{63}
}

func (x *ListDiskSnapshotsResponse) GetSnapshots() []*Snapshot {
	if x != nil {
		return x.Snapshots
	}
	return nil
}

type DeleteDiskSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId  string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id         string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	SnapshotId string `protobuf:"bytes,3,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	VmId       string `protobuf:"bytes,4,opt,name=vm_id,json=vmId,proto3" json:"vm_id,omitempty"`
}

func (x *DeleteDiskSnapshotRequest) Reset() {
	*x = DeleteDiskSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiskSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskSnapshotRequest) ProtoMessage() {}

func (x *DeleteDiskSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DeleteDiskSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{64}
}

func (x *DeleteDiskSnapshotRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DeleteDiskSnapshotRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DeleteDiskSnapshotRequest) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *DeleteDiskSnapshotRequest) GetVmId() string {
	if x != nil {
		return x.VmId
	}
	return ""
}

type DeleteDiskSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteDiskSnapshotResponse) Reset() {
	*x = DeleteDiskSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDiskSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDiskSnapshotResponse) ProtoMessage() {}

func (x *DeleteDiskSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDiskSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DeleteDiskSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{65}
}

type AttachSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id              string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	SecurityGroupId string `protobuf:"bytes,4,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
}

func (x *AttachSecurityGroupRequest) Reset() {
	*x = AttachSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachSecurityGroupRequest) ProtoMessage() {}

func (x *AttachSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*AttachSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{66}
}

func (x *AttachSecurityGroupRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *AttachSecurityGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AttachSecurityGroupRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

type AttachSecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AttachSecurityGroupResponse) Reset() {
	*x = AttachSecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachSecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachSecurityGroupResponse) ProtoMessage() {}

func (x *AttachSecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachSecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*AttachSecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{67}
}

type DetachSecurityGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId       string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id              string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	SecurityGroupId string `protobuf:"bytes,4,opt,name=security_group_id,json=securityGroupId,proto3" json:"security_group_id,omitempty"`
}

func (x *DetachSecurityGroupRequest) Reset() {
	*x = DetachSecurityGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachSecurityGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachSecurityGroupRequest) ProtoMessage() {}

func (x *DetachSecurityGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachSecurityGroupRequest.ProtoReflect.Descriptor instead.
func (*DetachSecurityGroupRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{68}
}

func (x *DetachSecurityGroupRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *DetachSecurityGroupRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DetachSecurityGroupRequest) GetSecurityGroupId() string {
	if x != nil {
		return x.SecurityGroupId
	}
	return ""
}

type DetachSecurityGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DetachSecurityGroupResponse) Reset() {
	*x = DetachSecurityGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetachSecurityGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetachSecurityGroupResponse) ProtoMessage() {}

func (x *DetachSecurityGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetachSecurityGroupResponse.ProtoReflect.Descriptor instead.
func (*DetachSecurityGroupResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{69}
}

type UpdateVMMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string            `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string            `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Metadata  map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Merge     bool              `protobuf:"varint,4,opt,name=merge,proto3" json:"merge,omitempty"`
}

func (x *UpdateVMMetadataRequest) Reset() {
	*x = UpdateVMMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVMMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMMetadataRequest) ProtoMessage() {}

func (x *UpdateVMMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMMetadataRequest.ProtoReflect.Descriptor instead.
func (*UpdateVMMetadataRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{70}
}

func (x *UpdateVMMetadataRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateVMMetadataRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateVMMetadataRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateVMMetadataRequest) GetMerge() bool {
	if x != nil {
		return x.Merge
	}
	return false
}

type UpdateVMMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateVMMetadataResponse) Reset() {
	*x = UpdateVMMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVMMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMMetadataResponse) ProtoMessage() {}

func (x *UpdateVMMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMMetadataResponse.ProtoReflect.Descriptor instead.
func (*UpdateVMMetadataResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{71}
}

func (x *UpdateVMMetadataResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UpdateVMExpireTimeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId string `protobuf:"bytes,1,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	Id        string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Expiration:
	//
	//	*UpdateVMExpireTimeRequest_ExpireTime
	//	*UpdateVMExpireTimeRequest_Ttl
	Expiration isUpdateVMExpireTimeRequest_Expiration `protobuf_oneof:"expiration"`
}

func (x *UpdateVMExpireTimeRequest) Reset() {
	*x = UpdateVMExpireTimeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVMExpireTimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMExpireTimeRequest) ProtoMessage() {}

func (x *UpdateVMExpireTimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMExpireTimeRequest.ProtoReflect.Descriptor instead.
func (*UpdateVMExpireTimeRequest) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{72}
}

func (x *UpdateVMExpireTimeRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *UpdateVMExpireTimeRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *UpdateVMExpireTimeRequest) GetExpiration() isUpdateVMExpireTimeRequest_Expiration {
	if m != nil {
		return m.Expiration
	}
	return nil
}

func (x *UpdateVMExpireTimeRequest) GetExpireTime() *timestamppb.Timestamp {
	if x, ok := x.GetExpiration().(*UpdateVMExpireTimeRequest_ExpireTime); ok {
		return x.ExpireTime
	}
	return nil
}

func (x *UpdateVMExpireTimeRequest) GetTtl() *durationpb.Duration {
	if x, ok := x.GetExpiration().(*UpdateVMExpireTimeRequest_Ttl); ok {
		return x.Ttl
	}
	return nil
}

type isUpdateVMExpireTimeRequest_Expiration interface {
	isUpdateVMExpireTimeRequest_Expiration()
}

type UpdateVMExpireTimeRequest_ExpireTime struct {
	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire_time,json=expireTime,proto3,oneof"`
}

type UpdateVMExpireTimeRequest_Ttl struct {
	Ttl *durationpb.Duration `protobuf:"bytes,4,opt,name=ttl,proto3,oneof"`
}

func (*UpdateVMExpireTimeRequest_ExpireTime) isUpdateVMExpireTimeRequest_Expiration() {}

func (*UpdateVMExpireTimeRequest_Ttl) isUpdateVMExpireTimeRequest_Expiration() {}

type UpdateVMExpireTimeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpireTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
}

func (x *UpdateVMExpireTimeResponse) Reset() {
	*x = UpdateVMExpireTimeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVMExpireTimeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVMExpireTimeResponse) ProtoMessage() {}

func (x *UpdateVMExpireTimeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVMExpireTimeResponse.ProtoReflect.Descriptor instead.
func (*UpdateVMExpireTimeResponse) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{73}
}

func (x *UpdateVMExpireTimeResponse) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

type CreateVMRequest_NIC struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkId        string   `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	AssignPublicIp   bool     `protobuf:"varint,2,opt,name=assign_public_ip,json=assignPublicIp,proto3" json:"assign_public_ip,omitempty"`
	SecurityGroupIds []string `protobuf:"bytes,3,rep,name=security_group_ids,json=securityGroupIds,proto3" json:"security_group_ids,omitempty"`
}

func (x *CreateVMRequest_NIC) Reset() {
	*x = CreateVMRequest_NIC{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVMRequest_NIC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest_NIC) ProtoMessage() {}

func (x *CreateVMRequest_NIC) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest_NIC.ProtoReflect.Descriptor instead.
func (*CreateVMRequest_NIC) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateVMRequest_NIC) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *CreateVMRequest_NIC) GetAssignPublicIp() bool {
	if x != nil {
		return x.AssignPublicIp
	}
	return false
}

func (x *CreateVMRequest_NIC) GetSecurityGroupIds() []string {
	if x != nil {
		return x.SecurityGroupIds
	}
	return nil
}

type CreateVMRequest_CpuTopology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sockets int32 `protobuf:"varint,1,opt,name=sockets,proto3" json:"sockets,omitempty"`
	Cores   int32 `protobuf:"varint,2,opt,name=cores,proto3" json:"cores,omitempty"`
	Threads int32 `protobuf:"varint,3,opt,name=threads,proto3" json:"threads,omitempty"`
}

func (x *CreateVMRequest_CpuTopology) Reset() {
	*x = CreateVMRequest_CpuTopology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateVMRequest_CpuTopology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVMRequest_CpuTopology) ProtoMessage() {}

func (x *CreateVMRequest_CpuTopology) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVMRequest_CpuTopology.ProtoReflect.Descriptor instead.
func (*CreateVMRequest_CpuTopology) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CreateVMRequest_CpuTopology) GetSockets() int32 {
	if x != nil {
		return x.Sockets
	}
	return 0
}

func (x *CreateVMRequest_CpuTopology) GetCores() int32 {
	if x != nil {
		return x.Cores
	}
	return 0
}

func (x *CreateVMRequest_CpuTopology) GetThreads() int32 {
	if x != nil {
		return x.Threads
	}
	return 0
}

type ListVMMachineTypesResponse_VMMachineType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterId         string                                                       `protobuf:"bytes,1,opt,name=data_center_id,json=dataCenterId,proto3" json:"data_center_id,omitempty"`
	MachineType          string                                                       `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	CpuModel             string                                                       `protobuf:"bytes,3,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	GpuModel             string                                                       `protobuf:"bytes,4,opt,name=gpu_model,json=gpuModel,proto3" json:"gpu_model,omitempty"`
	GpuModelId           string                                                       `protobuf:"bytes,40,opt,name=gpu_model_id,json=gpuModelId,proto3" json:"gpu_model_id,omitempty"`
	MinVcpuPerMemoryGib  float64                                                      `protobuf:"fixed64,5,opt,name=min_vcpu_per_memory_gib,json=minVcpuPerMemoryGib,proto3" json:"min_vcpu_per_memory_gib,omitempty"`
	MaxVcpuPerMemoryGib  float64                                                      `protobuf:"fixed64,6,opt,name=max_vcpu_per_memory_gib,json=maxVcpuPerMemoryGib,proto3" json:"max_vcpu_per_memory_gib,omitempty"`
	MinVcpuPerGpu        float64                                                      `protobuf:"fixed64,7,opt,name=min_vcpu_per_gpu,json=minVcpuPerGpu,proto3" json:"min_vcpu_per_gpu,omitempty"`
	MaxVcpuPerGpu        float64                                                      `protobuf:"fixed64,8,opt,name=max_vcpu_per_gpu,json=maxVcpuPerGpu,proto3" json:"max_vcpu_per_gpu,omitempty"`
	VcpuPriceHr          *decimal.Decimal                                             `protobuf:"bytes,9,opt,name=vcpu_price_hr,json=vcpuPriceHr,proto3" json:"vcpu_price_hr,omitempty"`
	MemoryGibPriceHr     *decimal.Decimal                                             `protobuf:"bytes,10,opt,name=memory_gib_price_hr,json=memoryGibPriceHr,proto3" json:"memory_gib_price_hr,omitempty"`
	GpuPriceHr           *decimal.Decimal                                             `protobuf:"bytes,11,opt,name=gpu_price_hr,json=gpuPriceHr,proto3" json:"gpu_price_hr,omitempty"`
	MinStorageGibPriceHr *decimal.Decimal                                             `protobuf:"bytes,12,opt,name=min_storage_gib_price_hr,json=minStorageGibPriceHr,proto3" json:"min_storage_gib_price_hr,omitempty"`
	Ipv4PriceHr          *decimal.Decimal                                             `protobuf:"bytes,13,opt,name=ipv4_price_hr,json=ipv4PriceHr,proto3" json:"ipv4_price_hr,omitempty"`
	RenewableEnergy      bool                                                         `protobuf:"varint,14,opt,name=renewable_energy,json=renewableEnergy,proto3" json:"renewable_energy,omitempty"`
	MaxVcpuFree          int32                                                        `protobuf:"varint,15,opt,name=max_vcpu_free,json=maxVcpuFree,proto3" json:"max_vcpu_free,omitempty"`
	TotalVcpuFree        int32                                                        `protobuf:"varint,16,opt,name=total_vcpu_free,json=totalVcpuFree,proto3" json:"total_vcpu_free,omitempty"`
	MaxMemoryGibFree     int32                                                        `protobuf:"varint,17,opt,name=max_memory_gib_free,json=maxMemoryGibFree,proto3" json:"max_memory_gib_free,omitempty"`
	TotalMemoryGibFree   int32                                                        `protobuf:"varint,18,opt,name=total_memory_gib_free,json=totalMemoryGibFree,proto3" json:"total_memory_gib_free,omitempty"`
	MaxGpuFree           int32                                                        `protobuf:"varint,19,opt,name=max_gpu_free,json=maxGpuFree,proto3" json:"max_gpu_free,omitempty"`
	TotalGpuFree         int32                                                        `protobuf:"varint,20,opt,name=total_gpu_free,json=totalGpuFree,proto3" json:"total_gpu_free,omitempty"`
	MaxStorageGibFree    int32                                                        `protobuf:"varint,21,opt,name=max_storage_gib_free,json=maxStorageGibFree,proto3" json:"max_storage_gib_free,omitempty"`
	TotalStorageGibFree  int32                                                        `protobuf:"varint,22,opt,name=total_storage_gib_free,json=totalStorageGibFree,proto3" json:"total_storage_gib_free,omitempty"`
	MinVcpu              float64                                                      `protobuf:"fixed64,23,opt,name=min_vcpu,json=minVcpu,proto3" json:"min_vcpu,omitempty"`
	MinMemoryGib         float64                                                      `protobuf:"fixed64,24,opt,name=min_memory_gib,json=minMemoryGib,proto3" json:"min_memory_gib,omitempty"`
	Prices               []*ListVMMachineTypesResponse_VMMachineType_MachineTypePrice `protobuf:"bytes,25,rep,name=prices,proto3" json:"prices,omitempty"`
}

func (x *ListVMMachineTypesResponse_VMMachineType) Reset() {
	*x = ListVMMachineTypesResponse_VMMachineType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMMachineTypesResponse_VMMachineType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMMachineTypesResponse_VMMachineType) ProtoMessage() {}

func (x *ListVMMachineTypesResponse_VMMachineType) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMMachineTypesResponse_VMMachineType.ProtoReflect.Descriptor instead.
func (*ListVMMachineTypesResponse_VMMachineType) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{31, 0}
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetDataCenterId() string {
	if x != nil {
		return x.DataCenterId
	}
	return ""
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetGpuModel() string {
	if x != nil {
		return x.GpuModel
	}
	return ""
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetGpuModelId() string {
	if x != nil {
		return x.GpuModelId
	}
	return ""
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMinVcpuPerMemoryGib() float64 {
	if x != nil {
		return x.MinVcpuPerMemoryGib
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMaxVcpuPerMemoryGib() float64 {
	if x != nil {
		return x.MaxVcpuPerMemoryGib
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMinVcpuPerGpu() float64 {
	if x != nil {
		return x.MinVcpuPerGpu
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMaxVcpuPerGpu() float64 {
	if x != nil {
		return x.MaxVcpuPerGpu
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetVcpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.VcpuPriceHr
	}
	return nil
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMemoryGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.MemoryGibPriceHr
	}
	return nil
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetGpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.GpuPriceHr
	}
	return nil
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMinStorageGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.MinStorageGibPriceHr
	}
	return nil
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetIpv4PriceHr() *decimal.Decimal {
	if x != nil {
		return x.Ipv4PriceHr
	}
	return nil
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetRenewableEnergy() bool {
	if x != nil {
		return x.RenewableEnergy
	}
	return false
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMaxVcpuFree() int32 {
	if x != nil {
		return x.MaxVcpuFree
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetTotalVcpuFree() int32 {
	if x != nil {
		return x.TotalVcpuFree
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMaxMemoryGibFree() int32 {
	if x != nil {
		return x.MaxMemoryGibFree
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetTotalMemoryGibFree() int32 {
	if x != nil {
		return x.TotalMemoryGibFree
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMaxGpuFree() int32 {
	if x != nil {
		return x.MaxGpuFree
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetTotalGpuFree() int32 {
	if x != nil {
		return x.TotalGpuFree
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMaxStorageGibFree() int32 {
	if x != nil {
		return x.MaxStorageGibFree
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetTotalStorageGibFree() int32 {
	if x != nil {
		return x.TotalStorageGibFree
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMinVcpu() float64 {
	if x != nil {
		return x.MinVcpu
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetMinMemoryGib() float64 {
	if x != nil {
		return x.MinMemoryGib
	}
	return 0
}

func (x *ListVMMachineTypesResponse_VMMachineType) GetPrices() []*ListVMMachineTypesResponse_VMMachineType_MachineTypePrice {
	if x != nil {
		return x.Prices
	}
	return nil
}

type ListVMMachineTypesResponse_VMMachineType_MachineTypePrice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VcpuPriceHr      *decimal.Decimal `protobuf:"bytes,1,opt,name=vcpu_price_hr,json=vcpuPriceHr,proto3" json:"vcpu_price_hr,omitempty"`
	MemoryGibPriceHr *decimal.Decimal `protobuf:"bytes,2,opt,name=memory_gib_price_hr,json=memoryGibPriceHr,proto3" json:"memory_gib_price_hr,omitempty"`
	GpuPriceHr       *decimal.Decimal `protobuf:"bytes,3,opt,name=gpu_price_hr,json=gpuPriceHr,proto3" json:"gpu_price_hr,omitempty"`
	CommitmentTerm   CommitmentTerm   `protobuf:"varint,4,opt,name=commitment_term,json=commitmentTerm,proto3,enum=org.cudo.compute.v1.CommitmentTerm" json:"commitment_term,omitempty"`
}

func (x *ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) Reset() {
	*x = ListVMMachineTypesResponse_VMMachineType_MachineTypePrice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) ProtoMessage() {}

func (x *ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMMachineTypesResponse_VMMachineType_MachineTypePrice.ProtoReflect.Descriptor instead.
func (*ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{31, 0, 0}
}

func (x *ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) GetVcpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.VcpuPriceHr
	}
	return nil
}

func (x *ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) GetMemoryGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.MemoryGibPriceHr
	}
	return nil
}

func (x *ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) GetGpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.GpuPriceHr
	}
	return nil
}

func (x *ListVMMachineTypesResponse_VMMachineType_MachineTypePrice) GetCommitmentTerm() CommitmentTerm {
	if x != nil {
		return x.CommitmentTerm
	}
	return CommitmentTerm_COMMITMENT_TERM_NONE
}

type ListVMMachineTypes2Response_VMMachineType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataCenterId         string           `protobuf:"bytes,1,opt,name=data_center_id,json=dataCenterId,proto3" json:"data_center_id,omitempty"`
	MachineType          string           `protobuf:"bytes,2,opt,name=machine_type,json=machineType,proto3" json:"machine_type,omitempty"`
	CpuModel             string           `protobuf:"bytes,3,opt,name=cpu_model,json=cpuModel,proto3" json:"cpu_model,omitempty"`
	GpuModel             string           `protobuf:"bytes,4,opt,name=gpu_model,json=gpuModel,proto3" json:"gpu_model,omitempty"`
	GpuModelId           string           `protobuf:"bytes,40,opt,name=gpu_model_id,json=gpuModelId,proto3" json:"gpu_model_id,omitempty"`
	MinVcpuPerMemoryGib  float64          `protobuf:"fixed64,5,opt,name=min_vcpu_per_memory_gib,json=minVcpuPerMemoryGib,proto3" json:"min_vcpu_per_memory_gib,omitempty"`
	MaxVcpuPerMemoryGib  float64          `protobuf:"fixed64,6,opt,name=max_vcpu_per_memory_gib,json=maxVcpuPerMemoryGib,proto3" json:"max_vcpu_per_memory_gib,omitempty"`
	MinVcpuPerGpu        float64          `protobuf:"fixed64,7,opt,name=min_vcpu_per_gpu,json=minVcpuPerGpu,proto3" json:"min_vcpu_per_gpu,omitempty"`
	MaxVcpuPerGpu        float64          `protobuf:"fixed64,8,opt,name=max_vcpu_per_gpu,json=maxVcpuPerGpu,proto3" json:"max_vcpu_per_gpu,omitempty"`
	VcpuPriceHr          *decimal.Decimal `protobuf:"bytes,9,opt,name=vcpu_price_hr,json=vcpuPriceHr,proto3" json:"vcpu_price_hr,omitempty"`
	MemoryGibPriceHr     *decimal.Decimal `protobuf:"bytes,10,opt,name=memory_gib_price_hr,json=memoryGibPriceHr,proto3" json:"memory_gib_price_hr,omitempty"`
	GpuPriceHr           *decimal.Decimal `protobuf:"bytes,11,opt,name=gpu_price_hr,json=gpuPriceHr,proto3" json:"gpu_price_hr,omitempty"`
	MinStorageGibPriceHr *decimal.Decimal `protobuf:"bytes,12,opt,name=min_storage_gib_price_hr,json=minStorageGibPriceHr,proto3" json:"min_storage_gib_price_hr,omitempty"`
	Ipv4PriceHr          *decimal.Decimal `protobuf:"bytes,13,opt,name=ipv4_price_hr,json=ipv4PriceHr,proto3" json:"ipv4_price_hr,omitempty"`
	RenewableEnergy      bool             `protobuf:"varint,14,opt,name=renewable_energy,json=renewableEnergy,proto3" json:"renewable_energy,omitempty"`
	MaxVcpuFree          int32            `protobuf:"varint,15,opt,name=max_vcpu_free,json=maxVcpuFree,proto3" json:"max_vcpu_free,omitempty"`
	TotalVcpuFree        int32            `protobuf:"varint,16,opt,name=total_vcpu_free,json=totalVcpuFree,proto3" json:"total_vcpu_free,omitempty"`
	MaxMemoryGibFree     int32            `protobuf:"varint,17,opt,name=max_memory_gib_free,json=maxMemoryGibFree,proto3" json:"max_memory_gib_free,omitempty"`
	TotalMemoryGibFree   int32            `protobuf:"varint,18,opt,name=total_memory_gib_free,json=totalMemoryGibFree,proto3" json:"total_memory_gib_free,omitempty"`
	MaxGpuFree           int32            `protobuf:"varint,19,opt,name=max_gpu_free,json=maxGpuFree,proto3" json:"max_gpu_free,omitempty"`
	TotalGpuFree         int32            `protobuf:"varint,20,opt,name=total_gpu_free,json=totalGpuFree,proto3" json:"total_gpu_free,omitempty"`
	MaxStorageGibFree    int32            `protobuf:"varint,21,opt,name=max_storage_gib_free,json=maxStorageGibFree,proto3" json:"max_storage_gib_free,omitempty"`
	TotalStorageGibFree  int32            `protobuf:"varint,22,opt,name=total_storage_gib_free,json=totalStorageGibFree,proto3" json:"total_storage_gib_free,omitempty"`
	MinVcpu              float64          `protobuf:"fixed64,23,opt,name=min_vcpu,json=minVcpu,proto3" json:"min_vcpu,omitempty"`
	MinMemoryGib         float64          `protobuf:"fixed64,24,opt,name=min_memory_gib,json=minMemoryGib,proto3" json:"min_memory_gib,omitempty"`
}

func (x *ListVMMachineTypes2Response_VMMachineType) Reset() {
	*x = ListVMMachineTypes2Response_VMMachineType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMMachineTypes2Response_VMMachineType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMMachineTypes2Response_VMMachineType) ProtoMessage() {}

func (x *ListVMMachineTypes2Response_VMMachineType) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMMachineTypes2Response_VMMachineType.ProtoReflect.Descriptor instead.
func (*ListVMMachineTypes2Response_VMMachineType) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{33, 0}
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetDataCenterId() string {
	if x != nil {
		return x.DataCenterId
	}
	return ""
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMachineType() string {
	if x != nil {
		return x.MachineType
	}
	return ""
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetCpuModel() string {
	if x != nil {
		return x.CpuModel
	}
	return ""
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetGpuModel() string {
	if x != nil {
		return x.GpuModel
	}
	return ""
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetGpuModelId() string {
	if x != nil {
		return x.GpuModelId
	}
	return ""
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMinVcpuPerMemoryGib() float64 {
	if x != nil {
		return x.MinVcpuPerMemoryGib
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMaxVcpuPerMemoryGib() float64 {
	if x != nil {
		return x.MaxVcpuPerMemoryGib
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMinVcpuPerGpu() float64 {
	if x != nil {
		return x.MinVcpuPerGpu
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMaxVcpuPerGpu() float64 {
	if x != nil {
		return x.MaxVcpuPerGpu
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetVcpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.VcpuPriceHr
	}
	return nil
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMemoryGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.MemoryGibPriceHr
	}
	return nil
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetGpuPriceHr() *decimal.Decimal {
	if x != nil {
		return x.GpuPriceHr
	}
	return nil
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMinStorageGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.MinStorageGibPriceHr
	}
	return nil
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetIpv4PriceHr() *decimal.Decimal {
	if x != nil {
		return x.Ipv4PriceHr
	}
	return nil
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetRenewableEnergy() bool {
	if x != nil {
		return x.RenewableEnergy
	}
	return false
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMaxVcpuFree() int32 {
	if x != nil {
		return x.MaxVcpuFree
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetTotalVcpuFree() int32 {
	if x != nil {
		return x.TotalVcpuFree
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMaxMemoryGibFree() int32 {
	if x != nil {
		return x.MaxMemoryGibFree
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetTotalMemoryGibFree() int32 {
	if x != nil {
		return x.TotalMemoryGibFree
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMaxGpuFree() int32 {
	if x != nil {
		return x.MaxGpuFree
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetTotalGpuFree() int32 {
	if x != nil {
		return x.TotalGpuFree
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMaxStorageGibFree() int32 {
	if x != nil {
		return x.MaxStorageGibFree
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetTotalStorageGibFree() int32 {
	if x != nil {
		return x.TotalStorageGibFree
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMinVcpu() float64 {
	if x != nil {
		return x.MinVcpu
	}
	return 0
}

func (x *ListVMMachineTypes2Response_VMMachineType) GetMinMemoryGib() float64 {
	if x != nil {
		return x.MinMemoryGib
	}
	return 0
}

type ListPublicVMImagesResponse_Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name              string                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description       string                                      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DisplayName       string                                      `protobuf:"bytes,4,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Platform          string                                      `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	SizeGib           int32                                       `protobuf:"varint,7,opt,name=size_gib,json=sizeGib,proto3" json:"size_gib,omitempty"`
	InstalledPackages []*ListPublicVMImagesResponse_Image_Package `protobuf:"bytes,8,rep,name=installed_packages,json=installedPackages,proto3" json:"installed_packages,omitempty"`
}

func (x *ListPublicVMImagesResponse_Image) Reset() {
	*x = ListPublicVMImagesResponse_Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicVMImagesResponse_Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicVMImagesResponse_Image) ProtoMessage() {}

func (x *ListPublicVMImagesResponse_Image) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicVMImagesResponse_Image.ProtoReflect.Descriptor instead.
func (*ListPublicVMImagesResponse_Image) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{35, 0}
}

func (x *ListPublicVMImagesResponse_Image) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListPublicVMImagesResponse_Image) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPublicVMImagesResponse_Image) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListPublicVMImagesResponse_Image) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ListPublicVMImagesResponse_Image) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ListPublicVMImagesResponse_Image) GetSizeGib() int32 {
	if x != nil {
		return x.SizeGib
	}
	return 0
}

func (x *ListPublicVMImagesResponse_Image) GetInstalledPackages() []*ListPublicVMImagesResponse_Image_Package {
	if x != nil {
		return x.InstalledPackages
	}
	return nil
}

type ListPublicVMImagesResponse_Image_Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Version     string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ListPublicVMImagesResponse_Image_Package) Reset() {
	*x = ListPublicVMImagesResponse_Image_Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPublicVMImagesResponse_Image_Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPublicVMImagesResponse_Image_Package) ProtoMessage() {}

func (x *ListPublicVMImagesResponse_Image_Package) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPublicVMImagesResponse_Image_Package.ProtoReflect.Descriptor instead.
func (*ListPublicVMImagesResponse_Image_Package) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{35, 0, 0}
}

func (x *ListPublicVMImagesResponse_Image_Package) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListPublicVMImagesResponse_Image_Package) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListPublicVMImagesResponse_Image_Package) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ListVMDataCentersResponse_VMDataCenter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                                                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	RegionId        string                                                       `protobuf:"bytes,2,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	SupplierName    string                                                       `protobuf:"bytes,4,opt,name=supplier_name,json=supplierName,proto3" json:"supplier_name,omitempty"`
	RenewableEnergy bool                                                         `protobuf:"varint,5,opt,name=renewable_energy,json=renewableEnergy,proto3" json:"renewable_energy,omitempty"`
	DiskPoolPricing []*ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr `protobuf:"bytes,6,rep,name=disk_pool_pricing,json=diskPoolPricing,proto3" json:"disk_pool_pricing,omitempty"`
	NetworkPricing  []*ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr     `protobuf:"bytes,7,rep,name=network_pricing,json=networkPricing,proto3" json:"network_pricing,omitempty"`
	Ipv4PriceHr     *decimal.Decimal                                             `protobuf:"bytes,8,opt,name=ipv4_price_hr,json=ipv4PriceHr,proto3" json:"ipv4_price_hr,omitempty"`
	Ipv4Free        int32                                                        `protobuf:"varint,9,opt,name=ipv4_free,json=ipv4Free,proto3" json:"ipv4_free,omitempty"`
}

func (x *ListVMDataCentersResponse_VMDataCenter) Reset() {
	*x = ListVMDataCentersResponse_VMDataCenter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMDataCentersResponse_VMDataCenter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMDataCentersResponse_VMDataCenter) ProtoMessage() {}

func (x *ListVMDataCentersResponse_VMDataCenter) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMDataCentersResponse_VMDataCenter.ProtoReflect.Descriptor instead.
func (*ListVMDataCentersResponse_VMDataCenter) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{37, 0}
}

func (x *ListVMDataCentersResponse_VMDataCenter) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListVMDataCentersResponse_VMDataCenter) GetRegionId() string {
	if x != nil {
		return x.RegionId
	}
	return ""
}

func (x *ListVMDataCentersResponse_VMDataCenter) GetSupplierName() string {
	if x != nil {
		return x.SupplierName
	}
	return ""
}

func (x *ListVMDataCentersResponse_VMDataCenter) GetRenewableEnergy() bool {
	if x != nil {
		return x.RenewableEnergy
	}
	return false
}

func (x *ListVMDataCentersResponse_VMDataCenter) GetDiskPoolPricing() []*ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr {
	if x != nil {
		return x.DiskPoolPricing
	}
	return nil
}

func (x *ListVMDataCentersResponse_VMDataCenter) GetNetworkPricing() []*ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr {
	if x != nil {
		return x.NetworkPricing
	}
	return nil
}

func (x *ListVMDataCentersResponse_VMDataCenter) GetIpv4PriceHr() *decimal.Decimal {
	if x != nil {
		return x.Ipv4PriceHr
	}
	return nil
}

func (x *ListVMDataCentersResponse_VMDataCenter) GetIpv4Free() int32 {
	if x != nil {
		return x.Ipv4Free
	}
	return 0
}

type ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageClass       ListVMDataCentersResponse_VMDataCenter_StorageClass `protobuf:"varint,1,opt,name=storage_class,json=storageClass,proto3,enum=org.cudo.compute.v1.ListVMDataCentersResponse_VMDataCenter_StorageClass" json:"storage_class,omitempty"`
	DiskGibPriceHr     *decimal.Decimal                                    `protobuf:"bytes,2,opt,name=disk_gib_price_hr,json=diskGibPriceHr,proto3" json:"disk_gib_price_hr,omitempty"`
	SnapshotGibPriceHr *decimal.Decimal                                    `protobuf:"bytes,3,opt,name=snapshot_gib_price_hr,json=snapshotGibPriceHr,proto3" json:"snapshot_gib_price_hr,omitempty"`
}

func (x *ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr) Reset() {
	*x = ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr) ProtoMessage() {}

func (x *ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr.ProtoReflect.Descriptor instead.
func (*ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{37, 0, 0}
}

func (x *ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr) GetStorageClass() ListVMDataCentersResponse_VMDataCenter_StorageClass {
	if x != nil {
		return x.StorageClass
	}
	return ListVMDataCentersResponse_VMDataCenter_STORAGE_CLASS_UNKNOWN
}

func (x *ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr) GetDiskGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.DiskGibPriceHr
	}
	return nil
}

func (x *ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr) GetSnapshotGibPriceHr() *decimal.Decimal {
	if x != nil {
		return x.SnapshotGibPriceHr
	}
	return nil
}

type ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size    ListVMDataCentersResponse_VMDataCenter_VRouterSize `protobuf:"varint,1,opt,name=size,proto3,enum=org.cudo.compute.v1.ListVMDataCentersResponse_VMDataCenter_VRouterSize" json:"size,omitempty"`
	PriceHr *decimal.Decimal                                   `protobuf:"bytes,2,opt,name=price_hr,json=priceHr,proto3" json:"price_hr,omitempty"`
}

func (x *ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr) Reset() {
	*x = ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr) ProtoMessage() {}

func (x *ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr.ProtoReflect.Descriptor instead.
func (*ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{37, 0, 1}
}

func (x *ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr) GetSize() ListVMDataCentersResponse_VMDataCenter_VRouterSize {
	if x != nil {
		return x.Size
	}
	return ListVMDataCentersResponse_VMDataCenter_VROUTER_INSTANCE_UNKNOWN
}

func (x *ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr) GetPriceHr() *decimal.Decimal {
	if x != nil {
		return x.PriceHr
	}
	return nil
}

type ListVMGpuModelsResponse_GpuModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	VendorName string `protobuf:"bytes,2,opt,name=vendor_name,json=vendorName,proto3" json:"vendor_name,omitempty"`
	ModelName  string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	MemoryGib  int32  `protobuf:"varint,4,opt,name=memory_gib,json=memoryGib,proto3" json:"memory_gib,omitempty"`
}

func (x *ListVMGpuModelsResponse_GpuModel) Reset() {
	*x = ListVMGpuModelsResponse_GpuModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_svc_compute_vm_vm_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVMGpuModelsResponse_GpuModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVMGpuModelsResponse_GpuModel) ProtoMessage() {}

func (x *ListVMGpuModelsResponse_GpuModel) ProtoReflect() protoreflect.Message {
	mi := &file_svc_compute_vm_vm_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVMGpuModelsResponse_GpuModel.ProtoReflect.Descriptor instead.
func (*ListVMGpuModelsResponse_GpuModel) Descriptor() ([]byte, []int) {
	return file_svc_compute_vm_vm_proto_rawDescGZIP(), []int{39, 0}
}

func (x *ListVMGpuModelsResponse_GpuModel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ListVMGpuModelsResponse_GpuModel) GetVendorName() string {
	if x != nil {
		return x.VendorName
	}
	return ""
}

func (x *ListVMGpuModelsResponse_GpuModel) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ListVMGpuModelsResponse_GpuModel) GetMemoryGib() int32 {
	if x != nil {
		return x.MemoryGib
	}
	return 0
}

var File_svc_compute_vm_vm_proto protoreflect.FileDescriptor

var file_svc_compute_vm_vm_proto_rawDesc = []byte{
	0x0a, 0x17, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x6d,
	0x2f, 0x76, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74,
	0x79, 0x70, 0x65, 0x2f, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x6d, 0x2f, 0x76, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2, 0x0c, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e,
	0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x57,
	0x0a, 0x0e, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x73, 0x68,
	0x4b, 0x65, 0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x73, 0x68, 0x4b, 0x65,
	0x79, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x73, 0x73, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x62,
	0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x12, 0x30, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x47, 0x69, 0x62, 0x12, 0x17, 0x0a, 0x04, 0x67, 0x70, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x67, 0x70, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x70,
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0xaa, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x67, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x04, 0x6e, 0x69,
	0x63, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4e,
	0x49, 0x43, 0x52, 0x04, 0x6e, 0x69, 0x63, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x14,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x73,
	0x12, 0x4e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x4c, 0x0a, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x70, 0x75, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x74, 0x74,
	0x6c, 0x12, 0x4c, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x52,
	0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x1a,
	0x7c, 0x0a, 0x03, 0x4e, 0x49, 0x43, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x73, 0x1a, 0x3b, 0x0a,
	0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x0b, 0x43, 0x70,
	0x75, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x72, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65,
	0x61, 0x64, 0x73, 0x22, 0x78, 0x0a, 0x0c, 0x53, 0x73, 0x68, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43,
	0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x53, 0x48, 0x5f, 0x4b, 0x45, 0x59, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x42, 0x0c, 0x0a,
	0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x50, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x52, 0x02, 0x76, 0x6d, 0x22, 0x4e, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x22, 0x3c, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x03, 0x56, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x52, 0x03, 0x56, 0x4d, 0x73, 0x22, 0x78, 0x0a, 0x13, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73, 0x69,
	0x7a, 0x65, 0x47, 0x69, 0x62, 0x22, 0x16, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56,
	0x4d, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x75, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x63, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x63, 0x70, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x67, 0x69, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x47, 0x69, 0x62, 0x22, 0x40, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x76, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x76, 0x6d, 0x22, 0x43, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x46, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69,
	0x73, 0x6b, 0x73, 0x22, 0x5e, 0x0a, 0x18, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x76,
	0x6d, 0x49, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x49, 0x0a, 0x18, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3f, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x0d,
	0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x10, 0x0a, 0x0e,
	0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x43,
	0x0a, 0x12, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x15, 0x0a, 0x13, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x0a, 0x0f, 0x52, 0x65,
	0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x12, 0x0a, 0x10,
	0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x3d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xff, 0x05, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2c, 0x0a, 0x02, 0x56, 0x4d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x4d, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x56, 0x4d, 0x12,
	0x3d, 0x0a, 0x0d, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x76, 0x63, 0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x48,
	0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61,
	0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x63, 0x70,
	0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x48, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x72, 0x12, 0x4c, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72,
	0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0a, 0x67, 0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x46, 0x0a,
	0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x4a, 0x0a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x69, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48,
	0x72, 0x12, 0x4e, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48,
	0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72,
	0x12, 0x3f, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48,
	0x72, 0x22, 0x30, 0x0a, 0x0f, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x4d, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x41, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x4d, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x66, 0x0a, 0x10,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56,
	0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12,
	0x19, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x99, 0x0e, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56,
	0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a,
	0x91, 0x0d, 0x0a, 0x0d, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x29, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x70,
	0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x67, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0a, 0x67, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x17, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x56, 0x63, 0x70, 0x75, 0x50, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x12, 0x39, 0x0a, 0x17, 0x6d, 0x61,
	0x78, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x13, 0x6d, 0x61, 0x78, 0x56, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x47, 0x69, 0x62, 0x12, 0x2c, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x63, 0x70,
	0x75, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x67, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72,
	0x47, 0x70, 0x75, 0x12, 0x2c, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x67, 0x70, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x56, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x47, 0x70,
	0x75, 0x12, 0x3d, 0x0a, 0x0d, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x68, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x76, 0x63, 0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72,
	0x12, 0x48, 0x0a, 0x13, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x47, 0x69, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x70,
	0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x67, 0x70, 0x75,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x51, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x14, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x47, 0x69, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x70,
	0x76, 0x34, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x70,
	0x76, 0x34, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x63, 0x70, 0x75, 0x46, 0x72,
	0x65, 0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x63, 0x70, 0x75,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x32, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69,
	0x62, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x46,
	0x72, 0x65, 0x65, 0x12, 0x36, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x46, 0x72, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x6d,
	0x61, 0x78, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x47, 0x70, 0x75, 0x46, 0x72,
	0x65, 0x65, 0x12, 0x29, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x70, 0x75, 0x5f,
	0x66, 0x72, 0x65, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x70, 0x75, 0x46, 0x72, 0x65, 0x65, 0x12, 0x34, 0x0a,
	0x14, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x69, 0x62,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x11, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x69, 0x62, 0x46,
	0x72, 0x65, 0x65, 0x12, 0x38, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x69, 0x62, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1e, 0x0a,
	0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x56, 0x63, 0x70, 0x75, 0x12, 0x29, 0x0a,
	0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x12, 0x6b, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x73, 0x1a, 0xab, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x76, 0x63,
	0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x76, 0x63,
	0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x48, 0x0a, 0x13, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x48, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x67, 0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72,
	0x12, 0x51, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x65, 0x72, 0x6d, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54,
	0x65, 0x72, 0x6d, 0x22, 0x1c, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x80, 0x0b, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x68, 0x0a, 0x0d, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x4d, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0xf6, 0x09, 0x0a, 0x0d,
	0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a,
	0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x63, 0x70, 0x75, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x67, 0x70, 0x75, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0a, 0x67, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x17, 0x6d,
	0x69, 0x6e, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x56, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x12, 0x39, 0x0a, 0x17, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x63,
	0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69,
	0x62, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x56, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69,
	0x62, 0x12, 0x2c, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65,
	0x72, 0x5f, 0x67, 0x70, 0x75, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x56, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x47, 0x70, 0x75, 0x12,
	0x2c, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x65, 0x72, 0x5f,
	0x67, 0x70, 0x75, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x56, 0x63, 0x70, 0x75, 0x50, 0x65, 0x72, 0x47, 0x70, 0x75, 0x12, 0x3d, 0x0a,
	0x0d, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0b, 0x76, 0x63, 0x70, 0x75, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x48, 0x0a, 0x13,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x68, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x3b, 0x0a, 0x0c, 0x67, 0x70, 0x75, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d,
	0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x67, 0x70, 0x75, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x48, 0x72, 0x12, 0x51, 0x0a, 0x18, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x14, 0x6d, 0x69, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x69, 0x62, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69,
	0x6d, 0x61, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x63, 0x70,
	0x75, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x56, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x65, 0x12, 0x2b,
	0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x63, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0d, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x56, 0x63, 0x70, 0x75, 0x46, 0x72, 0x65, 0x65, 0x12, 0x32, 0x0a, 0x13, 0x6d,
	0x61, 0x78, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x10, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x36, 0x0a, 0x15, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f,
	0x67, 0x69, 0x62, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x47, 0x69, 0x62, 0x46, 0x72, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x67,
	0x70, 0x75, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x47, 0x70, 0x75, 0x46, 0x72, 0x65, 0x65, 0x12, 0x29,
	0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x70, 0x75, 0x5f, 0x66, 0x72, 0x65, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x47, 0x70, 0x75, 0x46, 0x72, 0x65, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x6d, 0x61, 0x78,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x66, 0x72, 0x65,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x6d, 0x61,
	0x78, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x47, 0x69, 0x62, 0x46, 0x72, 0x65, 0x65, 0x12,
	0x38, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x67, 0x69, 0x62, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x47, 0x69, 0x62, 0x46, 0x72, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x08, 0x6d, 0x69, 0x6e,
	0x5f, 0x76, 0x63, 0x70, 0x75, 0x18, 0x17, 0x20, 0x01, 0x28, 0x01, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x56, 0x63, 0x70, 0x75, 0x12, 0x29, 0x0a, 0x0e, 0x6d, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x47, 0x69, 0x62, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x95, 0x04, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x52, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x35, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x73, 0x1a, 0xa2, 0x03, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x70,
	0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1e, 0x0a, 0x08,
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x62, 0x12, 0x71, 0x0a, 0x12,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x11, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x1a,
	0x68, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x62, 0x0a, 0x18, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65,
	0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0x82, 0x0a,
	0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0xff, 0x08, 0x0a, 0x0c, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x03, 0xe0, 0x41, 0x02, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x10, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x0f, 0x72, 0x65, 0x6e, 0x65, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x12, 0x7a, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x4d,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x52, 0x0f, 0x64,
	0x69, 0x73, 0x6b, 0x50, 0x6f, 0x6f, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x73,
	0x0a, 0x0f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4a, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75,
	0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x48, 0x72, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0d, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x68, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x20, 0x0a,
	0x09, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x08, 0x69, 0x70, 0x76, 0x34, 0x46, 0x72, 0x65, 0x65, 0x1a,
	0x8d, 0x02, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x6d, 0x0a, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x48, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x56, 0x4d,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x3f, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x67, 0x69,
	0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x44,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x47, 0x69, 0x62, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x12, 0x47, 0x0a, 0x15, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x5f, 0x67, 0x69, 0x62, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x12, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x47, 0x69, 0x62, 0x50, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72, 0x1a,
	0x9e, 0x01, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x72, 0x12, 0x5b, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x47, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x61, 0x74,
	0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x2e, 0x56, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x2f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x68, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x48, 0x72,
	0x22, 0x5d, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4c, 0x4f, 0x43,
	0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x22,
	0x80, 0x01, 0x0a, 0x0b, 0x56, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1c, 0x0a, 0x18, 0x56, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x56, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4d, 0x45,
	0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x10, 0x03, 0x22, 0x18, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x47, 0x70, 0x75, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xff, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0a, 0x67, 0x70, 0x75, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x70, 0x75, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x09, 0x67, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x1a, 0x8d,
	0x01, 0x0a, 0x08, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x24, 0x0a, 0x0b, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x67, 0x69, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x47, 0x69, 0x62, 0x22, 0x8d,
	0x01, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x57,
	0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56,
	0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x4c, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x22, 0x49, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75,
	0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x70, 0x61,
	0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x6e, 0x0a, 0x1b, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1e, 0x0a, 0x1c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x05, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x24,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x03, 0xe0,
	0x41, 0x02, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x3f, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7d, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12,
	0x3b, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x22, 0x8e, 0x01, 0x0a,
	0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d,
	0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x22, 0x1b, 0x0a,
	0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x1b, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x76, 0x6d, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x87, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x76, 0x6d, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12,
	0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x4e, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x5d, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x40, 0x0a, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x22, 0x8f, 0x01, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x05, 0x76, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x76,
	0x6d, 0x49, 0x64, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x7c, 0x0a, 0x1a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x13,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22,
	0x1d, 0x0a, 0x1b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7c,
	0x0a, 0x1a, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x17,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb0, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x03, 0x74, 0x74,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x32, 0x8e, 0x3d, 0x0a, 0x09, 0x56, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0xaa, 0x01, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x4d, 0x73, 0x12, 0x24, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0xba, 0x47, 0x23, 0x0a,
	0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x73, 0x12, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0x08, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x4d, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2d, 0x76, 0x6d, 0x73, 0x12, 0xb7, 0x01,
	0x0a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x24, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0xba, 0x47, 0x34, 0x0a, 0x10, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2a, 0x08, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x4d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x3a, 0x01, 0x2a, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d, 0x12, 0x9b, 0x01, 0x0a, 0x05, 0x47, 0x65, 0x74, 0x56,
	0x4d, 0x12, 0x21, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x4d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0xba, 0x47, 0x1e, 0x0a, 0x10, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12,
	0x03, 0x47, 0x65, 0x74, 0x2a, 0x05, 0x47, 0x65, 0x74, 0x56, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x24, 0x12, 0x22, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x9f, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d,
	0x73, 0x12, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x4d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0xba, 0x47,
	0x21, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x4d, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d, 0x73, 0x12, 0xb7, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x56, 0x4d, 0x12, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0xba, 0x47, 0x26, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x07, 0x4d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2a, 0x09, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x56, 0x4d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f,
	0x72, 0x12, 0xb1, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d, 0x12, 0x24,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f,
	0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0xba, 0x47, 0x24,
	0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x06, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x2a, 0x08, 0x52, 0x65, 0x62, 0x6f,
	0x6f, 0x74, 0x56, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0xab, 0x01, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56,
	0x4d, 0x12, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x55, 0xba, 0x47,
	0x22, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x73, 0x12, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x2a, 0x07, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x56, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x22, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0xa5, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x12, 0x22,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0xba, 0x47, 0x20, 0x0a, 0x10, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x04,
	0x53, 0x74, 0x6f, 0x70, 0x2a, 0x06, 0x53, 0x74, 0x6f, 0x70, 0x56, 0x4d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x74, 0x6f, 0x70, 0x12, 0xc3, 0x01, 0x0a, 0x0b,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x12, 0x27, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x61,
	0xba, 0x47, 0x2a, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x09, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x2a, 0x0b, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x2e, 0x22, 0x2c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76,
	0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x12, 0xbf, 0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x4d, 0x12,
	0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x63,
	0xba, 0x47, 0x2e, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x0f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x76,
	0x69, 0x61, 0x20, 0x56, 0x4e, 0x43, 0x2a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x56,
	0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x12, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x12, 0xc7, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d,
	0x12, 0x24, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x56, 0x4d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0xba,
	0x47, 0x3a, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x1c, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x76, 0x43, 0x50,
	0x55, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x20, 0x6f, 0x66, 0x20,
	0x56, 0x4d, 0x2a, 0x08, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2b, 0x22, 0x29, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0xcf, 0x01,
	0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x27, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x6d, 0xba, 0x47, 0x3a, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x69,
	0x73, 0x6b, 0x73, 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x56, 0x4d, 0x2a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x12, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12,
	0xd4, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x56, 0x4d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0xba, 0x47, 0x3d, 0x0a, 0x10, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x20, 0x56, 0x4d, 0x20, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x2a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12,
	0x15, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2d,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x2e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a,
	0xba, 0x47, 0x3a, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x6d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0xcc, 0x02, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x32, 0x12, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x32, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x32, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd1, 0x01, 0xba, 0x47, 0xae, 0x01, 0x0a, 0x10, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x20, 0x76, 0x32, 0x1a, 0x6c, 0x54, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x66, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x20, 0x6f, 0x66, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2d,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x68, 0x61, 0x73, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x20, 0x61, 0x6e, 0x64, 0x20, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x32, 0x50, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19,
	0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x2d, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2d, 0x32, 0x12, 0xcb, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x57,
	0xba, 0x47, 0x38, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63,
	0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x20, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d,
	0x44, 0x61, 0x74, 0x61, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x16, 0x12, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0xbf, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x4d, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x2b, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x4d, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0xba, 0x47, 0x34, 0x0a, 0x10, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x20, 0x47, 0x50, 0x55, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x4d, 0x47, 0x70, 0x75, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x67,
	0x70, 0x75, 0x2d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0xe9, 0x01, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0xba, 0x47, 0x41, 0x0a, 0x10, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x56,
	0x4d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0xee, 0x01, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x71, 0xba, 0x47, 0x41, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x17, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x56, 0x4d, 0x20, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x2a,
	0x25, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xdf, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x2e, 0x6f,
	0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0xba, 0x47, 0x3b,
	0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e,
	0x65, 0x73, 0x12, 0x14, 0x47, 0x65, 0x74, 0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20,
	0x56, 0x4d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x27, 0x12, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xe4, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x6a, 0xba, 0x47, 0x3f, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61,
	0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x16, 0x4c, 0x69, 0x73, 0x74,
	0x20, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x20, 0x56, 0x4d, 0x20, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x73, 0x2a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56,
	0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12,
	0xee, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x56, 0x4d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0xba,
	0x47, 0x41, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x73, 0x12, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x20, 0x56, 0x4d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x22, 0x25, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0xd0, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64,
	0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5c, 0xba, 0x47, 0x2f, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x12, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x2a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a,
	0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69,
	0x73, 0x6b, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d,
	0x44, 0x69, 0x73, 0x6b, 0x12, 0x28, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x56, 0x4d, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0xba, 0x47, 0x34, 0x0a, 0x10,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x12, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x61, 0x20, 0x56, 0x4d, 0x27, 0x73, 0x20,
	0x64, 0x69, 0x73, 0x6b, 0x2a, 0x0c, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x56, 0x4d, 0x44, 0x69,
	0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x32, 0x28, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x12, 0xa4, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x12, 0x25, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75,
	0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x48, 0xba, 0x47, 0x1e, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x0a, 0x4c, 0x69, 0x73,
	0x74, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x12, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x23, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6f, 0x72, 0x67,
	0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x4b, 0xba, 0x47, 0x1c, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x0a, 0x4c, 0x69,
	0x73, 0x74, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2a, 0x07, 0x47, 0x65, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xd2, 0x01,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x5e, 0xba, 0x47, 0x2f, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x64,
	0x69, 0x73, 0x6b, 0x2a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x2a, 0x24, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0xde, 0x01, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75,
	0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6a, 0xba, 0x47, 0x35, 0x0a, 0x05, 0x44, 0x69,
	0x73, 0x6b, 0x73, 0x12, 0x19, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x20, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x56, 0x4d, 0x2a, 0x11,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x32, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x12, 0xe0, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e,
	0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x69, 0x73, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6c, 0xba, 0x47, 0x37, 0x0a, 0x05, 0x44,
	0x69, 0x73, 0x6b, 0x73, 0x12, 0x1b, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x20, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x56,
	0x4d, 0x2a, 0x11, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2c, 0x1a, 0x2a, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0xe4, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2e, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6d,
	0xba, 0x47, 0x31, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x20, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x2a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0xdc, 0x01,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x12, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x68, 0xba, 0x47, 0x2f, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x73, 0x2a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0xe2, 0x01, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x69, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6b, 0xba, 0x47, 0x32, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73,
	0x12, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x2a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x30, 0x2a, 0x2e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73,
	0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x73, 0x12, 0xc1, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b,
	0x12, 0x26, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x62, 0xba, 0x47, 0x2c, 0x0a, 0x05, 0x44, 0x69, 0x73, 0x6b, 0x73, 0x12, 0x17, 0x52,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x20, 0x44, 0x69, 0x73, 0x6b, 0x20, 0x74, 0x6f, 0x20, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2a, 0x0a, 0x52, 0x65, 0x76, 0x65, 0x72, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x22, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x74, 0x12, 0x81, 0x02, 0x0a, 0x13, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x2e,
	0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x86, 0x01, 0xba, 0x47, 0x44, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20,
	0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20,
	0x74, 0x6f, 0x20, 0x56, 0x4d, 0x2a, 0x13, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39,
	0x32, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x76, 0x6d, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2d, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x2f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x12, 0x81, 0x02, 0x0a, 0x13, 0x44, 0x65,
	0x74, 0x61, 0x63, 0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x30, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0xba, 0x47, 0x44, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x1b, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x20, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x20, 0x74, 0x6f, 0x20, 0x56, 0x4d, 0x2a, 0x13, 0x44, 0x65, 0x74, 0x61, 0x63,
	0x68, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x39, 0x32, 0x37, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x6d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x2d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x63, 0x68, 0x12, 0xe1, 0x01,
	0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2c, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2d, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x70, 0xba, 0x47, 0x38, 0x0a, 0x10, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x73, 0x12, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x56,
	0x4d, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x4d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x22, 0x2a, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d,
	0x2f, 0x76, 0x6d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0xef, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6f, 0x72, 0x67, 0x2e, 0x63,
	0x75, 0x64, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x4d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x78, 0xba, 0x47, 0x3d, 0x0a, 0x10,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x73,
	0x12, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x56, 0x4d, 0x20, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x2a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x4d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x32, 0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x2f,
	0x76, 0x6d, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x2d, 0x74,
	0x69, 0x6d, 0x65, 0x42, 0x3c, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x43, 0x75, 0x64, 0x6f, 0x56, 0x65, 0x6e, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2f, 0x63,
	0x75, 0x64, 0x6f, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2d, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x2f, 0x73, 0x76, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_svc_compute_vm_vm_proto_rawDescOnce sync.Once
	file_svc_compute_vm_vm_proto_rawDescData = file_svc_compute_vm_vm_proto_rawDesc
)

func file_svc_compute_vm_vm_proto_rawDescGZIP() []byte {
	file_svc_compute_vm_vm_proto_rawDescOnce.Do(func() {
		file_svc_compute_vm_vm_proto_rawDescData = protoimpl.X.CompressGZIP(file_svc_compute_vm_vm_proto_rawDescData)
	})
	return file_svc_compute_vm_vm_proto_rawDescData
}

var file_svc_compute_vm_vm_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_svc_compute_vm_vm_proto_msgTypes = make([]protoimpl.MessageInfo, 88)
var file_svc_compute_vm_vm_proto_goTypes = []any{
	(CreateVMRequest_SshKeySource)(0),                                 // 0: org.cudo.compute.v1.CreateVMRequest.SshKeySource
	(ListVMDataCentersResponse_VMDataCenter_StorageClass)(0),          // 1: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.StorageClass
	(ListVMDataCentersResponse_VMDataCenter_VRouterSize)(0),           // 2: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.VRouterSize
	(*CreateVMRequest)(nil),                                           // 3: org.cudo.compute.v1.CreateVMRequest
	(*CreateVMResponse)(nil),                                          // 4: org.cudo.compute.v1.CreateVMResponse
	(*ListVMsRequest)(nil),                                            // 5: org.cudo.compute.v1.ListVMsRequest
	(*ListVMsResponse)(nil),                                           // 6: org.cudo.compute.v1.ListVMsResponse
	(*ResizeVMDiskRequest)(nil),                                       // 7: org.cudo.compute.v1.ResizeVMDiskRequest
	(*ResizeVMDiskResponse)(nil),                                      // 8: org.cudo.compute.v1.ResizeVMDiskResponse
	(*ResizeVMRequest)(nil),                                           // 9: org.cudo.compute.v1.ResizeVMRequest
	(*ResizeVMResponse)(nil),                                          // 10: org.cudo.compute.v1.ResizeVMResponse
	(*ListVMDisksRequest)(nil),                                        // 11: org.cudo.compute.v1.ListVMDisksRequest
	(*ListVMDisksResponse)(nil),                                       // 12: org.cudo.compute.v1.ListVMDisksResponse
	(*AttachStorageDiskRequest)(nil),                                  // 13: org.cudo.compute.v1.AttachStorageDiskRequest
	(*AttachStorageDiskResponse)(nil),                                 // 14: org.cudo.compute.v1.AttachStorageDiskResponse
	(*DetachStorageDiskRequest)(nil),                                  // 15: org.cudo.compute.v1.DetachStorageDiskRequest
	(*DetachStorageDiskResponse)(nil),                                 // 16: org.cudo.compute.v1.DetachStorageDiskResponse
	(*StartVMRequest)(nil),                                            // 17: org.cudo.compute.v1.StartVMRequest
	(*StartVMResponse)(nil),                                           // 18: org.cudo.compute.v1.StartVMResponse
	(*StopVMRequest)(nil),                                             // 19: org.cudo.compute.v1.StopVMRequest
	(*StopVMResponse)(nil),                                            // 20: org.cudo.compute.v1.StopVMResponse
	(*TerminateVMRequest)(nil),                                        // 21: org.cudo.compute.v1.TerminateVMRequest
	(*TerminateVMResponse)(nil),                                       // 22: org.cudo.compute.v1.TerminateVMResponse
	(*RebootVMRequest)(nil),                                           // 23: org.cudo.compute.v1.RebootVMRequest
	(*RebootVMResponse)(nil),                                          // 24: org.cudo.compute.v1.RebootVMResponse
	(*GetVMRequest)(nil),                                              // 25: org.cudo.compute.v1.GetVMRequest
	(*GetVMResponse)(nil),                                             // 26: org.cudo.compute.v1.GetVMResponse
	(*CountVMsRequest)(nil),                                           // 27: org.cudo.compute.v1.CountVMsRequest
	(*CountVMsResponse)(nil),                                          // 28: org.cudo.compute.v1.CountVMsResponse
	(*MonitorVMRequest)(nil),                                          // 29: org.cudo.compute.v1.MonitorVMRequest
	(*MonitorVMResponse)(nil),                                         // 30: org.cudo.compute.v1.MonitorVMResponse
	(*ConnectVMRequest)(nil),                                          // 31: org.cudo.compute.v1.ConnectVMRequest
	(*ConnectVMResponse)(nil),                                         // 32: org.cudo.compute.v1.ConnectVMResponse
	(*ListVMMachineTypesRequest)(nil),                                 // 33: org.cudo.compute.v1.ListVMMachineTypesRequest
	(*ListVMMachineTypesResponse)(nil),                                // 34: org.cudo.compute.v1.ListVMMachineTypesResponse
	(*ListVMMachineTypes2Request)(nil),                                // 35: org.cudo.compute.v1.ListVMMachineTypes2Request
	(*ListVMMachineTypes2Response)(nil),                               // 36: org.cudo.compute.v1.ListVMMachineTypes2Response
	(*ListPublicVMImagesRequest)(nil),                                 // 37: org.cudo.compute.v1.ListPublicVMImagesRequest
	(*ListPublicVMImagesResponse)(nil),                                // 38: org.cudo.compute.v1.ListPublicVMImagesResponse
	(*ListVMDataCentersRequest)(nil),                                  // 39: org.cudo.compute.v1.ListVMDataCentersRequest
	(*ListVMDataCentersResponse)(nil),                                 // 40: org.cudo.compute.v1.ListVMDataCentersResponse
	(*ListVMGpuModelsRequest)(nil),                                    // 41: org.cudo.compute.v1.ListVMGpuModelsRequest
	(*ListVMGpuModelsResponse)(nil),                                   // 42: org.cudo.compute.v1.ListVMGpuModelsResponse
	(*CreatePrivateVMImageRequest)(nil),                               // 43: org.cudo.compute.v1.CreatePrivateVMImageRequest
	(*CreatePrivateVMImageResponse)(nil),                              // 44: org.cudo.compute.v1.CreatePrivateVMImageResponse
	(*DeletePrivateVMImageRequest)(nil),                               // 45: org.cudo.compute.v1.DeletePrivateVMImageRequest
	(*DeletePrivateVMImageResponse)(nil),                              // 46: org.cudo.compute.v1.DeletePrivateVMImageResponse
	(*ListPrivateVMImagesRequest)(nil),                                // 47: org.cudo.compute.v1.ListPrivateVMImagesRequest
	(*GetPrivateVMImageRequest)(nil),                                  // 48: org.cudo.compute.v1.GetPrivateVMImageRequest
	(*GetPrivateVMImageResponse)(nil),                                 // 49: org.cudo.compute.v1.GetPrivateVMImageResponse
	(*ListPrivateVMImagesResponse)(nil),                               // 50: org.cudo.compute.v1.ListPrivateVMImagesResponse
	(*UpdatePrivateVMImageRequest)(nil),                               // 51: org.cudo.compute.v1.UpdatePrivateVMImageRequest
	(*UpdatePrivateVMImageResponse)(nil),                              // 52: org.cudo.compute.v1.UpdatePrivateVMImageResponse
	(*ListDisksRequest)(nil),                                          // 53: org.cudo.compute.v1.ListDisksRequest
	(*ListDisksResponse)(nil),                                         // 54: org.cudo.compute.v1.ListDisksResponse
	(*GetDiskRequest)(nil),                                            // 55: org.cudo.compute.v1.GetDiskRequest
	(*GetDiskResponse)(nil),                                           // 56: org.cudo.compute.v1.GetDiskResponse
	(*CreateStorageDiskRequest)(nil),                                  // 57: org.cudo.compute.v1.CreateStorageDiskRequest
	(*CreateStorageDiskResponse)(nil),                                 // 58: org.cudo.compute.v1.CreateStorageDiskResponse
	(*DeleteStorageDiskRequest)(nil),                                  // 59: org.cudo.compute.v1.DeleteStorageDiskRequest
	(*DeleteStorageDiskResponse)(nil),                                 // 60: org.cudo.compute.v1.DeleteStorageDiskResponse
	(*CreateDiskSnapshotRequest)(nil),                                 // 61: org.cudo.compute.v1.CreateDiskSnapshotRequest
	(*CreateDiskSnapshotResponse)(nil),                                // 62: org.cudo.compute.v1.CreateDiskSnapshotResponse
	(*RevertDiskRequest)(nil),                                         // 63: org.cudo.compute.v1.RevertDiskRequest
	(*RevertDiskResponse)(nil),                                        // 64: org.cudo.compute.v1.RevertDiskResponse
	(*ListDiskSnapshotsRequest)(nil),                                  // 65: org.cudo.compute.v1.ListDiskSnapshotsRequest
	(*ListDiskSnapshotsResponse)(nil),                                 // 66: org.cudo.compute.v1.ListDiskSnapshotsResponse
	(*DeleteDiskSnapshotRequest)(nil),                                 // 67: org.cudo.compute.v1.DeleteDiskSnapshotRequest
	(*DeleteDiskSnapshotResponse)(nil),                                // 68: org.cudo.compute.v1.DeleteDiskSnapshotResponse
	(*AttachSecurityGroupRequest)(nil),                                // 69: org.cudo.compute.v1.AttachSecurityGroupRequest
	(*AttachSecurityGroupResponse)(nil),                               // 70: org.cudo.compute.v1.AttachSecurityGroupResponse
	(*DetachSecurityGroupRequest)(nil),                                // 71: org.cudo.compute.v1.DetachSecurityGroupRequest
	(*DetachSecurityGroupResponse)(nil),                               // 72: org.cudo.compute.v1.DetachSecurityGroupResponse
	(*UpdateVMMetadataRequest)(nil),                                   // 73: org.cudo.compute.v1.UpdateVMMetadataRequest
	(*UpdateVMMetadataResponse)(nil),                                  // 74: org.cudo.compute.v1.UpdateVMMetadataResponse
	(*UpdateVMExpireTimeRequest)(nil),                                 // 75: org.cudo.compute.v1.UpdateVMExpireTimeRequest
	(*UpdateVMExpireTimeResponse)(nil),                                // 76: org.cudo.compute.v1.UpdateVMExpireTimeResponse
	(*CreateVMRequest_NIC)(nil),                                       // 77: org.cudo.compute.v1.CreateVMRequest.NIC
	nil,                                                               // 78: org.cudo.compute.v1.CreateVMRequest.MetadataEntry
	(*CreateVMRequest_CpuTopology)(nil),                               // 79: org.cudo.compute.v1.CreateVMRequest.CpuTopology
	(*ListVMMachineTypesResponse_VMMachineType)(nil),                  // 80: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType
	(*ListVMMachineTypesResponse_VMMachineType_MachineTypePrice)(nil), // 81: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.MachineTypePrice
	(*ListVMMachineTypes2Response_VMMachineType)(nil),                 // 82: org.cudo.compute.v1.ListVMMachineTypes2Response.VMMachineType
	(*ListPublicVMImagesResponse_Image)(nil),                          // 83: org.cudo.compute.v1.ListPublicVMImagesResponse.Image
	(*ListPublicVMImagesResponse_Image_Package)(nil),                  // 84: org.cudo.compute.v1.ListPublicVMImagesResponse.Image.Package
	(*ListVMDataCentersResponse_VMDataCenter)(nil),                    // 85: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter
	(*ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr)(nil), // 86: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.DiskStoragePriceHr
	(*ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr)(nil),     // 87: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.NetworkPriceHr
	(*ListVMGpuModelsResponse_GpuModel)(nil),                          // 88: org.cudo.compute.v1.ListVMGpuModelsResponse.GpuModel
	nil,                                                               // 89: org.cudo.compute.v1.UpdateVMMetadataRequest.MetadataEntry
	nil,                                                               // 90: org.cudo.compute.v1.UpdateVMMetadataResponse.MetadataEntry
	(*Disk)(nil),                                                      // 91: org.cudo.compute.v1.Disk
	(*timestamppb.Timestamp)(nil),                                     // 92: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                                       // 93: google.protobuf.Duration
	(CommitmentTerm)(0),                                               // 94: org.cudo.compute.v1.CommitmentTerm
	(*VM)(nil),                                                        // 95: org.cudo.compute.v1.VM
	(*decimal.Decimal)(nil),                                           // 96: google.type.Decimal
	(*VMMonitoringItem)(nil),                                          // 97: org.cudo.compute.v1.VMMonitoringItem
	(*PrivateImage)(nil),                                              // 98: org.cudo.compute.v1.PrivateImage
	(*Snapshot)(nil),                                                  // 99: org.cudo.compute.v1.Snapshot
}
var file_svc_compute_vm_vm_proto_depIdxs = []int32{
	0,   // 0: org.cudo.compute.v1.CreateVMRequest.ssh_key_source:type_name -> org.cudo.compute.v1.CreateVMRequest.SshKeySource
	91,  // 1: org.cudo.compute.v1.CreateVMRequest.boot_disk:type_name -> org.cudo.compute.v1.Disk
	77,  // 2: org.cudo.compute.v1.CreateVMRequest.nics:type_name -> org.cudo.compute.v1.CreateVMRequest.NIC
	78,  // 3: org.cudo.compute.v1.CreateVMRequest.metadata:type_name -> org.cudo.compute.v1.CreateVMRequest.MetadataEntry
	79,  // 4: org.cudo.compute.v1.CreateVMRequest.topology:type_name -> org.cudo.compute.v1.CreateVMRequest.CpuTopology
	92,  // 5: org.cudo.compute.v1.CreateVMRequest.expire_time:type_name -> google.protobuf.Timestamp
	93,  // 6: org.cudo.compute.v1.CreateVMRequest.ttl:type_name -> google.protobuf.Duration
	94,  // 7: org.cudo.compute.v1.CreateVMRequest.commitment_term:type_name -> org.cudo.compute.v1.CommitmentTerm
	95,  // 8: org.cudo.compute.v1.CreateVMResponse.vm:type_name -> org.cudo.compute.v1.VM
	95,  // 9: org.cudo.compute.v1.ListVMsResponse.VMs:type_name -> org.cudo.compute.v1.VM
	95,  // 10: org.cudo.compute.v1.ResizeVMResponse.vm:type_name -> org.cudo.compute.v1.VM
	91,  // 11: org.cudo.compute.v1.ListVMDisksResponse.disks:type_name -> org.cudo.compute.v1.Disk
	95,  // 12: org.cudo.compute.v1.GetVMResponse.VM:type_name -> org.cudo.compute.v1.VM
	96,  // 13: org.cudo.compute.v1.GetVMResponse.vcpu_price_hr:type_name -> google.type.Decimal
	96,  // 14: org.cudo.compute.v1.GetVMResponse.total_vcpu_price_hr:type_name -> google.type.Decimal
	96,  // 15: org.cudo.compute.v1.GetVMResponse.memory_gib_price_hr:type_name -> google.type.Decimal
	96,  // 16: org.cudo.compute.v1.GetVMResponse.total_memory_price_hr:type_name -> google.type.Decimal
	96,  // 17: org.cudo.compute.v1.GetVMResponse.gpu_price_hr:type_name -> google.type.Decimal
	96,  // 18: org.cudo.compute.v1.GetVMResponse.total_gpu_price_hr:type_name -> google.type.Decimal
	96,  // 19: org.cudo.compute.v1.GetVMResponse.storage_gib_price_hr:type_name -> google.type.Decimal
	96,  // 20: org.cudo.compute.v1.GetVMResponse.total_storage_price_hr:type_name -> google.type.Decimal
	96,  // 21: org.cudo.compute.v1.GetVMResponse.ipv4_price_hr:type_name -> google.type.Decimal
	96,  // 22: org.cudo.compute.v1.GetVMResponse.total_price_hr:type_name -> google.type.Decimal
	97,  // 23: org.cudo.compute.v1.MonitorVMResponse.items:type_name -> org.cudo.compute.v1.VMMonitoringItem
	80,  // 24: org.cudo.compute.v1.ListVMMachineTypesResponse.machine_types:type_name -> org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType
	82,  // 25: org.cudo.compute.v1.ListVMMachineTypes2Response.machine_types:type_name -> org.cudo.compute.v1.ListVMMachineTypes2Response.VMMachineType
	83,  // 26: org.cudo.compute.v1.ListPublicVMImagesResponse.images:type_name -> org.cudo.compute.v1.ListPublicVMImagesResponse.Image
	85,  // 27: org.cudo.compute.v1.ListVMDataCentersResponse.data_centers:type_name -> org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter
	88,  // 28: org.cudo.compute.v1.ListVMGpuModelsResponse.gpu_models:type_name -> org.cudo.compute.v1.ListVMGpuModelsResponse.GpuModel
	98,  // 29: org.cudo.compute.v1.CreatePrivateVMImageResponse.image:type_name -> org.cudo.compute.v1.PrivateImage
	98,  // 30: org.cudo.compute.v1.GetPrivateVMImageResponse.image:type_name -> org.cudo.compute.v1.PrivateImage
	98,  // 31: org.cudo.compute.v1.ListPrivateVMImagesResponse.images:type_name -> org.cudo.compute.v1.PrivateImage
	91,  // 32: org.cudo.compute.v1.ListDisksResponse.disks:type_name -> org.cudo.compute.v1.Disk
	91,  // 33: org.cudo.compute.v1.GetDiskResponse.disk:type_name -> org.cudo.compute.v1.Disk
	99,  // 34: org.cudo.compute.v1.GetDiskResponse.snapshots:type_name -> org.cudo.compute.v1.Snapshot
	91,  // 35: org.cudo.compute.v1.CreateStorageDiskRequest.disk:type_name -> org.cudo.compute.v1.Disk
	99,  // 36: org.cudo.compute.v1.ListDiskSnapshotsResponse.snapshots:type_name -> org.cudo.compute.v1.Snapshot
	89,  // 37: org.cudo.compute.v1.UpdateVMMetadataRequest.metadata:type_name -> org.cudo.compute.v1.UpdateVMMetadataRequest.MetadataEntry
	90,  // 38: org.cudo.compute.v1.UpdateVMMetadataResponse.metadata:type_name -> org.cudo.compute.v1.UpdateVMMetadataResponse.MetadataEntry
	92,  // 39: org.cudo.compute.v1.UpdateVMExpireTimeRequest.expire_time:type_name -> google.protobuf.Timestamp
	93,  // 40: org.cudo.compute.v1.UpdateVMExpireTimeRequest.ttl:type_name -> google.protobuf.Duration
	92,  // 41: org.cudo.compute.v1.UpdateVMExpireTimeResponse.expire_time:type_name -> google.protobuf.Timestamp
	96,  // 42: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.vcpu_price_hr:type_name -> google.type.Decimal
	96,  // 43: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.memory_gib_price_hr:type_name -> google.type.Decimal
	96,  // 44: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.gpu_price_hr:type_name -> google.type.Decimal
	96,  // 45: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.min_storage_gib_price_hr:type_name -> google.type.Decimal
	96,  // 46: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.ipv4_price_hr:type_name -> google.type.Decimal
	81,  // 47: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.prices:type_name -> org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.MachineTypePrice
	96,  // 48: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.MachineTypePrice.vcpu_price_hr:type_name -> google.type.Decimal
	96,  // 49: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.MachineTypePrice.memory_gib_price_hr:type_name -> google.type.Decimal
	96,  // 50: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.MachineTypePrice.gpu_price_hr:type_name -> google.type.Decimal
	94,  // 51: org.cudo.compute.v1.ListVMMachineTypesResponse.VMMachineType.MachineTypePrice.commitment_term:type_name -> org.cudo.compute.v1.CommitmentTerm
	96,  // 52: org.cudo.compute.v1.ListVMMachineTypes2Response.VMMachineType.vcpu_price_hr:type_name -> google.type.Decimal
	96,  // 53: org.cudo.compute.v1.ListVMMachineTypes2Response.VMMachineType.memory_gib_price_hr:type_name -> google.type.Decimal
	96,  // 54: org.cudo.compute.v1.ListVMMachineTypes2Response.VMMachineType.gpu_price_hr:type_name -> google.type.Decimal
	96,  // 55: org.cudo.compute.v1.ListVMMachineTypes2Response.VMMachineType.min_storage_gib_price_hr:type_name -> google.type.Decimal
	96,  // 56: org.cudo.compute.v1.ListVMMachineTypes2Response.VMMachineType.ipv4_price_hr:type_name -> google.type.Decimal
	84,  // 57: org.cudo.compute.v1.ListPublicVMImagesResponse.Image.installed_packages:type_name -> org.cudo.compute.v1.ListPublicVMImagesResponse.Image.Package
	86,  // 58: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.disk_pool_pricing:type_name -> org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.DiskStoragePriceHr
	87,  // 59: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.network_pricing:type_name -> org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.NetworkPriceHr
	96,  // 60: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.ipv4_price_hr:type_name -> google.type.Decimal
	1,   // 61: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.DiskStoragePriceHr.storage_class:type_name -> org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.StorageClass
	96,  // 62: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.DiskStoragePriceHr.disk_gib_price_hr:type_name -> google.type.Decimal
	96,  // 63: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.DiskStoragePriceHr.snapshot_gib_price_hr:type_name -> google.type.Decimal
	2,   // 64: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.NetworkPriceHr.size:type_name -> org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.VRouterSize
	96,  // 65: org.cudo.compute.v1.ListVMDataCentersResponse.VMDataCenter.NetworkPriceHr.price_hr:type_name -> google.type.Decimal
	27,  // 66: org.cudo.compute.v1.VMService.CountVMs:input_type -> org.cudo.compute.v1.CountVMsRequest
	3,   // 67: org.cudo.compute.v1.VMService.CreateVM:input_type -> org.cudo.compute.v1.CreateVMRequest
	25,  // 68: org.cudo.compute.v1.VMService.GetVM:input_type -> org.cudo.compute.v1.GetVMRequest
	5,   // 69: org.cudo.compute.v1.VMService.ListVMs:input_type -> org.cudo.compute.v1.ListVMsRequest
	29,  // 70: org.cudo.compute.v1.VMService.MonitorVM:input_type -> org.cudo.compute.v1.MonitorVMRequest
	23,  // 71: org.cudo.compute.v1.VMService.RebootVM:input_type -> org.cudo.compute.v1.RebootVMRequest
	17,  // 72: org.cudo.compute.v1.VMService.StartVM:input_type -> org.cudo.compute.v1.StartVMRequest
	19,  // 73: org.cudo.compute.v1.VMService.StopVM:input_type -> org.cudo.compute.v1.StopVMRequest
	21,  // 74: org.cudo.compute.v1.VMService.TerminateVM:input_type -> org.cudo.compute.v1.TerminateVMRequest
	31,  // 75: org.cudo.compute.v1.VMService.ConnectVM:input_type -> org.cudo.compute.v1.ConnectVMRequest
	9,   // 76: org.cudo.compute.v1.VMService.ResizeVM:input_type -> org.cudo.compute.v1.ResizeVMRequest
	11,  // 77: org.cudo.compute.v1.VMService.ListVMDisks:input_type -> org.cudo.compute.v1.ListVMDisksRequest
	37,  // 78: org.cudo.compute.v1.VMService.ListPublicVMImages:input_type -> org.cudo.compute.v1.ListPublicVMImagesRequest
	33,  // 79: org.cudo.compute.v1.VMService.ListVMMachineTypes:input_type -> org.cudo.compute.v1.ListVMMachineTypesRequest
	35,  // 80: org.cudo.compute.v1.VMService.ListVMMachineTypes2:input_type -> org.cudo.compute.v1.ListVMMachineTypes2Request
	39,  // 81: org.cudo.compute.v1.VMService.ListVMDataCenters:input_type -> org.cudo.compute.v1.ListVMDataCentersRequest
	41,  // 82: org.cudo.compute.v1.VMService.ListVMGpuModels:input_type -> org.cudo.compute.v1.ListVMGpuModelsRequest
	43,  // 83: org.cudo.compute.v1.VMService.CreatePrivateVMImage:input_type -> org.cudo.compute.v1.CreatePrivateVMImageRequest
	45,  // 84: org.cudo.compute.v1.VMService.DeletePrivateVMImage:input_type -> org.cudo.compute.v1.DeletePrivateVMImageRequest
	48,  // 85: org.cudo.compute.v1.VMService.GetPrivateVMImage:input_type -> org.cudo.compute.v1.GetPrivateVMImageRequest
	47,  // 86: org.cudo.compute.v1.VMService.ListPrivateVMImages:input_type -> org.cudo.compute.v1.ListPrivateVMImagesRequest
	51,  // 87: org.cudo.compute.v1.VMService.UpdatePrivateVMImage:input_type -> org.cudo.compute.v1.UpdatePrivateVMImageRequest
	57,  // 88: org.cudo.compute.v1.VMService.CreateStorageDisk:input_type -> org.cudo.compute.v1.CreateStorageDiskRequest
	7,   // 89: org.cudo.compute.v1.VMService.ResizeVMDisk:input_type -> org.cudo.compute.v1.ResizeVMDiskRequest
	53,  // 90: org.cudo.compute.v1.VMService.ListDisks:input_type -> org.cudo.compute.v1.ListDisksRequest
	55,  // 91: org.cudo.compute.v1.VMService.GetDisk:input_type -> org.cudo.compute.v1.GetDiskRequest
	59,  // 92: org.cudo.compute.v1.VMService.DeleteStorageDisk:input_type -> org.cudo.compute.v1.DeleteStorageDiskRequest
	13,  // 93: org.cudo.compute.v1.VMService.AttachStorageDisk:input_type -> org.cudo.compute.v1.AttachStorageDiskRequest
	15,  // 94: org.cudo.compute.v1.VMService.DetachStorageDisk:input_type -> org.cudo.compute.v1.DetachStorageDiskRequest
	61,  // 95: org.cudo.compute.v1.VMService.CreateDiskSnapshot:input_type -> org.cudo.compute.v1.CreateDiskSnapshotRequest
	65,  // 96: org.cudo.compute.v1.VMService.ListDiskSnapshots:input_type -> org.cudo.compute.v1.ListDiskSnapshotsRequest
	67,  // 97: org.cudo.compute.v1.VMService.DeleteDiskSnapshot:input_type -> org.cudo.compute.v1.DeleteDiskSnapshotRequest
	63,  // 98: org.cudo.compute.v1.VMService.RevertDisk:input_type -> org.cudo.compute.v1.RevertDiskRequest
	69,  // 99: org.cudo.compute.v1.VMService.AttachSecurityGroup:input_type -> org.cudo.compute.v1.AttachSecurityGroupRequest
	71,  // 100: org.cudo.compute.v1.VMService.DetachSecurityGroup:input_type -> org.cudo.compute.v1.DetachSecurityGroupRequest
	73,  // 101: org.cudo.compute.v1.VMService.UpdateVMMetadata:input_type -> org.cudo.compute.v1.UpdateVMMetadataRequest
	75,  // 102: org.cudo.compute.v1.VMService.UpdateVMExpireTime:input_type -> org.cudo.compute.v1.UpdateVMExpireTimeRequest
	28,  // 103: org.cudo.compute.v1.VMService.CountVMs:output_type -> org.cudo.compute.v1.CountVMsResponse
	4,   // 104: org.cudo.compute.v1.VMService.CreateVM:output_type -> org.cudo.compute.v1.CreateVMResponse
	26,  // 105: org.cudo.compute.v1.VMService.GetVM:output_type -> org.cudo.compute.v1.GetVMResponse
	6,   // 106: org.cudo.compute.v1.VMService.ListVMs:output_type -> org.cudo.compute.v1.ListVMsResponse
	30,  // 107: org.cudo.compute.v1.VMService.MonitorVM:output_type -> org.cudo.compute.v1.MonitorVMResponse
	24,  // 108: org.cudo.compute.v1.VMService.RebootVM:output_type -> org.cudo.compute.v1.RebootVMResponse
	18,  // 109: org.cudo.compute.v1.VMService.StartVM:output_type -> org.cudo.compute.v1.StartVMResponse
	20,  // 110: org.cudo.compute.v1.VMService.StopVM:output_type -> org.cudo.compute.v1.StopVMResponse
	22,  // 111: org.cudo.compute.v1.VMService.TerminateVM:output_type -> org.cudo.compute.v1.TerminateVMResponse
	32,  // 112: org.cudo.compute.v1.VMService.ConnectVM:output_type -> org.cudo.compute.v1.ConnectVMResponse
	10,  // 113: org.cudo.compute.v1.VMService.ResizeVM:output_type -> org.cudo.compute.v1.ResizeVMResponse
	12,  // 114: org.cudo.compute.v1.VMService.ListVMDisks:output_type -> org.cudo.compute.v1.ListVMDisksResponse
	38,  // 115: org.cudo.compute.v1.VMService.ListPublicVMImages:output_type -> org.cudo.compute.v1.ListPublicVMImagesResponse
	34,  // 116: org.cudo.compute.v1.VMService.ListVMMachineTypes:output_type -> org.cudo.compute.v1.ListVMMachineTypesResponse
	36,  // 117: org.cudo.compute.v1.VMService.ListVMMachineTypes2:output_type -> org.cudo.compute.v1.ListVMMachineTypes2Response
	40,  // 118: org.cudo.compute.v1.VMService.ListVMDataCenters:output_type -> org.cudo.compute.v1.ListVMDataCentersResponse
	42,  // 119: org.cudo.compute.v1.VMService.ListVMGpuModels:output_type -> org.cudo.compute.v1.ListVMGpuModelsResponse
	44,  // 120: org.cudo.compute.v1.VMService.CreatePrivateVMImage:output_type -> org.cudo.compute.v1.CreatePrivateVMImageResponse
	46,  // 121: org.cudo.compute.v1.VMService.DeletePrivateVMImage:output_type -> org.cudo.compute.v1.DeletePrivateVMImageResponse
	49,  // 122: org.cudo.compute.v1.VMService.GetPrivateVMImage:output_type -> org.cudo.compute.v1.GetPrivateVMImageResponse
	50,  // 123: org.cudo.compute.v1.VMService.ListPrivateVMImages:output_type -> org.cudo.compute.v1.ListPrivateVMImagesResponse
	52,  // 124: org.cudo.compute.v1.VMService.UpdatePrivateVMImage:output_type -> org.cudo.compute.v1.UpdatePrivateVMImageResponse
	58,  // 125: org.cudo.compute.v1.VMService.CreateStorageDisk:output_type -> org.cudo.compute.v1.CreateStorageDiskResponse
	8,   // 126: org.cudo.compute.v1.VMService.ResizeVMDisk:output_type -> org.cudo.compute.v1.ResizeVMDiskResponse
	54,  // 127: org.cudo.compute.v1.VMService.ListDisks:output_type -> org.cudo.compute.v1.ListDisksResponse
	56,  // 128: org.cudo.compute.v1.VMService.GetDisk:output_type -> org.cudo.compute.v1.GetDiskResponse
	60,  // 129: org.cudo.compute.v1.VMService.DeleteStorageDisk:output_type -> org.cudo.compute.v1.DeleteStorageDiskResponse
	14,  // 130: org.cudo.compute.v1.VMService.AttachStorageDisk:output_type -> org.cudo.compute.v1.AttachStorageDiskResponse
	16,  // 131: org.cudo.compute.v1.VMService.DetachStorageDisk:output_type -> org.cudo.compute.v1.DetachStorageDiskResponse
	62,  // 132: org.cudo.compute.v1.VMService.CreateDiskSnapshot:output_type -> org.cudo.compute.v1.CreateDiskSnapshotResponse
	66,  // 133: org.cudo.compute.v1.VMService.ListDiskSnapshots:output_type -> org.cudo.compute.v1.ListDiskSnapshotsResponse
	68,  // 134: org.cudo.compute.v1.VMService.DeleteDiskSnapshot:output_type -> org.cudo.compute.v1.DeleteDiskSnapshotResponse
	64,  // 135: org.cudo.compute.v1.VMService.RevertDisk:output_type -> org.cudo.compute.v1.RevertDiskResponse
	70,  // 136: org.cudo.compute.v1.VMService.AttachSecurityGroup:output_type -> org.cudo.compute.v1.AttachSecurityGroupResponse
	72,  // 137: org.cudo.compute.v1.VMService.DetachSecurityGroup:output_type -> org.cudo.compute.v1.DetachSecurityGroupResponse
	74,  // 138: org.cudo.compute.v1.VMService.UpdateVMMetadata:output_type -> org.cudo.compute.v1.UpdateVMMetadataResponse
	76,  // 139: org.cudo.compute.v1.VMService.UpdateVMExpireTime:output_type -> org.cudo.compute.v1.UpdateVMExpireTimeResponse
	103, // [103:140] is the sub-list for method output_type
	66,  // [66:103] is the sub-list for method input_type
	66,  // [66:66] is the sub-list for extension type_name
	66,  // [66:66] is the sub-list for extension extendee
	0,   // [0:66] is the sub-list for field type_name
}

func init() { file_svc_compute_vm_vm_proto_init() }
func file_svc_compute_vm_vm_proto_init() {
	if File_svc_compute_vm_vm_proto != nil {
		return
	}
	file_svc_compute_vm_vm_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_svc_compute_vm_vm_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ResizeVMDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ResizeVMDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ResizeVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ResizeVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMDisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMDisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*AttachStorageDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*AttachStorageDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*DetachStorageDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*DetachStorageDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*StartVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*StartVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*StopVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*StopVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*TerminateVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*TerminateVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*RebootVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RebootVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*GetVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*GetVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CountVMsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CountVMsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*MonitorVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*MonitorVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectVMRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ConnectVMResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMMachineTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMMachineTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMMachineTypes2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMMachineTypes2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*ListPublicVMImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*ListPublicVMImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMDataCentersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMDataCentersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMGpuModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMGpuModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePrivateVMImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*CreatePrivateVMImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePrivateVMImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePrivateVMImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*ListPrivateVMImagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrivateVMImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*GetPrivateVMImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*ListPrivateVMImagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePrivateVMImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*UpdatePrivateVMImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*ListDisksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*ListDisksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*GetDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*GetDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*CreateStorageDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*CreateStorageDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteStorageDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteStorageDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDiskSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDiskSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*RevertDiskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*RevertDiskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*ListDiskSnapshotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*ListDiskSnapshotsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDiskSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDiskSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*AttachSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*AttachSecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*DetachSecurityGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*DetachSecurityGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVMMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVMMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVMExpireTimeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateVMExpireTimeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVMRequest_NIC); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*CreateVMRequest_CpuTopology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMMachineTypesResponse_VMMachineType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMMachineTypesResponse_VMMachineType_MachineTypePrice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMMachineTypes2Response_VMMachineType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*ListPublicVMImagesResponse_Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*ListPublicVMImagesResponse_Image_Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMDataCentersResponse_VMDataCenter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[83].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMDataCentersResponse_VMDataCenter_DiskStoragePriceHr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[84].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMDataCentersResponse_VMDataCenter_NetworkPriceHr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_svc_compute_vm_vm_proto_msgTypes[85].Exporter = func(v any, i int) any {
			switch v := v.(*ListVMGpuModelsResponse_GpuModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_svc_compute_vm_vm_proto_msgTypes[0].OneofWrappers = []any{
		(*CreateVMRequest_ExpireTime)(nil),
		(*CreateVMRequest_Ttl)(nil),
	}
	file_svc_compute_vm_vm_proto_msgTypes[72].OneofWrappers = []any{
		(*UpdateVMExpireTimeRequest_ExpireTime)(nil),
		(*UpdateVMExpireTimeRequest_Ttl)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_svc_compute_vm_vm_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   88,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_svc_compute_vm_vm_proto_goTypes,
		DependencyIndexes: file_svc_compute_vm_vm_proto_depIdxs,
		EnumInfos:         file_svc_compute_vm_vm_proto_enumTypes,
		MessageInfos:      file_svc_compute_vm_vm_proto_msgTypes,
	}.Build()
	File_svc_compute_vm_vm_proto = out.File
	file_svc_compute_vm_vm_proto_rawDesc = nil
	file_svc_compute_vm_vm_proto_goTypes = nil
	file_svc_compute_vm_vm_proto_depIdxs = nil
}
